/* A Bison parser, made by GNU Bison 2.6.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.6"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs

/* Copy the first part of user declarations.  */

/* Line 336 of yacc.c  */
#line 24 "/root/inception/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"
#include "sql_lex.h"
#include "lex_symbol.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  int len;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  len = strlen(yytext);
  len = truncate_inception_commit(yytext, len);

  /* Push an error into the error stack */
  ErrConvString err(yytext, len, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
//   if (pctx && tmp->var == Sys_autocommit_ptr)
//     sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

// #ifdef HAVE_REPLICATION
//   if (lex->uses_stored_routines() &&
//       ((tmp->var == Sys_gtid_next_ptr
// #ifdef HAVE_NDB_BINLOG
//        || tmp->var == Sys_gtid_next_list_ptr
// #endif
//        ) ||
//        Sys_gtid_purged_ptr == tmp->var))
//   {
//     my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
//              tmp->var->name.str);
//     return TRUE;
//   }
// #endif

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}




/* Line 336 of yacc.c  */
#line 1024 "/root/inception/debug/sql/sql_yacc.cc"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef MYSQL_ROOT_INCEPTION_DEBUG_SQL_SQL_YACC_H
# define MYSQL_ROOT_INCEPTION_DEBUG_SQL_SQL_YACC_H
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_FORMAT_SYM = 327,
     COLUMN_NAME_SYM = 328,
     COMMENT_SYM = 329,
     COMMITTED_SYM = 330,
     COMMIT_SYM = 331,
     COMPACT_SYM = 332,
     COMPLETION_SYM = 333,
     COMPRESSED_SYM = 334,
     CONCURRENT = 335,
     CONDITION_SYM = 336,
     CONNECTION_SYM = 337,
     CONSISTENT_SYM = 338,
     CONSTRAINT = 339,
     CONSTRAINT_CATALOG_SYM = 340,
     CONSTRAINT_NAME_SYM = 341,
     CONSTRAINT_SCHEMA_SYM = 342,
     CONTAINS_SYM = 343,
     CONTEXT_SYM = 344,
     CONTINUE_SYM = 345,
     CONVERT_SYM = 346,
     COUNT_SYM = 347,
     CPU_SYM = 348,
     CREATE = 349,
     CROSS = 350,
     CUBE_SYM = 351,
     CURDATE = 352,
     CURRENT_SYM = 353,
     CURRENT_USER = 354,
     CURSOR_SYM = 355,
     CURSOR_NAME_SYM = 356,
     CURTIME = 357,
     DATABASE = 358,
     DATABASES = 359,
     DATAFILE_SYM = 360,
     DATA_SYM = 361,
     DATETIME = 362,
     DATE_ADD_INTERVAL = 363,
     DATE_SUB_INTERVAL = 364,
     DATE_SYM = 365,
     DAY_HOUR_SYM = 366,
     DAY_MICROSECOND_SYM = 367,
     DAY_MINUTE_SYM = 368,
     DAY_SECOND_SYM = 369,
     DAY_SYM = 370,
     DEALLOCATE_SYM = 371,
     DECIMAL_NUM = 372,
     DECIMAL_SYM = 373,
     DECLARE_SYM = 374,
     DEFAULT = 375,
     DEFAULT_AUTH_SYM = 376,
     DEFINER_SYM = 377,
     DELAYED_SYM = 378,
     DELAY_KEY_WRITE_SYM = 379,
     DELETE_SYM = 380,
     DESC = 381,
     DESCRIBE = 382,
     DES_KEY_FILE = 383,
     DETERMINISTIC_SYM = 384,
     DIAGNOSTICS_SYM = 385,
     DIRECTORY_SYM = 386,
     DISABLE_SYM = 387,
     DISCARD = 388,
     DISK_SYM = 389,
     DISTINCT = 390,
     DIV_SYM = 391,
     DOUBLE_SYM = 392,
     DO_SYM = 393,
     DROP = 394,
     DUAL_SYM = 395,
     DUMPFILE = 396,
     DUPLICATE_SYM = 397,
     DYNAMIC_SYM = 398,
     EACH_SYM = 399,
     ELSE = 400,
     ELSEIF_SYM = 401,
     ENABLE_SYM = 402,
     ENCLOSED = 403,
     END = 404,
     ENDS_SYM = 405,
     END_OF_INPUT = 406,
     ENGINES_SYM = 407,
     ENGINE_SYM = 408,
     ENUM = 409,
     EQ = 410,
     EQUAL_SYM = 411,
     ERROR_SYM = 412,
     ERRORS = 413,
     ESCAPED = 414,
     ESCAPE_SYM = 415,
     EVENTS_SYM = 416,
     EVENT_SYM = 417,
     EVERY_SYM = 418,
     EXCHANGE_SYM = 419,
     EXECUTE_SYM = 420,
     EXISTS = 421,
     EXIT_SYM = 422,
     EXPANSION_SYM = 423,
     EXPIRE_SYM = 424,
     EXPORT_SYM = 425,
     EXTENDED_SYM = 426,
     EXTENT_SIZE_SYM = 427,
     EXTRACT_SYM = 428,
     FALSE_SYM = 429,
     FAST_SYM = 430,
     FAULTS_SYM = 431,
     FETCH_SYM = 432,
     FILE_SYM = 433,
     FIRST_SYM = 434,
     FIXED_SYM = 435,
     FLOAT_NUM = 436,
     FLOAT_SYM = 437,
     FLUSH_SYM = 438,
     FORCE_SYM = 439,
     FOREIGN = 440,
     FOR_SYM = 441,
     FORMAT_SYM = 442,
     FOUND_SYM = 443,
     FROM = 444,
     FULL = 445,
     FULLTEXT_SYM = 446,
     FUNCTION_SYM = 447,
     GE = 448,
     GENERAL = 449,
     GEOMETRYCOLLECTION = 450,
     GEOMETRY_SYM = 451,
     GET_FORMAT = 452,
     GET_SYM = 453,
     GLOBAL_SYM = 454,
     GRANT = 455,
     GRANTS = 456,
     GROUP_SYM = 457,
     GROUP_CONCAT_SYM = 458,
     GT_SYM = 459,
     HANDLER_SYM = 460,
     HASH_SYM = 461,
     HAVING = 462,
     HELP_SYM = 463,
     HEX_NUM = 464,
     HIGH_PRIORITY = 465,
     HOST_SYM = 466,
     HOSTS_SYM = 467,
     HOUR_MICROSECOND_SYM = 468,
     HOUR_MINUTE_SYM = 469,
     HOUR_SECOND_SYM = 470,
     HOUR_SYM = 471,
     IDENT = 472,
     IDENTIFIED_SYM = 473,
     IDENT_QUOTED = 474,
     IF = 475,
     IGNORE_SYM = 476,
     IGNORE_SERVER_IDS_SYM = 477,
     IMPORT = 478,
     INCEPTION_START_SYM = 479,
     INCEPTION_COMMIT_SYM = 480,
     INCEPTION_SYM = 481,
     INDEXES = 482,
     INDEX_SYM = 483,
     INFILE = 484,
     INITIAL_SIZE_SYM = 485,
     INNER_SYM = 486,
     INOUT_SYM = 487,
     INSENSITIVE_SYM = 488,
     INSERT = 489,
     INSERT_METHOD = 490,
     INSTALL_SYM = 491,
     INTERVAL_SYM = 492,
     INTO = 493,
     INT_SYM = 494,
     INVOKER_SYM = 495,
     IN_SYM = 496,
     IO_AFTER_GTIDS = 497,
     IO_BEFORE_GTIDS = 498,
     IO_SYM = 499,
     IPC_SYM = 500,
     IS = 501,
     ISOLATION = 502,
     ISSUER_SYM = 503,
     ITERATE_SYM = 504,
     JOIN_SYM = 505,
     KEYS = 506,
     KEY_BLOCK_SIZE = 507,
     KEY_SYM = 508,
     KILL_SYM = 509,
     LANGUAGE_SYM = 510,
     LAST_SYM = 511,
     LE = 512,
     LEADING = 513,
     LEAVES = 514,
     LEAVE_SYM = 515,
     LEFT = 516,
     LESS_SYM = 517,
     LEVEL_SYM = 518,
     LEX_HOSTNAME = 519,
     LIKE = 520,
     LIMIT = 521,
     LINEAR_SYM = 522,
     LINES = 523,
     LINESTRING = 524,
     LIST_SYM = 525,
     LOAD = 526,
     LOCAL_SYM = 527,
     LOCATOR_SYM = 528,
     LOCKS_SYM = 529,
     LOCK_SYM = 530,
     LOGFILE_SYM = 531,
     LOGS_SYM = 532,
     LONGBLOB = 533,
     LONGTEXT = 534,
     LONG_NUM = 535,
     LONG_SYM = 536,
     LOOP_SYM = 537,
     LOW_PRIORITY = 538,
     LT = 539,
     MASTER_AUTO_POSITION_SYM = 540,
     MASTER_BIND_SYM = 541,
     MASTER_CONNECT_RETRY_SYM = 542,
     MASTER_DELAY_SYM = 543,
     MASTER_HOST_SYM = 544,
     MASTER_LOG_FILE_SYM = 545,
     MASTER_LOG_POS_SYM = 546,
     MASTER_PASSWORD_SYM = 547,
     MASTER_PORT_SYM = 548,
     MASTER_RETRY_COUNT_SYM = 549,
     MASTER_SERVER_ID_SYM = 550,
     MASTER_SSL_CAPATH_SYM = 551,
     MASTER_SSL_CA_SYM = 552,
     MASTER_SSL_CERT_SYM = 553,
     MASTER_SSL_CIPHER_SYM = 554,
     MASTER_SSL_CRL_SYM = 555,
     MASTER_SSL_CRLPATH_SYM = 556,
     MASTER_SSL_KEY_SYM = 557,
     MASTER_SSL_SYM = 558,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 559,
     MASTER_SYM = 560,
     MASTER_USER_SYM = 561,
     MASTER_HEARTBEAT_PERIOD_SYM = 562,
     MATCH = 563,
     MAX_CONNECTIONS_PER_HOUR = 564,
     MAX_QUERIES_PER_HOUR = 565,
     MAX_ROWS = 566,
     MAX_SIZE_SYM = 567,
     MAX_SYM = 568,
     MAX_UPDATES_PER_HOUR = 569,
     MAX_USER_CONNECTIONS_SYM = 570,
     MAX_VALUE_SYM = 571,
     MEDIUMBLOB = 572,
     MEDIUMINT = 573,
     MEDIUMTEXT = 574,
     MEDIUM_SYM = 575,
     MEMORY_SYM = 576,
     MERGE_SYM = 577,
     MESSAGE_TEXT_SYM = 578,
     MICROSECOND_SYM = 579,
     MIGRATE_SYM = 580,
     MINUTE_MICROSECOND_SYM = 581,
     MINUTE_SECOND_SYM = 582,
     MINUTE_SYM = 583,
     MIN_ROWS = 584,
     MIN_SYM = 585,
     MODE_SYM = 586,
     MODIFIES_SYM = 587,
     MODIFY_SYM = 588,
     MOD_SYM = 589,
     MONTH_SYM = 590,
     MULTILINESTRING = 591,
     MULTIPOINT = 592,
     MULTIPOLYGON = 593,
     MUTEX_SYM = 594,
     MYSQL_ERRNO_SYM = 595,
     NAMES_SYM = 596,
     NAME_SYM = 597,
     NATIONAL_SYM = 598,
     NATURAL = 599,
     NCHAR_STRING = 600,
     NCHAR_SYM = 601,
     NDBCLUSTER_SYM = 602,
     NE = 603,
     NEG = 604,
     NEW_SYM = 605,
     NEXT_SYM = 606,
     NODEGROUP_SYM = 607,
     NONE_SYM = 608,
     NOT2_SYM = 609,
     NOT_SYM = 610,
     NOW_SYM = 611,
     NO_SYM = 612,
     NO_WAIT_SYM = 613,
     NO_WRITE_TO_BINLOG = 614,
     NULL_SYM = 615,
     NUM = 616,
     NUMBER_SYM = 617,
     NUMERIC_SYM = 618,
     NVARCHAR_SYM = 619,
     OFFSET_SYM = 620,
     OLD_PASSWORD = 621,
     ON = 622,
     ONE_SYM = 623,
     ONLY_SYM = 624,
     OPEN_SYM = 625,
     OPTIMIZE = 626,
     OPTIONS_SYM = 627,
     OPTION = 628,
     OPTIONALLY = 629,
     OR2_SYM = 630,
     ORDER_SYM = 631,
     OR_OR_SYM = 632,
     OR_SYM = 633,
     OSC_PERCENT_SYM = 634,
     OSC_SYM = 635,
     OUTER = 636,
     OUTFILE = 637,
     OUT_SYM = 638,
     OWNER_SYM = 639,
     PACK_KEYS_SYM = 640,
     PAGE_SYM = 641,
     PARAM_MARKER = 642,
     PARSER_SYM = 643,
     PARTIAL = 644,
     PARTITION_SYM = 645,
     PARTITIONS_SYM = 646,
     PARTITIONING_SYM = 647,
     PASSWORD = 648,
     PHASE_SYM = 649,
     PLUGIN_DIR_SYM = 650,
     PLUGIN_SYM = 651,
     PLUGINS_SYM = 652,
     POINT_SYM = 653,
     POLYGON = 654,
     PORT_SYM = 655,
     POSITION_SYM = 656,
     PRECISION = 657,
     PREPARE_SYM = 658,
     PRESERVE_SYM = 659,
     PREV_SYM = 660,
     PRIMARY_SYM = 661,
     PRIVILEGES = 662,
     PROCEDURE_SYM = 663,
     PROCESS = 664,
     PROCESSLIST_SYM = 665,
     PROFILE_SYM = 666,
     PROFILES_SYM = 667,
     PROXY_SYM = 668,
     PURGE = 669,
     QUARTER_SYM = 670,
     QUERY_SYM = 671,
     QUICK = 672,
     RANGE_SYM = 673,
     READS_SYM = 674,
     READ_ONLY_SYM = 675,
     READ_SYM = 676,
     READ_WRITE_SYM = 677,
     REAL = 678,
     REBUILD_SYM = 679,
     RECOVER_SYM = 680,
     REDOFILE_SYM = 681,
     REDO_BUFFER_SIZE_SYM = 682,
     REDUNDANT_SYM = 683,
     REFERENCES = 684,
     REGEXP = 685,
     RELAY = 686,
     RELAYLOG_SYM = 687,
     RELAY_LOG_FILE_SYM = 688,
     RELAY_LOG_POS_SYM = 689,
     RELAY_THREAD = 690,
     RELEASE_SYM = 691,
     RELOAD = 692,
     REMOVE_SYM = 693,
     RENAME = 694,
     REORGANIZE_SYM = 695,
     REPAIR = 696,
     REPEATABLE_SYM = 697,
     REPEAT_SYM = 698,
     REPLACE = 699,
     REPLICATION = 700,
     REQUIRE_SYM = 701,
     RESET_SYM = 702,
     RESIGNAL_SYM = 703,
     RESOURCES = 704,
     RESTORE_SYM = 705,
     RESTRICT = 706,
     RESUME_SYM = 707,
     RETURNED_SQLSTATE_SYM = 708,
     RETURNS_SYM = 709,
     RETURN_SYM = 710,
     REVERSE_SYM = 711,
     REVOKE = 712,
     RIGHT = 713,
     ROLLBACK_SYM = 714,
     ROLLUP_SYM = 715,
     ROUTINE_SYM = 716,
     ROWS_SYM = 717,
     ROW_FORMAT_SYM = 718,
     ROW_SYM = 719,
     ROW_COUNT_SYM = 720,
     RTREE_SYM = 721,
     SAVEPOINT_SYM = 722,
     SCHEDULE_SYM = 723,
     SCHEMA_NAME_SYM = 724,
     SECOND_MICROSECOND_SYM = 725,
     SECOND_SYM = 726,
     SECURITY_SYM = 727,
     SELECT_SYM = 728,
     SENSITIVE_SYM = 729,
     SEPARATOR_SYM = 730,
     SERIALIZABLE_SYM = 731,
     SERIAL_SYM = 732,
     SESSION_SYM = 733,
     SERVER_SYM = 734,
     SERVER_OPTIONS = 735,
     SET = 736,
     SET_VAR = 737,
     SHARE_SYM = 738,
     SHIFT_LEFT = 739,
     SHIFT_RIGHT = 740,
     SHOW = 741,
     SHUTDOWN = 742,
     SIGNAL_SYM = 743,
     SIGNED_SYM = 744,
     SIMPLE_SYM = 745,
     SLAVE = 746,
     SLOW = 747,
     SMALLINT = 748,
     SNAPSHOT_SYM = 749,
     SOCKET_SYM = 750,
     SONAME_SYM = 751,
     SOUNDS_SYM = 752,
     SOURCE_SYM = 753,
     SPATIAL_SYM = 754,
     SPECIFIC_SYM = 755,
     SQLEXCEPTION_SYM = 756,
     SQLSTATE_SYM = 757,
     SQLWARNING_SYM = 758,
     SQL_AFTER_GTIDS = 759,
     SQL_AFTER_MTS_GAPS = 760,
     SQL_BEFORE_GTIDS = 761,
     SQL_BIG_RESULT = 762,
     SQL_BUFFER_RESULT = 763,
     SQL_CACHE_SYM = 764,
     SQL_CALC_FOUND_ROWS = 765,
     SQL_NO_CACHE_SYM = 766,
     SQL_SMALL_RESULT = 767,
     SQL_SYM = 768,
     SQL_THREAD = 769,
     SSL_SYM = 770,
     STARTING = 771,
     STARTS_SYM = 772,
     START_SYM = 773,
     STATS_AUTO_RECALC_SYM = 774,
     STATS_PERSISTENT_SYM = 775,
     STATS_SAMPLE_PAGES_SYM = 776,
     STATUS_SYM = 777,
     STDDEV_SAMP_SYM = 778,
     STD_SYM = 779,
     STOP_SYM = 780,
     STORAGE_SYM = 781,
     STRAIGHT_JOIN = 782,
     STRING_SYM = 783,
     SUBCLASS_ORIGIN_SYM = 784,
     SUBDATE_SYM = 785,
     SUBJECT_SYM = 786,
     SUBPARTITIONS_SYM = 787,
     SUBPARTITION_SYM = 788,
     SUBSTRING = 789,
     SUM_SYM = 790,
     SUPER_SYM = 791,
     SUSPEND_SYM = 792,
     SWAPS_SYM = 793,
     SWITCHES_SYM = 794,
     SYSDATE = 795,
     TABLES = 796,
     TABLESPACE = 797,
     TABLE_REF_PRIORITY = 798,
     TABLE_SYM = 799,
     TABLE_CHECKSUM_SYM = 800,
     TABLE_NAME_SYM = 801,
     TEMPORARY = 802,
     TEMPTABLE_SYM = 803,
     TERMINATED = 804,
     TEXT_STRING = 805,
     TEXT_SYM = 806,
     THAN_SYM = 807,
     THEN_SYM = 808,
     TIMESTAMP = 809,
     TIMESTAMP_ADD = 810,
     TIMESTAMP_DIFF = 811,
     TIME_SYM = 812,
     TINYBLOB = 813,
     TINYINT = 814,
     TINYTEXT = 815,
     TO_SYM = 816,
     TRAILING = 817,
     TRANSACTION_SYM = 818,
     TRIGGERS_SYM = 819,
     TRIGGER_SYM = 820,
     TRIM = 821,
     TRUE_SYM = 822,
     TRUNCATE_SYM = 823,
     TYPES_SYM = 824,
     TYPE_SYM = 825,
     UDF_RETURNS_SYM = 826,
     ULONGLONG_NUM = 827,
     UNCOMMITTED_SYM = 828,
     UNDEFINED_SYM = 829,
     UNDERSCORE_CHARSET = 830,
     UNDOFILE_SYM = 831,
     UNDO_BUFFER_SIZE_SYM = 832,
     UNDO_SYM = 833,
     UNICODE_SYM = 834,
     UNINSTALL_SYM = 835,
     UNION_SYM = 836,
     UNIQUE_SYM = 837,
     UNKNOWN_SYM = 838,
     UNLOCK_SYM = 839,
     UNSIGNED = 840,
     UNTIL_SYM = 841,
     UPDATE_SYM = 842,
     UPGRADE_SYM = 843,
     USAGE = 844,
     USER = 845,
     USE_FRM = 846,
     USE_SYM = 847,
     USING = 848,
     UTC_DATE_SYM = 849,
     UTC_TIMESTAMP_SYM = 850,
     UTC_TIME_SYM = 851,
     VALUES = 852,
     VALUE_SYM = 853,
     VARBINARY = 854,
     VARCHAR = 855,
     VARIABLES = 856,
     VARIANCE_SYM = 857,
     VARYING = 858,
     VAR_SAMP_SYM = 859,
     VIEW_SYM = 860,
     WAIT_SYM = 861,
     WARNINGS = 862,
     WEEK_SYM = 863,
     WEIGHT_STRING_SYM = 864,
     WHEN_SYM = 865,
     WHERE = 866,
     WHILE_SYM = 867,
     WITH = 868,
     WITH_CUBE_SYM = 869,
     WITH_ROLLUP_SYM = 870,
     WORK_SYM = 871,
     WRAPPER_SYM = 872,
     WRITE_SYM = 873,
     X509_SYM = 874,
     XA_SYM = 875,
     XML_SYM = 876,
     XOR = 877,
     YEAR_MONTH_SYM = 878,
     YEAR_SYM = 879,
     ZEROFILL = 880
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLASS_ORIGIN_SYM 318
#define CLIENT_SYM 319
#define CLOSE_SYM 320
#define COALESCE 321
#define CODE_SYM 322
#define COLLATE_SYM 323
#define COLLATION_SYM 324
#define COLUMNS 325
#define COLUMN_SYM 326
#define COLUMN_FORMAT_SYM 327
#define COLUMN_NAME_SYM 328
#define COMMENT_SYM 329
#define COMMITTED_SYM 330
#define COMMIT_SYM 331
#define COMPACT_SYM 332
#define COMPLETION_SYM 333
#define COMPRESSED_SYM 334
#define CONCURRENT 335
#define CONDITION_SYM 336
#define CONNECTION_SYM 337
#define CONSISTENT_SYM 338
#define CONSTRAINT 339
#define CONSTRAINT_CATALOG_SYM 340
#define CONSTRAINT_NAME_SYM 341
#define CONSTRAINT_SCHEMA_SYM 342
#define CONTAINS_SYM 343
#define CONTEXT_SYM 344
#define CONTINUE_SYM 345
#define CONVERT_SYM 346
#define COUNT_SYM 347
#define CPU_SYM 348
#define CREATE 349
#define CROSS 350
#define CUBE_SYM 351
#define CURDATE 352
#define CURRENT_SYM 353
#define CURRENT_USER 354
#define CURSOR_SYM 355
#define CURSOR_NAME_SYM 356
#define CURTIME 357
#define DATABASE 358
#define DATABASES 359
#define DATAFILE_SYM 360
#define DATA_SYM 361
#define DATETIME 362
#define DATE_ADD_INTERVAL 363
#define DATE_SUB_INTERVAL 364
#define DATE_SYM 365
#define DAY_HOUR_SYM 366
#define DAY_MICROSECOND_SYM 367
#define DAY_MINUTE_SYM 368
#define DAY_SECOND_SYM 369
#define DAY_SYM 370
#define DEALLOCATE_SYM 371
#define DECIMAL_NUM 372
#define DECIMAL_SYM 373
#define DECLARE_SYM 374
#define DEFAULT 375
#define DEFAULT_AUTH_SYM 376
#define DEFINER_SYM 377
#define DELAYED_SYM 378
#define DELAY_KEY_WRITE_SYM 379
#define DELETE_SYM 380
#define DESC 381
#define DESCRIBE 382
#define DES_KEY_FILE 383
#define DETERMINISTIC_SYM 384
#define DIAGNOSTICS_SYM 385
#define DIRECTORY_SYM 386
#define DISABLE_SYM 387
#define DISCARD 388
#define DISK_SYM 389
#define DISTINCT 390
#define DIV_SYM 391
#define DOUBLE_SYM 392
#define DO_SYM 393
#define DROP 394
#define DUAL_SYM 395
#define DUMPFILE 396
#define DUPLICATE_SYM 397
#define DYNAMIC_SYM 398
#define EACH_SYM 399
#define ELSE 400
#define ELSEIF_SYM 401
#define ENABLE_SYM 402
#define ENCLOSED 403
#define END 404
#define ENDS_SYM 405
#define END_OF_INPUT 406
#define ENGINES_SYM 407
#define ENGINE_SYM 408
#define ENUM 409
#define EQ 410
#define EQUAL_SYM 411
#define ERROR_SYM 412
#define ERRORS 413
#define ESCAPED 414
#define ESCAPE_SYM 415
#define EVENTS_SYM 416
#define EVENT_SYM 417
#define EVERY_SYM 418
#define EXCHANGE_SYM 419
#define EXECUTE_SYM 420
#define EXISTS 421
#define EXIT_SYM 422
#define EXPANSION_SYM 423
#define EXPIRE_SYM 424
#define EXPORT_SYM 425
#define EXTENDED_SYM 426
#define EXTENT_SIZE_SYM 427
#define EXTRACT_SYM 428
#define FALSE_SYM 429
#define FAST_SYM 430
#define FAULTS_SYM 431
#define FETCH_SYM 432
#define FILE_SYM 433
#define FIRST_SYM 434
#define FIXED_SYM 435
#define FLOAT_NUM 436
#define FLOAT_SYM 437
#define FLUSH_SYM 438
#define FORCE_SYM 439
#define FOREIGN 440
#define FOR_SYM 441
#define FORMAT_SYM 442
#define FOUND_SYM 443
#define FROM 444
#define FULL 445
#define FULLTEXT_SYM 446
#define FUNCTION_SYM 447
#define GE 448
#define GENERAL 449
#define GEOMETRYCOLLECTION 450
#define GEOMETRY_SYM 451
#define GET_FORMAT 452
#define GET_SYM 453
#define GLOBAL_SYM 454
#define GRANT 455
#define GRANTS 456
#define GROUP_SYM 457
#define GROUP_CONCAT_SYM 458
#define GT_SYM 459
#define HANDLER_SYM 460
#define HASH_SYM 461
#define HAVING 462
#define HELP_SYM 463
#define HEX_NUM 464
#define HIGH_PRIORITY 465
#define HOST_SYM 466
#define HOSTS_SYM 467
#define HOUR_MICROSECOND_SYM 468
#define HOUR_MINUTE_SYM 469
#define HOUR_SECOND_SYM 470
#define HOUR_SYM 471
#define IDENT 472
#define IDENTIFIED_SYM 473
#define IDENT_QUOTED 474
#define IF 475
#define IGNORE_SYM 476
#define IGNORE_SERVER_IDS_SYM 477
#define IMPORT 478
#define INCEPTION_START_SYM 479
#define INCEPTION_COMMIT_SYM 480
#define INCEPTION_SYM 481
#define INDEXES 482
#define INDEX_SYM 483
#define INFILE 484
#define INITIAL_SIZE_SYM 485
#define INNER_SYM 486
#define INOUT_SYM 487
#define INSENSITIVE_SYM 488
#define INSERT 489
#define INSERT_METHOD 490
#define INSTALL_SYM 491
#define INTERVAL_SYM 492
#define INTO 493
#define INT_SYM 494
#define INVOKER_SYM 495
#define IN_SYM 496
#define IO_AFTER_GTIDS 497
#define IO_BEFORE_GTIDS 498
#define IO_SYM 499
#define IPC_SYM 500
#define IS 501
#define ISOLATION 502
#define ISSUER_SYM 503
#define ITERATE_SYM 504
#define JOIN_SYM 505
#define KEYS 506
#define KEY_BLOCK_SIZE 507
#define KEY_SYM 508
#define KILL_SYM 509
#define LANGUAGE_SYM 510
#define LAST_SYM 511
#define LE 512
#define LEADING 513
#define LEAVES 514
#define LEAVE_SYM 515
#define LEFT 516
#define LESS_SYM 517
#define LEVEL_SYM 518
#define LEX_HOSTNAME 519
#define LIKE 520
#define LIMIT 521
#define LINEAR_SYM 522
#define LINES 523
#define LINESTRING 524
#define LIST_SYM 525
#define LOAD 526
#define LOCAL_SYM 527
#define LOCATOR_SYM 528
#define LOCKS_SYM 529
#define LOCK_SYM 530
#define LOGFILE_SYM 531
#define LOGS_SYM 532
#define LONGBLOB 533
#define LONGTEXT 534
#define LONG_NUM 535
#define LONG_SYM 536
#define LOOP_SYM 537
#define LOW_PRIORITY 538
#define LT 539
#define MASTER_AUTO_POSITION_SYM 540
#define MASTER_BIND_SYM 541
#define MASTER_CONNECT_RETRY_SYM 542
#define MASTER_DELAY_SYM 543
#define MASTER_HOST_SYM 544
#define MASTER_LOG_FILE_SYM 545
#define MASTER_LOG_POS_SYM 546
#define MASTER_PASSWORD_SYM 547
#define MASTER_PORT_SYM 548
#define MASTER_RETRY_COUNT_SYM 549
#define MASTER_SERVER_ID_SYM 550
#define MASTER_SSL_CAPATH_SYM 551
#define MASTER_SSL_CA_SYM 552
#define MASTER_SSL_CERT_SYM 553
#define MASTER_SSL_CIPHER_SYM 554
#define MASTER_SSL_CRL_SYM 555
#define MASTER_SSL_CRLPATH_SYM 556
#define MASTER_SSL_KEY_SYM 557
#define MASTER_SSL_SYM 558
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 559
#define MASTER_SYM 560
#define MASTER_USER_SYM 561
#define MASTER_HEARTBEAT_PERIOD_SYM 562
#define MATCH 563
#define MAX_CONNECTIONS_PER_HOUR 564
#define MAX_QUERIES_PER_HOUR 565
#define MAX_ROWS 566
#define MAX_SIZE_SYM 567
#define MAX_SYM 568
#define MAX_UPDATES_PER_HOUR 569
#define MAX_USER_CONNECTIONS_SYM 570
#define MAX_VALUE_SYM 571
#define MEDIUMBLOB 572
#define MEDIUMINT 573
#define MEDIUMTEXT 574
#define MEDIUM_SYM 575
#define MEMORY_SYM 576
#define MERGE_SYM 577
#define MESSAGE_TEXT_SYM 578
#define MICROSECOND_SYM 579
#define MIGRATE_SYM 580
#define MINUTE_MICROSECOND_SYM 581
#define MINUTE_SECOND_SYM 582
#define MINUTE_SYM 583
#define MIN_ROWS 584
#define MIN_SYM 585
#define MODE_SYM 586
#define MODIFIES_SYM 587
#define MODIFY_SYM 588
#define MOD_SYM 589
#define MONTH_SYM 590
#define MULTILINESTRING 591
#define MULTIPOINT 592
#define MULTIPOLYGON 593
#define MUTEX_SYM 594
#define MYSQL_ERRNO_SYM 595
#define NAMES_SYM 596
#define NAME_SYM 597
#define NATIONAL_SYM 598
#define NATURAL 599
#define NCHAR_STRING 600
#define NCHAR_SYM 601
#define NDBCLUSTER_SYM 602
#define NE 603
#define NEG 604
#define NEW_SYM 605
#define NEXT_SYM 606
#define NODEGROUP_SYM 607
#define NONE_SYM 608
#define NOT2_SYM 609
#define NOT_SYM 610
#define NOW_SYM 611
#define NO_SYM 612
#define NO_WAIT_SYM 613
#define NO_WRITE_TO_BINLOG 614
#define NULL_SYM 615
#define NUM 616
#define NUMBER_SYM 617
#define NUMERIC_SYM 618
#define NVARCHAR_SYM 619
#define OFFSET_SYM 620
#define OLD_PASSWORD 621
#define ON 622
#define ONE_SYM 623
#define ONLY_SYM 624
#define OPEN_SYM 625
#define OPTIMIZE 626
#define OPTIONS_SYM 627
#define OPTION 628
#define OPTIONALLY 629
#define OR2_SYM 630
#define ORDER_SYM 631
#define OR_OR_SYM 632
#define OR_SYM 633
#define OSC_PERCENT_SYM 634
#define OSC_SYM 635
#define OUTER 636
#define OUTFILE 637
#define OUT_SYM 638
#define OWNER_SYM 639
#define PACK_KEYS_SYM 640
#define PAGE_SYM 641
#define PARAM_MARKER 642
#define PARSER_SYM 643
#define PARTIAL 644
#define PARTITION_SYM 645
#define PARTITIONS_SYM 646
#define PARTITIONING_SYM 647
#define PASSWORD 648
#define PHASE_SYM 649
#define PLUGIN_DIR_SYM 650
#define PLUGIN_SYM 651
#define PLUGINS_SYM 652
#define POINT_SYM 653
#define POLYGON 654
#define PORT_SYM 655
#define POSITION_SYM 656
#define PRECISION 657
#define PREPARE_SYM 658
#define PRESERVE_SYM 659
#define PREV_SYM 660
#define PRIMARY_SYM 661
#define PRIVILEGES 662
#define PROCEDURE_SYM 663
#define PROCESS 664
#define PROCESSLIST_SYM 665
#define PROFILE_SYM 666
#define PROFILES_SYM 667
#define PROXY_SYM 668
#define PURGE 669
#define QUARTER_SYM 670
#define QUERY_SYM 671
#define QUICK 672
#define RANGE_SYM 673
#define READS_SYM 674
#define READ_ONLY_SYM 675
#define READ_SYM 676
#define READ_WRITE_SYM 677
#define REAL 678
#define REBUILD_SYM 679
#define RECOVER_SYM 680
#define REDOFILE_SYM 681
#define REDO_BUFFER_SIZE_SYM 682
#define REDUNDANT_SYM 683
#define REFERENCES 684
#define REGEXP 685
#define RELAY 686
#define RELAYLOG_SYM 687
#define RELAY_LOG_FILE_SYM 688
#define RELAY_LOG_POS_SYM 689
#define RELAY_THREAD 690
#define RELEASE_SYM 691
#define RELOAD 692
#define REMOVE_SYM 693
#define RENAME 694
#define REORGANIZE_SYM 695
#define REPAIR 696
#define REPEATABLE_SYM 697
#define REPEAT_SYM 698
#define REPLACE 699
#define REPLICATION 700
#define REQUIRE_SYM 701
#define RESET_SYM 702
#define RESIGNAL_SYM 703
#define RESOURCES 704
#define RESTORE_SYM 705
#define RESTRICT 706
#define RESUME_SYM 707
#define RETURNED_SQLSTATE_SYM 708
#define RETURNS_SYM 709
#define RETURN_SYM 710
#define REVERSE_SYM 711
#define REVOKE 712
#define RIGHT 713
#define ROLLBACK_SYM 714
#define ROLLUP_SYM 715
#define ROUTINE_SYM 716
#define ROWS_SYM 717
#define ROW_FORMAT_SYM 718
#define ROW_SYM 719
#define ROW_COUNT_SYM 720
#define RTREE_SYM 721
#define SAVEPOINT_SYM 722
#define SCHEDULE_SYM 723
#define SCHEMA_NAME_SYM 724
#define SECOND_MICROSECOND_SYM 725
#define SECOND_SYM 726
#define SECURITY_SYM 727
#define SELECT_SYM 728
#define SENSITIVE_SYM 729
#define SEPARATOR_SYM 730
#define SERIALIZABLE_SYM 731
#define SERIAL_SYM 732
#define SESSION_SYM 733
#define SERVER_SYM 734
#define SERVER_OPTIONS 735
#define SET 736
#define SET_VAR 737
#define SHARE_SYM 738
#define SHIFT_LEFT 739
#define SHIFT_RIGHT 740
#define SHOW 741
#define SHUTDOWN 742
#define SIGNAL_SYM 743
#define SIGNED_SYM 744
#define SIMPLE_SYM 745
#define SLAVE 746
#define SLOW 747
#define SMALLINT 748
#define SNAPSHOT_SYM 749
#define SOCKET_SYM 750
#define SONAME_SYM 751
#define SOUNDS_SYM 752
#define SOURCE_SYM 753
#define SPATIAL_SYM 754
#define SPECIFIC_SYM 755
#define SQLEXCEPTION_SYM 756
#define SQLSTATE_SYM 757
#define SQLWARNING_SYM 758
#define SQL_AFTER_GTIDS 759
#define SQL_AFTER_MTS_GAPS 760
#define SQL_BEFORE_GTIDS 761
#define SQL_BIG_RESULT 762
#define SQL_BUFFER_RESULT 763
#define SQL_CACHE_SYM 764
#define SQL_CALC_FOUND_ROWS 765
#define SQL_NO_CACHE_SYM 766
#define SQL_SMALL_RESULT 767
#define SQL_SYM 768
#define SQL_THREAD 769
#define SSL_SYM 770
#define STARTING 771
#define STARTS_SYM 772
#define START_SYM 773
#define STATS_AUTO_RECALC_SYM 774
#define STATS_PERSISTENT_SYM 775
#define STATS_SAMPLE_PAGES_SYM 776
#define STATUS_SYM 777
#define STDDEV_SAMP_SYM 778
#define STD_SYM 779
#define STOP_SYM 780
#define STORAGE_SYM 781
#define STRAIGHT_JOIN 782
#define STRING_SYM 783
#define SUBCLASS_ORIGIN_SYM 784
#define SUBDATE_SYM 785
#define SUBJECT_SYM 786
#define SUBPARTITIONS_SYM 787
#define SUBPARTITION_SYM 788
#define SUBSTRING 789
#define SUM_SYM 790
#define SUPER_SYM 791
#define SUSPEND_SYM 792
#define SWAPS_SYM 793
#define SWITCHES_SYM 794
#define SYSDATE 795
#define TABLES 796
#define TABLESPACE 797
#define TABLE_REF_PRIORITY 798
#define TABLE_SYM 799
#define TABLE_CHECKSUM_SYM 800
#define TABLE_NAME_SYM 801
#define TEMPORARY 802
#define TEMPTABLE_SYM 803
#define TERMINATED 804
#define TEXT_STRING 805
#define TEXT_SYM 806
#define THAN_SYM 807
#define THEN_SYM 808
#define TIMESTAMP 809
#define TIMESTAMP_ADD 810
#define TIMESTAMP_DIFF 811
#define TIME_SYM 812
#define TINYBLOB 813
#define TINYINT 814
#define TINYTEXT 815
#define TO_SYM 816
#define TRAILING 817
#define TRANSACTION_SYM 818
#define TRIGGERS_SYM 819
#define TRIGGER_SYM 820
#define TRIM 821
#define TRUE_SYM 822
#define TRUNCATE_SYM 823
#define TYPES_SYM 824
#define TYPE_SYM 825
#define UDF_RETURNS_SYM 826
#define ULONGLONG_NUM 827
#define UNCOMMITTED_SYM 828
#define UNDEFINED_SYM 829
#define UNDERSCORE_CHARSET 830
#define UNDOFILE_SYM 831
#define UNDO_BUFFER_SIZE_SYM 832
#define UNDO_SYM 833
#define UNICODE_SYM 834
#define UNINSTALL_SYM 835
#define UNION_SYM 836
#define UNIQUE_SYM 837
#define UNKNOWN_SYM 838
#define UNLOCK_SYM 839
#define UNSIGNED 840
#define UNTIL_SYM 841
#define UPDATE_SYM 842
#define UPGRADE_SYM 843
#define USAGE 844
#define USER 845
#define USE_FRM 846
#define USE_SYM 847
#define USING 848
#define UTC_DATE_SYM 849
#define UTC_TIMESTAMP_SYM 850
#define UTC_TIME_SYM 851
#define VALUES 852
#define VALUE_SYM 853
#define VARBINARY 854
#define VARCHAR 855
#define VARIABLES 856
#define VARIANCE_SYM 857
#define VARYING 858
#define VAR_SAMP_SYM 859
#define VIEW_SYM 860
#define WAIT_SYM 861
#define WARNINGS 862
#define WEEK_SYM 863
#define WEIGHT_STRING_SYM 864
#define WHEN_SYM 865
#define WHERE 866
#define WHILE_SYM 867
#define WITH 868
#define WITH_CUBE_SYM 869
#define WITH_ROLLUP_SYM 870
#define WORK_SYM 871
#define WRAPPER_SYM 872
#define WRITE_SYM 873
#define X509_SYM 874
#define XA_SYM 875
#define XML_SYM 876
#define XOR 877
#define YEAR_MONTH_SYM 878
#define YEAR_SYM 879
#define ZEROFILL 880



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 350 of yacc.c  */
#line 970 "/root/inception/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;



/* Line 350 of yacc.c  */
#line 2378 "/root/inception/debug/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int MYSQLparse (void *YYPARSE_PARAM);
#else
int MYSQLparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int MYSQLparse (void);
#else
int MYSQLparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !MYSQL_ROOT_INCEPTION_DEBUG_SQL_SQL_YACC_H  */

/* Copy the second part of user declarations.  */

/* Line 353 of yacc.c  */
#line 1028 "/root/inception/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 353 of yacc.c  */
#line 2411 "/root/inception/debug/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  601
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   54815

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  645
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  930
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2604
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4357

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   880

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   638,     2,     2,     2,   632,   627,     2,
     635,   636,   630,   629,   637,   628,   643,   631,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   644,   641,
       2,     2,     2,     2,   642,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   633,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   639,   626,   640,   634,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   133,   135,   137,   142,   144,
     147,   148,   153,   154,   157,   161,   163,   166,   167,   171,
     175,   176,   184,   185,   186,   201,   202,   203,   218,   219,
     226,   227,   231,   236,   241,   245,   248,   259,   261,   265,
     268,   271,   274,   277,   280,   283,   286,   287,   301,   302,
     309,   312,   313,   315,   319,   321,   322,   325,   326,   329,
     330,   332,   336,   341,   342,   345,   346,   349,   351,   353,
     355,   357,   359,   361,   363,   365,   367,   369,   371,   373,
     375,   376,   380,   382,   383,   386,   387,   390,   393,   396,
     399,   402,   406,   410,   412,   414,   416,   419,   423,   427,
     428,   433,   434,   438,   439,   441,   445,   447,   448,   450,
     454,   456,   457,   461,   462,   464,   468,   470,   475,   476,
     478,   480,   482,   483,   487,   490,   494,   495,   499,   500,
     506,   512,   513,   521,   522,   529,   531,   533,   535,   539,
     541,   543,   545,   549,   550,   552,   554,   556,   558,   561,
     563,   567,   569,   571,   572,   574,   575,   578,   582,   588,
     590,   592,   594,   596,   598,   600,   602,   604,   606,   608,
     610,   612,   614,   616,   618,   622,   627,   628,   630,   632,
     636,   638,   642,   646,   648,   651,   653,   655,   657,   659,
     663,   667,   669,   671,   673,   675,   677,   679,   681,   683,
     685,   687,   689,   691,   693,   695,   699,   700,   701,   705,
     707,   709,   711,   713,   715,   717,   719,   721,   723,   725,
     727,   729,   731,   732,   738,   739,   742,   743,   747,   748,
     751,   754,   757,   760,   761,   768,   771,   772,   775,   777,
     779,   783,   784,   785,   786,   794,   795,   798,   801,   803,
     805,   806,   807,   816,   817,   824,   826,   829,   831,   834,
     835,   836,   843,   844,   845,   852,   853,   856,   857,   863,
     864,   866,   867,   873,   874,   877,   878,   884,   889,   890,
     891,   900,   901,   902,   911,   913,   915,   917,   919,   921,
     924,   929,   935,   936,   941,   946,   951,   955,   959,   962,
     965,   966,   969,   971,   974,   978,   980,   982,   984,   985,
     987,   989,   992,   996,   998,  1000,  1002,  1004,  1006,  1008,
    1010,  1012,  1013,  1015,  1017,  1020,  1024,  1026,  1028,  1030,
    1032,  1034,  1035,  1037,  1039,  1042,  1046,  1048,  1050,  1052,
    1054,  1056,  1058,  1060,  1061,  1063,  1065,  1068,  1072,  1074,
    1076,  1078,  1081,  1084,  1087,  1089,  1091,  1093,  1095,  1098,
    1102,  1106,  1110,  1114,  1118,  1122,  1126,  1130,  1135,  1137,
    1139,  1141,  1143,  1146,  1150,  1153,  1158,  1164,  1165,  1171,
    1172,  1173,  1179,  1180,  1188,  1190,  1191,  1193,  1194,  1199,
    1200,  1201,  1205,  1211,  1217,  1218,  1223,  1226,  1229,  1232,
    1235,  1236,  1238,  1239,  1241,  1243,  1247,  1249,  1254,  1260,
    1266,  1267,  1270,  1271,  1272,  1280,  1281,  1291,  1293,  1297,
    1299,  1301,  1302,  1305,  1306,  1310,  1312,  1316,  1317,  1324,
    1326,  1327,  1328,  1334,  1335,  1340,  1342,  1344,  1346,  1350,
    1352,  1356,  1357,  1358,  1364,  1366,  1370,  1372,  1374,  1375,
    1379,  1381,  1385,  1386,  1391,  1393,  1394,  1396,  1399,  1401,
    1405,  1410,  1414,  1418,  1422,  1427,  1432,  1436,  1437,  1438,
    1445,  1446,  1448,  1449,  1451,  1453,  1456,  1458,  1460,  1461,
    1463,  1465,  1468,  1470,  1471,  1475,  1476,  1478,  1480,  1483,
    1485,  1488,  1492,  1496,  1500,  1504,  1508,  1512,  1516,  1520,
    1524,  1528,  1532,  1536,  1540,  1544,  1548,  1552,  1556,  1560,
    1564,  1568,  1569,  1576,  1578,  1580,  1584,  1589,  1594,  1597,
    1600,  1603,  1607,  1611,  1616,  1621,  1623,  1625,  1627,  1629,
    1631,  1633,  1635,  1637,  1639,  1641,  1643,  1645,  1648,  1650,
    1652,  1654,  1656,  1658,  1660,  1664,  1666,  1668,  1671,  1674,
    1682,  1691,  1700,  1709,  1712,  1713,  1715,  1720,  1721,  1723,
    1726,  1727,  1732,  1736,  1740,  1744,  1746,  1749,  1751,  1753,
    1757,  1760,  1764,  1767,  1770,  1772,  1776,  1780,  1783,  1787,
    1789,  1792,  1795,  1798,  1800,  1803,  1805,  1807,  1810,  1814,
    1817,  1821,  1824,  1827,  1831,  1835,  1839,  1840,  1847,  1848,
    1855,  1858,  1860,  1862,  1864,  1867,  1870,  1872,  1875,  1877,
    1880,  1884,  1887,  1889,  1891,  1893,  1895,  1897,  1899,  1901,
    1904,  1905,  1907,  1909,  1915,  1916,  1920,  1921,  1924,  1928,
    1929,  1931,  1934,  1936,  1938,  1940,  1942,  1946,  1950,  1954,
    1958,  1959,  1961,  1962,  1964,  1965,  1967,  1970,  1972,  1974,
    1977,  1980,  1984,  1986,  1990,  1993,  1995,  1998,  2001,  2004,
    2007,  2010,  2013,  2016,  2019,  2022,  2025,  2028,  2030,  2032,
    2035,  2037,  2039,  2041,  2043,  2045,  2046,  2049,  2051,  2053,
    2055,  2057,  2059,  2060,  2063,  2065,  2067,  2068,  2070,  2072,
    2075,  2078,  2080,  2083,  2086,  2087,  2089,  2091,  2093,  2097,
    2099,  2103,  2104,  2106,  2107,  2112,  2114,  2116,  2118,  2119,
    2121,  2124,  2126,  2128,  2131,  2133,  2137,  2141,  2143,  2145,
    2146,  2149,  2150,  2152,  2158,  2159,  2163,  2167,  2169,  2170,
    2173,  2176,  2179,  2180,  2184,  2188,  2195,  2202,  2204,  2206,
    2209,  2212,  2215,  2217,  2220,  2223,  2225,  2227,  2228,  2230,
    2232,  2234,  2236,  2237,  2239,  2241,  2242,  2244,  2247,  2248,
    2250,  2251,  2253,  2255,  2258,  2260,  2263,  2266,  2269,  2273,
    2276,  2278,  2280,  2282,  2286,  2288,  2290,  2292,  2297,  2300,
    2302,  2307,  2308,  2310,  2311,  2314,  2316,  2320,  2321,  2328,
    2329,  2335,  2343,  2344,  2350,  2351,  2357,  2358,  2364,  2365,
    2370,  2371,  2382,  2386,  2391,  2395,  2399,  2407,  2412,  2416,
    2422,  2423,  2427,  2429,  2434,  2435,  2439,  2440,  2443,  2444,
    2446,  2447,  2450,  2453,  2456,  2459,  2461,  2463,  2465,  2469,
    2474,  2475,  2482,  2487,  2488,  2494,  2495,  2502,  2507,  2511,
    2513,  2521,  2525,  2527,  2529,  2530,  2536,  2537,  2541,  2544,
    2545,  2551,  2552,  2553,  2560,  2562,  2566,  2568,  2570,  2574,
    2577,  2581,  2584,  2589,  2590,  2597,  2598,  2599,  2608,  2613,
    2618,  2622,  2626,  2629,  2632,  2639,  2645,  2649,  2655,  2657,
    2659,  2661,  2663,  2665,  2666,  2668,  2670,  2673,  2676,  2680,
    2684,  2688,  2692,  2693,  2695,  2696,  2698,  2699,  2701,  2703,
    2704,  2707,  2709,  2710,  2712,  2714,  2716,  2720,  2721,  2723,
    2725,  2729,  2733,  2736,  2739,  2740,  2746,  2747,  2749,  2751,
    2752,  2759,  2760,  2762,  2764,  2767,  2769,  2771,  2773,  2774,
    2780,  2783,  2784,  2790,  2791,  2793,  2795,  2798,  2800,  2802,
    2804,  2806,  2808,  2811,  2812,  2818,  2819,  2821,  2823,  2824,
    2829,  2834,  2838,  2844,  2846,  2850,  2854,  2855,  2862,  2864,
    2866,  2868,  2872,  2875,  2879,  2881,  2882,  2889,  2891,  2893,
    2895,  2899,  2903,  2908,  2909,  2916,  2917,  2920,  2921,  2926,
    2927,  2930,  2932,  2935,  2940,  2943,  2947,  2950,  2954,  2955,
    2959,  2960,  2961,  2968,  2971,  2973,  2975,  2978,  2981,  2990,
    2995,  2996,  2998,  3001,  3003,  3005,  3007,  3009,  3010,  3013,
    3018,  3022,  3024,  3026,  3030,  3035,  3036,  3037,  3038,  3041,
    3044,  3046,  3048,  3049,  3052,  3056,  3060,  3063,  3067,  3072,
    3076,  3081,  3085,  3090,  3092,  3096,  3100,  3104,  3107,  3111,
    3116,  3120,  3125,  3129,  3134,  3136,  3140,  3145,  3149,  3153,
    3160,  3162,  3168,  3175,  3181,  3189,  3196,  3205,  3211,  3218,
    3223,  3228,  3234,  3238,  3243,  3245,  3249,  3253,  3257,  3261,
    3265,  3269,  3275,  3281,  3285,  3289,  3293,  3297,  3301,  3305,
    3307,  3309,  3311,  3313,  3315,  3317,  3319,  3321,  3323,  3325,
    3327,  3329,  3331,  3333,  3335,  3337,  3339,  3341,  3343,  3345,
    3347,  3349,  3353,  3355,  3357,  3359,  3361,  3365,  3368,  3371,
    3374,  3377,  3381,  3385,  3391,  3398,  3403,  3408,  3416,  3419,
    3426,  3432,  3439,  3446,  3451,  3456,  3462,  3467,  3474,  3477,
    3482,  3487,  3492,  3503,  3510,  3519,  3526,  3531,  3536,  3543,
    3548,  3553,  3558,  3565,  3570,  3578,  3586,  3594,  3601,  3608,
    3615,  3622,  3626,  3631,  3638,  3647,  3650,  3653,  3662,  3671,
    3678,  3685,  3687,  3694,  3701,  3710,  3719,  3726,  3735,  3742,
    3745,  3754,  3763,  3766,  3769,  3772,  3777,  3782,  3787,  3792,
    3796,  3805,  3812,  3821,  3826,  3833,  3838,  3843,  3848,  3855,
    3864,  3869,  3873,  3880,  3885,  3892,  3898,  3907,  3915,  3926,
    3927,  3933,  3940,  3943,  3947,  3948,  3953,  3954,  3958,  3959,
    3961,  3963,  3967,  3972,  3977,  3983,  3988,  3993,  3998,  4004,
    4009,  4010,  4011,  4019,  4024,  4030,  4035,  4041,  4046,  4051,
    4056,  4061,  4066,  4072,  4073,  4082,  4083,  4087,  4091,  4093,
    4098,  4099,  4101,  4102,  4105,  4106,  4108,  4109,  4113,  4116,
    4120,  4123,  4125,  4128,  4130,  4133,  4135,  4138,  4141,  4144,
    4145,  4147,  4149,  4153,  4155,  4159,  4161,  4165,  4166,  4168,
    4169,  4172,  4177,  4183,  4185,  4187,  4189,  4191,  4196,  4198,
    4202,  4206,  4210,  4211,  4218,  4219,  4226,  4227,  4236,  4241,
    4242,  4251,  4252,  4263,  4270,  4271,  4280,  4281,  4292,  4299,
    4301,  4304,  4307,  4308,  4310,  4316,  4317,  4323,  4327,  4333,
    4336,  4337,  4338,  4346,  4348,  4349,  4350,  4357,  4358,  4362,
    4363,  4364,  4370,  4371,  4373,  4374,  4376,  4377,  4380,  4384,
    4388,  4390,  4392,  4393,  4401,  4402,  4410,  4412,  4415,  4416,
    4417,  4420,  4421,  4424,  4425,  4427,  4429,  4431,  4433,  4437,
    4439,  4443,  4445,  4447,  4449,  4451,  4453,  4455,  4457,  4459,
    4461,  4463,  4465,  4467,  4469,  4471,  4473,  4475,  4477,  4479,
    4481,  4483,  4485,  4487,  4489,  4491,  4493,  4494,  4496,  4498,
    4499,  4502,  4503,  4505,  4506,  4507,  4511,  4512,  4513,  4517,
    4520,  4521,  4522,  4527,  4532,  4535,  4536,  4538,  4540,  4544,
    4548,  4550,  4553,  4554,  4556,  4557,  4562,  4567,  4570,  4571,
    4573,  4575,  4576,  4578,  4579,  4581,  4584,  4586,  4590,  4594,
    4596,  4598,  4600,  4602,  4604,  4605,  4608,  4610,  4612,  4614,
    4616,  4618,  4620,  4622,  4624,  4626,  4628,  4630,  4632,  4634,
    4636,  4638,  4640,  4642,  4644,  4646,  4648,  4650,  4652,  4654,
    4655,  4656,  4663,  4664,  4666,  4670,  4672,  4673,  4676,  4680,
    4682,  4685,  4687,  4688,  4692,  4693,  4694,  4702,  4705,  4707,
    4708,  4712,  4713,  4721,  4722,  4723,  4732,  4737,  4744,  4749,
    4754,  4759,  4760,  4767,  4772,  4777,  4782,  4788,  4793,  4795,
    4799,  4801,  4804,  4806,  4810,  4812,  4813,  4816,  4817,  4819,
    4820,  4822,  4824,  4827,  4831,  4833,  4835,  4836,  4837,  4846,
    4847,  4848,  4855,  4856,  4858,  4860,  4862,  4864,  4866,  4869,
    4871,  4873,  4875,  4879,  4884,  4885,  4889,  4893,  4895,  4898,
    4901,  4902,  4906,  4907,  4913,  4917,  4919,  4923,  4925,  4929,
    4931,  4933,  4934,  4936,  4937,  4942,  4943,  4945,  4949,  4951,
    4953,  4955,  4957,  4959,  4960,  4961,  4968,  4969,  4970,  4982,
    4986,  4988,  4992,  4996,  4998,  5002,  5003,  5005,  5006,  5011,
    5012,  5020,  5021,  5027,  5028,  5035,  5037,  5041,  5044,  5049,
    5050,  5053,  5054,  5057,  5059,  5061,  5063,  5064,  5069,  5070,
    5072,  5073,  5075,  5077,  5081,  5083,  5085,  5088,  5091,  5094,
    5096,  5098,  5100,  5102,  5103,  5107,  5108,  5112,  5115,  5120,
    5125,  5129,  5134,  5139,  5141,  5145,  5149,  5156,  5159,  5162,
    5163,  5170,  5171,  5178,  5184,  5187,  5189,  5195,  5201,  5204,
    5207,  5209,  5214,  5218,  5221,  5225,  5228,  5231,  5233,  5237,
    5242,  5246,  5250,  5253,  5256,  5260,  5264,  5268,  5272,  5276,
    5280,  5284,  5288,  5290,  5292,  5294,  5296,  5298,  5299,  5301,
    5302,  5305,  5306,  5308,  5310,  5312,  5313,  5316,  5317,  5320,
    5321,  5324,  5327,  5328,  5333,  5334,  5338,  5340,  5342,  5344,
    5346,  5348,  5350,  5352,  5353,  5355,  5357,  5358,  5363,  5364,
    5365,  5371,  5373,  5374,  5378,  5379,  5383,  5387,  5389,  5392,
    5395,  5398,  5401,  5404,  5407,  5410,  5412,  5414,  5416,  5418,
    5420,  5422,  5423,  5425,  5426,  5430,  5434,  5436,  5437,  5441,
    5443,  5446,  5447,  5449,  5450,  5454,  5458,  5461,  5464,  5468,
    5469,  5471,  5473,  5476,  5477,  5478,  5479,  5480,  5503,  5505,
    5507,  5508,  5510,  5511,  5513,  5515,  5516,  5518,  5520,  5521,
    5524,  5527,  5529,  5533,  5538,  5542,  5546,  5547,  5550,  5553,
    5555,  5559,  5563,  5564,  5569,  5570,  5574,  5576,  5578,  5579,
    5583,  5586,  5590,  5592,  5594,  5597,  5598,  5601,  5605,  5607,
    5613,  5615,  5617,  5620,  5623,  5625,  5627,  5629,  5631,  5633,
    5636,  5639,  5641,  5643,  5645,  5647,  5649,  5651,  5653,  5655,
    5658,  5661,  5663,  5665,  5667,  5669,  5671,  5674,  5677,  5680,
    5682,  5684,  5688,  5694,  5696,  5698,  5700,  5702,  5704,  5708,
    5713,  5719,  5721,  5727,  5731,  5734,  5736,  5740,  5743,  5746,
    5751,  5753,  5755,  5757,  5759,  5761,  5763,  5765,  5767,  5769,
    5771,  5773,  5775,  5777,  5779,  5783,  5786,  5788,  5790,  5792,
    5794,  5796,  5798,  5800,  5802,  5804,  5806,  5808,  5810,  5812,
    5814,  5816,  5818,  5820,  5822,  5824,  5826,  5828,  5830,  5832,
    5834,  5836,  5838,  5840,  5842,  5844,  5846,  5848,  5850,  5852,
    5854,  5856,  5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,
    5874,  5876,  5878,  5880,  5882,  5884,  5886,  5888,  5890,  5892,
    5894,  5896,  5898,  5900,  5902,  5904,  5906,  5908,  5910,  5912,
    5914,  5916,  5918,  5920,  5922,  5924,  5926,  5928,  5930,  5932,
    5934,  5936,  5938,  5940,  5942,  5944,  5946,  5948,  5950,  5952,
    5954,  5956,  5958,  5960,  5962,  5964,  5966,  5968,  5970,  5972,
    5974,  5976,  5978,  5980,  5982,  5984,  5986,  5988,  5990,  5992,
    5994,  5996,  5998,  6000,  6002,  6004,  6006,  6008,  6010,  6012,
    6014,  6016,  6018,  6020,  6022,  6024,  6026,  6028,  6030,  6032,
    6034,  6036,  6038,  6040,  6042,  6044,  6046,  6048,  6050,  6052,
    6054,  6056,  6058,  6060,  6062,  6064,  6066,  6068,  6070,  6072,
    6074,  6076,  6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,
    6094,  6096,  6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,
    6114,  6116,  6118,  6120,  6122,  6124,  6126,  6128,  6130,  6132,
    6134,  6136,  6138,  6140,  6142,  6144,  6146,  6148,  6150,  6152,
    6154,  6156,  6158,  6160,  6162,  6164,  6166,  6168,  6170,  6172,
    6174,  6176,  6178,  6180,  6182,  6184,  6186,  6188,  6190,  6192,
    6194,  6196,  6198,  6200,  6202,  6204,  6206,  6208,  6210,  6212,
    6214,  6216,  6218,  6220,  6222,  6224,  6226,  6228,  6230,  6232,
    6234,  6236,  6238,  6240,  6242,  6244,  6246,  6248,  6250,  6252,
    6254,  6256,  6258,  6260,  6262,  6264,  6266,  6268,  6270,  6272,
    6274,  6276,  6278,  6280,  6282,  6284,  6286,  6288,  6290,  6292,
    6294,  6296,  6298,  6300,  6302,  6304,  6306,  6308,  6310,  6312,
    6314,  6316,  6318,  6320,  6322,  6324,  6326,  6328,  6330,  6332,
    6334,  6336,  6338,  6340,  6342,  6344,  6346,  6348,  6350,  6352,
    6354,  6356,  6358,  6360,  6362,  6364,  6366,  6368,  6370,  6372,
    6374,  6376,  6378,  6380,  6382,  6384,  6386,  6388,  6390,  6392,
    6394,  6396,  6398,  6400,  6402,  6404,  6406,  6408,  6410,  6412,
    6414,  6416,  6418,  6420,  6422,  6424,  6426,  6428,  6430,  6432,
    6434,  6436,  6438,  6440,  6442,  6444,  6446,  6448,  6450,  6452,
    6454,  6456,  6458,  6460,  6462,  6464,  6466,  6468,  6470,  6472,
    6474,  6476,  6478,  6480,  6482,  6484,  6486,  6488,  6489,  6494,
    6495,  6497,  6498,  6502,  6503,  6507,  6508,  6512,  6513,  6517,
    6520,  6521,  6524,  6525,  6528,  6529,  6534,  6535,  6539,  6541,
    6543,  6545,  6547,  6548,  6550,  6552,  6554,  6555,  6558,  6561,
    6564,  6568,  6569,  6574,  6579,  6586,  6589,  6593,  6597,  6601,
    6607,  6609,  6613,  6617,  6619,  6621,  6625,  6629,  6631,  6635,
    6638,  6641,  6644,  6647,  6650,  6652,  6654,  6659,  6664,  6666,
    6668,  6670,  6672,  6674,  6675,  6680,  6682,  6684,  6686,  6690,
    6694,  6696,  6698,  6701,  6704,  6705,  6709,  6714,  6718,  6719,
    6727,  6729,  6732,  6734,  6736,  6738,  6740,  6742,  6744,  6745,
    6751,  6753,  6755,  6757,  6759,  6761,  6765,  6772,  6779,  6786,
    6794,  6800,  6804,  6813,  6822,  6831,  6838,  6839,  6841,  6843,
    6846,  6847,  6849,  6851,  6855,  6856,  6860,  6861,  6865,  6866,
    6870,  6871,  6875,  6877,  6879,  6881,  6883,  6885,  6887,  6889,
    6891,  6893,  6895,  6897,  6900,  6903,  6905,  6909,  6912,  6915,
    6918,  6921,  6924,  6927,  6930,  6933,  6935,  6937,  6940,  6941,
    6943,  6947,  6949,  6952,  6955,  6958,  6960,  6964,  6968,  6970,
    6972,  6976,  6978,  6982,  6987,  6993,  6998,  7005,  7007,  7008,
    7012,  7016,  7018,  7020,  7021,  7024,  7027,  7030,  7033,  7034,
    7037,  7038,  7042,  7045,  7047,  7050,  7053,  7056,  7059,  7062,
    7063,  7065,  7068,  7071,  7074,  7078,  7082,  7086,  7090,  7091,
    7095,  7099,  7100,  7105,  7107,  7108,  7112,  7113,  7115,  7116,
    7120,  7123,  7124,  7126,  7129,  7130,  7132,  7134,  7139,  7144,
    7150,  7153,  7157,  7158,  7160,  7161,  7166,  7167,  7169,  7171,
    7172,  7174,  7175,  7178,  7181,  7183,  7184,  7186,  7188,  7191,
    7195,  7198,  7199,  7206,  7210,  7211,  7212,  7213,  7215,  7218,
    7220,  7222,  7224,  7226,  7228,  7230,  7232,  7234,  7236,  7239,
    7242,  7246,  7248,  7250,  7252,  7254,  7256,  7258,  7260,  7262,
    7264,  7266,  7268,  7270,  7272,  7273,  7277,  7279,  7282,  7284,
    7287,  7291,  7295,  7299,  7300,  7304,  7308,  7309,  7317,  7318,
    7322,  7324,  7328,  7329,  7333,  7334,  7338,  7343,  7345,  7349,
    7350,  7354,  7355,  7359,  7364,  7369,  7370,  7371,  7372,  7389,
    7398,  7406,  7407,  7408,  7409,  7410,  7411,  7427,  7428,  7429,
    7430,  7431,  7444,  7449,  7454,  7458,  7463,  7467,  7470,  7472,
    7476,  7482,  7484,  7486,  7487,  7489,  7491,  7492,  7495,  7496,
    7497,  7501,  7502,  7505,  7511
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     646,     0,    -1,   151,    -1,    -1,   649,   647,   641,   648,
      -1,   649,   151,    -1,    -1,   151,    -1,   650,    -1,  1498,
      -1,  1497,    -1,  1007,    -1,  1061,    -1,  1063,    -1,   694,
      -1,   662,    -1,  1064,    -1,  1053,    -1,  1505,    -1,  1504,
      -1,   663,    -1,   651,    -1,  1307,    -1,  1339,    -1,  1253,
      -1,  1255,    -1,   655,    -1,  1345,    -1,   729,    -1,  1465,
      -1,  1456,    -1,   660,    -1,  1270,    -1,  1573,    -1,  1365,
      -1,  1368,    -1,  1448,    -1,  1069,    -1,  1077,    -1,   848,
      -1,  1084,    -1,   653,    -1,  1361,    -1,  1508,    -1,  1072,
      -1,  1056,    -1,  1273,    -1,  1355,    -1,   728,    -1,  1463,
      -1,  1506,    -1,  1507,    -1,  1096,    -1,  1419,    -1,   721,
      -1,  1325,    -1,  1049,    -1,  1318,    -1,  1574,    -1,  1454,
      -1,  1299,    -1,  1367,    -1,  1565,    -1,  1494,    -1,   652,
     403,  1413,    -1,   116,    -1,   139,    -1,   403,  1413,   189,
     654,    -1,  1410,    -1,   642,  1415,    -1,    -1,   165,  1413,
     656,   657,    -1,    -1,   593,   658,    -1,   658,   637,   659,
      -1,   659,    -1,   642,  1415,    -1,    -1,   208,   661,  1415,
      -1,    56,   305,   561,    -1,    -1,    94,   899,   544,   902,
    1406,   664,   837,    -1,    -1,    -1,    94,   989,   228,  1413,
     992,   367,  1406,   665,   635,  1002,   636,   993,   666,  1041,
      -1,    -1,    -1,    94,   990,   228,  1413,   991,   367,  1406,
     667,   635,  1002,   636,   994,   668,  1041,    -1,    -1,    94,
     103,   902,  1413,   669,   896,    -1,    -1,    94,   670,  1527,
      -1,    94,   590,   687,  1481,    -1,    94,   276,   202,   801,
      -1,    94,   542,   798,    -1,    94,   671,    -1,   479,  1415,
     185,   106,   617,  1415,   372,   635,   672,   636,    -1,   673,
      -1,   672,   637,   673,    -1,   590,  1410,    -1,   211,  1410,
      -1,   103,  1410,    -1,   384,  1410,    -1,   393,  1410,    -1,
     495,  1410,    -1,   400,  1234,    -1,    -1,  1113,   162,   902,
     688,   675,   367,   468,   676,   681,   678,   683,   138,   684,
      -1,    -1,   163,  1118,  1206,   677,   679,   680,    -1,    23,
    1118,    -1,    -1,   147,    -1,   132,   367,   491,    -1,   132,
      -1,    -1,   517,  1118,    -1,    -1,   150,  1118,    -1,    -1,
     682,    -1,   367,    78,   404,    -1,   367,    78,   355,   404,
      -1,    -1,    74,  1410,    -1,    -1,   685,   686,    -1,   746,
      -1,   748,    -1,   744,    -1,   765,    -1,   783,    -1,   785,
      -1,   780,    -1,   750,    -1,   752,    -1,   753,    -1,   754,
      -1,   755,    -1,   757,    -1,    -1,  1413,   643,  1413,    -1,
    1413,    -1,    -1,   689,   691,    -1,    -1,   690,   692,    -1,
      74,  1410,    -1,   255,   513,    -1,   357,   513,    -1,    88,
     513,    -1,   419,   513,   106,    -1,   332,   513,   106,    -1,
     693,    -1,   691,    -1,   129,    -1,  1124,   129,    -1,   513,
     472,   122,    -1,   513,   472,   240,    -1,    -1,    49,   688,
     695,   696,    -1,    -1,   635,   697,   636,    -1,    -1,   698,
      -1,   698,   637,  1118,    -1,  1118,    -1,    -1,   700,    -1,
     700,   637,   702,    -1,   702,    -1,    -1,  1413,   701,   949,
      -1,    -1,   704,    -1,   704,   637,   705,    -1,   705,    -1,
     706,   701,  1413,   949,    -1,    -1,   241,    -1,   383,    -1,
     232,    -1,    -1,   707,   743,   641,    -1,   743,   641,    -1,
     708,   743,   641,    -1,    -1,   709,   710,   641,    -1,    -1,
     119,   740,   711,   949,   741,    -1,   119,  1413,    81,   186,
     717,    -1,    -1,   119,   714,   205,   186,   712,   715,   743,
      -1,    -1,   119,  1413,   100,   186,   713,  1096,    -1,   167,
      -1,    90,    -1,   716,    -1,   715,   637,   716,    -1,   720,
      -1,  1234,    -1,   718,    -1,   502,   719,  1411,    -1,    -1,
     598,    -1,   717,    -1,  1413,    -1,   503,    -1,  1124,   188,
      -1,   501,    -1,   488,   722,   724,    -1,  1413,    -1,   718,
      -1,    -1,   722,    -1,    -1,   481,   725,    -1,   727,   155,
     726,    -1,   725,   637,   727,   155,   726,    -1,  1396,    -1,
    1144,    -1,  1402,    -1,    63,    -1,   529,    -1,    85,    -1,
      87,    -1,    86,    -1,    54,    -1,   469,    -1,   546,    -1,
      73,    -1,   101,    -1,   323,    -1,   340,    -1,   448,   723,
     724,    -1,   198,   730,   130,   731,    -1,    -1,    98,    -1,
     732,    -1,    81,   736,   737,    -1,   733,    -1,   732,   637,
     733,    -1,   734,   155,   735,    -1,  1413,    -1,   642,  1415,
      -1,   362,    -1,   465,    -1,   726,    -1,   738,    -1,   737,
     637,   738,    -1,   734,   155,   739,    -1,    63,    -1,   529,
      -1,    85,    -1,    87,    -1,    86,    -1,    54,    -1,   469,
      -1,   546,    -1,    73,    -1,   101,    -1,   323,    -1,   340,
      -1,   453,    -1,  1413,    -1,   740,   637,  1413,    -1,    -1,
      -1,   120,   742,  1118,    -1,   746,    -1,   748,    -1,   744,
      -1,   765,    -1,   783,    -1,   785,    -1,   780,    -1,   750,
      -1,   752,    -1,   753,    -1,   754,    -1,   755,    -1,   757,
      -1,    -1,   220,   745,   760,   149,   220,    -1,    -1,   747,
     650,    -1,    -1,   455,   749,  1118,    -1,    -1,   751,   789,
      -1,   260,  1414,    -1,   249,  1414,    -1,   370,  1413,    -1,
      -1,   177,   758,  1413,   238,   756,   759,    -1,    65,  1413,
      -1,    -1,   351,   189,    -1,   189,    -1,  1413,    -1,   759,
     637,  1413,    -1,    -1,    -1,    -1,   761,  1118,   762,   553,
     708,   763,   764,    -1,    -1,   146,   760,    -1,   145,   708,
      -1,   766,    -1,   769,    -1,    -1,    -1,    52,   767,  1118,
     768,   771,   779,   149,    52,    -1,    -1,    52,   770,   772,
     779,   149,    52,    -1,   773,    -1,   771,   773,    -1,   776,
      -1,   772,   776,    -1,    -1,    -1,   610,   774,  1118,   775,
     553,   708,    -1,    -1,    -1,   610,   777,  1118,   778,   553,
     708,    -1,    -1,   145,   708,    -1,    -1,  1414,   644,   781,
     789,   782,    -1,    -1,  1414,    -1,    -1,  1414,   644,   784,
     787,   782,    -1,    -1,   786,   787,    -1,    -1,    30,   788,
     709,   707,   149,    -1,   282,   708,   149,   282,    -1,    -1,
      -1,   612,   790,  1118,   791,   138,   708,   149,   612,    -1,
      -1,    -1,   443,   708,   586,   792,  1118,   793,   149,   443,
      -1,    29,    -1,     8,    -1,   234,    -1,   587,    -1,   125,
      -1,   823,   825,    -1,   823,    56,   820,   804,    -1,   823,
       6,   820,   799,   808,    -1,    -1,   592,   276,   202,  1413,
      -1,   823,     6,   820,   811,    -1,   823,   139,   820,   811,
      -1,   824,   803,   814,    -1,   824,   803,   817,    -1,     6,
     821,    -1,     6,   822,    -1,    -1,   805,   806,    -1,   807,
      -1,   806,   807,    -1,   806,   637,   807,    -1,   826,    -1,
     827,    -1,   828,    -1,    -1,   809,    -1,   810,    -1,   809,
     810,    -1,   809,   637,   810,    -1,   826,    -1,   827,    -1,
     828,    -1,   829,    -1,   832,    -1,   834,    -1,   835,    -1,
     833,    -1,    -1,   812,    -1,   813,    -1,   812,   813,    -1,
     812,   637,   813,    -1,   826,    -1,   827,    -1,   828,    -1,
     834,    -1,   835,    -1,    -1,   815,    -1,   816,    -1,   815,
     816,    -1,   815,   637,   816,    -1,   826,    -1,   830,    -1,
     831,    -1,   832,    -1,   834,    -1,   835,    -1,   833,    -1,
      -1,   818,    -1,   819,    -1,   818,   819,    -1,   818,   637,
     819,    -1,   826,    -1,   834,    -1,   835,    -1,   105,  1410,
      -1,   576,  1410,    -1,   426,  1410,    -1,  1413,    -1,  1413,
      -1,   420,    -1,   422,    -1,   355,     4,    -1,   230,  1290,
     836,    -1,    24,  1290,   836,    -1,   312,  1290,   836,    -1,
     172,  1290,   836,    -1,   577,  1290,   836,    -1,   427,  1290,
     836,    -1,   352,  1290,  1235,    -1,    74,  1290,  1410,    -1,
    1332,   153,  1290,   910,    -1,   606,    -1,   358,    -1,  1235,
      -1,   217,    -1,   635,   838,    -1,   903,   843,   840,    -1,
     265,  1406,    -1,   635,   265,  1406,   636,    -1,   916,   636,
     903,   843,   840,    -1,    -1,   843,   892,   636,   839,  1512,
      -1,    -1,    -1,  1376,   895,   892,   841,  1509,    -1,    -1,
    1376,   895,   635,   892,   636,   842,  1512,    -1,   844,    -1,
      -1,   845,    -1,    -1,   390,   847,   846,   850,    -1,    -1,
      -1,   390,   849,   850,    -1,    46,   851,   860,   861,   868,
      -1,   853,   253,   635,   854,   636,    -1,    -1,   853,   206,
     852,   858,    -1,   418,   858,    -1,   418,   857,    -1,   270,
     858,    -1,   270,   857,    -1,    -1,   267,    -1,    -1,   855,
      -1,   856,    -1,   855,   637,   856,    -1,  1413,    -1,    70,
     635,   854,   636,    -1,   635,  1113,   866,  1114,   636,    -1,
     635,  1113,   866,  1114,   636,    -1,    -1,   391,  1235,    -1,
      -1,    -1,   533,    46,   853,   206,   859,   862,   867,    -1,
      -1,   533,    46,   853,   253,   635,   864,   636,   863,   867,
      -1,   865,    -1,   864,   637,   865,    -1,  1413,    -1,  1121,
      -1,    -1,   532,  1235,    -1,    -1,   635,   869,   636,    -1,
     870,    -1,   869,   637,   870,    -1,    -1,   390,   871,   872,
     873,   889,   884,    -1,  1413,    -1,    -1,    -1,   597,   262,
     552,   874,   876,    -1,    -1,   597,   241,   875,   877,    -1,
     316,    -1,   879,    -1,   879,    -1,   635,   878,   636,    -1,
     879,    -1,   878,   637,   879,    -1,    -1,    -1,   635,   880,
     882,   881,   636,    -1,   883,    -1,   882,   637,   883,    -1,
     316,    -1,  1121,    -1,    -1,   635,   885,   636,    -1,   886,
      -1,   885,   637,   886,    -1,    -1,   533,   887,   888,   889,
      -1,  1415,    -1,    -1,   890,    -1,   890,   891,    -1,   891,
      -1,   542,  1290,  1415,    -1,  1332,   153,  1290,   910,    -1,
     352,  1290,  1235,    -1,   311,  1290,  1237,    -1,   329,  1290,
    1237,    -1,   106,   131,  1290,  1410,    -1,   228,   131,  1290,
    1410,    -1,    74,  1290,  1410,    -1,    -1,    -1,   473,   893,
    1107,  1111,   894,   914,    -1,    -1,    19,    -1,    -1,   897,
      -1,   898,    -1,   897,   898,    -1,   909,    -1,   908,    -1,
      -1,   900,    -1,   901,    -1,   901,   900,    -1,   547,    -1,
      -1,   220,  1124,   166,    -1,    -1,   905,    -1,   906,    -1,
     906,   904,    -1,   906,    -1,   906,   905,    -1,   906,   637,
     905,    -1,   153,  1290,   910,    -1,   311,  1290,  1236,    -1,
     329,  1290,  1236,    -1,    26,  1290,  1234,    -1,   393,  1290,
    1410,    -1,    74,  1290,  1410,    -1,    25,  1290,  1236,    -1,
     385,  1290,  1234,    -1,   385,  1290,   120,    -1,   519,  1290,
    1234,    -1,   519,  1290,   120,    -1,   520,  1290,  1234,    -1,
     520,  1290,   120,    -1,   521,  1290,  1234,    -1,   521,  1290,
     120,    -1,    60,  1290,  1234,    -1,   545,  1290,  1234,    -1,
     124,  1290,  1234,    -1,   463,  1290,   912,    -1,    -1,   581,
    1290,   907,   635,  1354,   636,    -1,   908,    -1,   909,    -1,
     235,  1290,   913,    -1,   106,   131,  1290,  1410,    -1,   228,
     131,  1290,  1410,    -1,   542,  1413,    -1,   526,   134,    -1,
     526,   321,    -1,    82,  1290,  1410,    -1,   252,  1290,  1234,
      -1,   961,   952,  1290,   954,    -1,   961,    68,  1290,   960,
      -1,  1415,    -1,  1415,    -1,   120,    -1,   180,    -1,   143,
      -1,    79,    -1,   428,    -1,    77,    -1,   357,    -1,   179,
      -1,   256,    -1,  1229,    -1,  1106,  1110,    -1,   528,    -1,
     423,    -1,   118,    -1,   239,    -1,   917,    -1,   918,    -1,
     917,   637,   918,    -1,   919,    -1,   920,    -1,   925,   921,
      -1,   925,   978,    -1,   984,  1004,   992,   635,  1002,   636,
     993,    -1,   990,   987,  1004,   991,   635,  1002,   636,   994,
      -1,   923,   985,  1004,   992,   635,  1002,   636,   993,    -1,
     923,   185,   253,  1004,   635,  1002,   636,   978,    -1,   923,
     922,    -1,    -1,   922,    -1,    61,   635,  1118,   636,    -1,
      -1,   924,    -1,    84,  1004,    -1,    -1,  1405,   926,   927,
     946,    -1,   934,   944,   940,    -1,   935,   945,   940,    -1,
     182,   936,   940,    -1,    38,    -1,    38,   943,    -1,    43,
      -1,    42,    -1,   930,   943,   964,    -1,   930,   964,    -1,
     931,   943,   965,    -1,   931,   965,    -1,    33,   943,    -1,
      33,    -1,   932,   943,   964,    -1,   933,   943,   965,    -1,
     599,   943,    -1,   624,   944,   940,    -1,   110,    -1,   557,
     938,    -1,   554,   938,    -1,   107,   938,    -1,   558,    -1,
      40,   944,    -1,   317,    -1,   278,    -1,   281,   599,    -1,
     281,   932,   964,    -1,   560,   964,    -1,   551,   944,   964,
      -1,   319,   964,    -1,   279,   964,    -1,   118,   936,   940,
      -1,   363,   936,   940,    -1,   180,   936,   940,    -1,    -1,
     154,   928,   635,  1006,   636,   964,    -1,    -1,   481,   929,
     635,  1006,   636,   964,    -1,   281,   964,    -1,   477,    -1,
      59,    -1,   346,    -1,   343,    59,    -1,   930,   603,    -1,
     600,    -1,   343,   600,    -1,   364,    -1,   346,   600,    -1,
     343,    59,   603,    -1,   346,   603,    -1,   239,    -1,   559,
      -1,   493,    -1,   318,    -1,    32,    -1,   423,    -1,   137,
      -1,   137,   402,    -1,    -1,   943,    -1,   937,    -1,   635,
     361,   637,   361,   636,    -1,    -1,   635,   361,   636,    -1,
      -1,   635,   636,    -1,   635,   361,   636,    -1,    -1,   941,
      -1,   941,   942,    -1,   942,    -1,   489,    -1,   585,    -1,
     625,    -1,   635,   280,   636,    -1,   635,   572,   636,    -1,
     635,   117,   636,    -1,   635,   361,   636,    -1,    -1,   943,
      -1,    -1,   937,    -1,    -1,   947,    -1,   947,   948,    -1,
     948,    -1,   360,    -1,  1124,   360,    -1,   120,   951,    -1,
     367,   587,   950,    -1,    25,    -1,   477,   120,   598,    -1,
     977,   253,    -1,   582,    -1,   582,   253,    -1,    74,  1410,
      -1,    68,   958,    -1,    72,   120,    -1,    72,   180,    -1,
      72,   143,    -1,   526,   120,    -1,   526,   134,    -1,   526,
     321,    -1,   927,   959,    -1,   356,   939,    -1,   950,    -1,
    1395,    -1,    59,   481,    -1,    58,    -1,  1415,    -1,    33,
      -1,   953,    -1,   120,    -1,    -1,   952,   954,    -1,  1415,
      -1,    33,    -1,   956,    -1,   120,    -1,  1415,    -1,    -1,
      68,   960,    -1,   958,    -1,   120,    -1,    -1,   120,    -1,
      21,    -1,    33,    21,    -1,    21,    33,    -1,   579,    -1,
     579,    33,    -1,    33,   579,    -1,    -1,   962,    -1,   963,
      -1,    47,    -1,   952,   953,   965,    -1,    33,    -1,    33,
     952,   953,    -1,    -1,    33,    -1,    -1,   635,  1235,   967,
     636,    -1,    20,    -1,   126,    -1,   456,    -1,    -1,   968,
      -1,   968,   969,    -1,   969,    -1,  1235,    -1,   971,   970,
      -1,   972,    -1,   973,   637,   972,    -1,   971,   628,   971,
      -1,   973,    -1,   974,    -1,    -1,   263,   975,    -1,    -1,
     406,    -1,   429,  1406,   979,   981,   982,    -1,    -1,   635,
     980,   636,    -1,   980,   637,  1413,    -1,  1413,    -1,    -1,
     308,   190,    -1,   308,   389,    -1,   308,   490,    -1,    -1,
     367,   587,   983,    -1,   367,   125,   983,    -1,   367,   587,
     983,   367,   125,   983,    -1,   367,   125,   983,   367,   587,
     983,    -1,   451,    -1,    50,    -1,   481,   360,    -1,   357,
       5,    -1,   481,   120,    -1,   986,    -1,   406,   253,    -1,
     582,   987,    -1,   253,    -1,   228,    -1,    -1,   986,    -1,
     251,    -1,   228,    -1,   227,    -1,    -1,   582,    -1,   191,
      -1,    -1,   991,    -1,   991,   997,    -1,    -1,   995,    -1,
      -1,   996,    -1,   999,    -1,   995,   999,    -1,  1000,    -1,
     996,  1000,    -1,   593,  1001,    -1,   570,  1001,    -1,   252,
    1290,  1234,    -1,    74,  1410,    -1,   998,    -1,   997,    -1,
     998,    -1,   613,   388,  1409,    -1,    45,    -1,   466,    -1,
     206,    -1,  1002,   637,  1003,  1227,    -1,  1003,  1227,    -1,
    1413,    -1,  1413,   635,   361,   636,    -1,    -1,  1405,    -1,
      -1,   643,  1413,    -1,  1393,    -1,  1006,   637,  1393,    -1,
      -1,    13,  1045,   544,  1406,  1008,  1020,    -1,    -1,    13,
     103,  1019,  1009,   897,    -1,    13,   103,  1413,   588,   106,
     131,   342,    -1,    -1,    13,   408,   688,  1010,   689,    -1,
      -1,    13,   192,   688,  1011,   689,    -1,    -1,    13,  1535,
    1530,  1012,  1537,    -1,    -1,    13,  1530,  1013,  1537,    -1,
      -1,    13,  1530,   162,   688,  1014,  1016,  1017,   678,   683,
    1018,    -1,    13,   542,   800,    -1,    13,   276,   202,   802,
      -1,    13,   542,   797,    -1,    13,   542,   796,    -1,    13,
     479,  1415,   372,   635,   672,   636,    -1,    13,   590,   687,
    1015,    -1,  1416,   393,   169,    -1,  1015,   637,  1416,   393,
     169,    -1,    -1,   367,   468,   676,    -1,   682,    -1,   367,
     468,   676,   682,    -1,    -1,   439,   561,   688,    -1,    -1,
     138,   684,    -1,    -1,  1413,    -1,    -1,   133,   542,    -1,
     223,   542,    -1,  1035,   844,    -1,  1035,  1024,    -1,  1024,
      -1,   845,    -1,  1026,    -1,   139,   390,  1033,    -1,   424,
     390,  1071,  1025,    -1,    -1,   371,   390,  1071,  1025,  1021,
    1071,    -1,    15,   390,  1071,  1025,    -1,    -1,    61,   390,
    1025,  1022,  1066,    -1,    -1,   441,   390,  1071,  1025,  1023,
    1058,    -1,    66,   390,  1071,  1235,    -1,   568,   390,  1025,
      -1,  1029,    -1,   164,   390,  1034,   613,   544,  1406,   847,
      -1,   438,   392,   847,    -1,    12,    -1,  1033,    -1,    -1,
       6,   390,  1071,  1027,  1028,    -1,    -1,   635,   869,   636,
      -1,   391,  1235,    -1,    -1,   440,   390,  1071,  1030,  1031,
      -1,    -1,    -1,  1033,  1032,   238,   635,   869,   636,    -1,
    1034,    -1,  1033,   637,  1034,    -1,  1413,    -1,  1037,    -1,
    1035,   637,  1037,    -1,     6,  1044,    -1,  1036,   919,  1047,
      -1,     6,   920,    -1,  1036,   635,   916,   636,    -1,    -1,
      56,  1044,  1405,  1038,   925,  1047,    -1,    -1,    -1,   333,
    1044,  1405,  1039,   927,   946,  1040,  1047,    -1,   139,  1044,
    1405,  1046,    -1,   139,   185,   253,  1405,    -1,   139,   406,
     253,    -1,   139,   986,  1405,    -1,   132,   251,    -1,   147,
     251,    -1,    13,  1044,  1405,   481,   120,  1395,    -1,    13,
    1044,  1405,   139,   120,    -1,   439,  1048,  1406,    -1,    91,
     561,   952,   954,   959,    -1,   904,    -1,   184,    -1,  1220,
      -1,  1042,    -1,  1043,    -1,    -1,  1043,    -1,  1042,    -1,
    1043,  1042,    -1,  1042,  1043,    -1,    11,  1290,   120,    -1,
      11,  1290,  1413,    -1,   275,  1290,   120,    -1,   275,  1290,
    1413,    -1,    -1,    71,    -1,    -1,   221,    -1,    -1,   451,
      -1,    50,    -1,    -1,     8,  1413,    -1,   179,    -1,    -1,
     561,    -1,   155,    -1,    19,    -1,   518,   563,  1050,    -1,
      -1,  1051,    -1,  1052,    -1,  1051,   637,  1052,    -1,   613,
      83,   494,    -1,   421,   369,    -1,   421,   618,    -1,    -1,
      60,  1450,  1054,  1260,  1055,    -1,    -1,   417,    -1,   171,
      -1,    -1,   441,  1071,  1450,  1057,  1260,  1058,    -1,    -1,
    1059,    -1,  1060,    -1,  1060,  1059,    -1,   417,    -1,   171,
      -1,   591,    -1,    -1,    15,  1071,  1450,  1062,  1260,    -1,
      34,  1410,    -1,    -1,    61,  1450,  1065,  1260,  1066,    -1,
      -1,  1067,    -1,  1068,    -1,  1068,  1067,    -1,   417,    -1,
     175,    -1,   320,    -1,   171,    -1,    57,    -1,   186,   588,
      -1,    -1,   371,  1071,  1450,  1070,  1260,    -1,    -1,   359,
      -1,   272,    -1,    -1,   439,  1450,  1073,  1075,    -1,   439,
     590,   687,  1074,    -1,  1416,   561,  1416,    -1,  1074,   637,
    1416,   561,  1416,    -1,  1076,    -1,  1075,   637,  1076,    -1,
    1406,   561,  1406,    -1,    -1,    48,   228,  1078,  1079,   241,
    1083,    -1,  1080,    -1,  1082,    -1,  1081,    -1,  1080,   637,
    1081,    -1,  1406,  1092,    -1,  1406,  1090,  1092,    -1,  1413,
      -1,    -1,   271,   228,   238,    48,  1085,  1086,    -1,  1089,
      -1,  1087,    -1,  1088,    -1,  1087,   637,  1088,    -1,  1406,
    1092,  1095,    -1,  1406,  1090,  1092,  1095,    -1,    -1,   390,
     847,  1091,   635,  1025,   636,    -1,    -1,  1093,  1094,    -1,
      -1,   986,   635,  1202,   636,    -1,    -1,   221,   259,    -1,
    1097,    -1,   473,  1100,    -1,   635,  1098,   636,  1512,    -1,
     473,  1102,    -1,   635,  1098,   636,    -1,   473,  1181,    -1,
     635,  1099,   636,    -1,    -1,  1102,  1101,  1509,    -1,    -1,
      -1,  1103,  1107,  1111,  1104,  1105,  1110,    -1,  1223,  1229,
      -1,  1248,    -1,  1106,    -1,  1248,  1106,    -1,  1106,  1248,
      -1,   189,  1161,  1212,  1217,  1214,  1223,  1229,  1240,    -1,
     189,   140,  1212,  1229,    -1,    -1,  1108,    -1,  1108,  1109,
      -1,  1109,    -1,  1526,    -1,   511,    -1,   509,    -1,    -1,
     186,   587,    -1,   275,   241,   483,   331,    -1,  1111,   637,
    1112,    -1,  1112,    -1,   630,    -1,  1113,  1400,  1114,    -1,
    1113,  1118,  1114,  1115,    -1,    -1,    -1,    -1,    19,  1413,
      -1,    19,  1410,    -1,  1413,    -1,  1410,    -1,    -1,   635,
     636,    -1,  1118,  1122,  1118,    -1,  1118,   622,  1118,    -1,
     355,  1118,    -1,  1119,   246,   567,    -1,  1119,   246,  1124,
     567,    -1,  1119,   246,   174,    -1,  1119,   246,  1124,   174,
      -1,  1119,   246,   583,    -1,  1119,   246,  1124,   583,    -1,
    1119,    -1,  1118,  1122,  1118,    -1,  1118,   622,  1118,    -1,
    1118,  1123,  1118,    -1,   355,  1118,    -1,  1119,   246,   567,
      -1,  1119,   246,  1124,   567,    -1,  1119,   246,   174,    -1,
    1119,   246,  1124,   174,    -1,  1119,   246,   583,    -1,  1119,
     246,  1124,   583,    -1,  1119,    -1,  1119,   246,   360,    -1,
    1119,   246,  1124,   360,    -1,  1119,   156,  1120,    -1,  1119,
    1126,  1120,    -1,  1119,  1126,  1127,   635,  1521,   636,    -1,
    1120,    -1,  1121,   241,   635,  1521,   636,    -1,  1121,  1124,
     241,   635,  1521,   636,    -1,  1121,   241,   635,  1118,   636,
      -1,  1121,   241,   635,  1118,   637,  1154,   636,    -1,  1121,
    1124,   241,   635,  1118,   636,    -1,  1121,  1124,   241,   635,
    1118,   637,  1154,   636,    -1,  1121,    31,  1121,    17,  1120,
      -1,  1121,  1124,    31,  1121,    17,  1120,    -1,  1121,   497,
     265,  1121,    -1,  1121,   265,  1128,  1216,    -1,  1121,  1124,
     265,  1128,  1216,    -1,  1121,   430,  1121,    -1,  1121,  1124,
     430,  1121,    -1,  1121,    -1,  1121,   626,  1121,    -1,  1121,
     627,  1121,    -1,  1121,   484,  1121,    -1,  1121,   485,  1121,
      -1,  1121,   629,  1121,    -1,  1121,   628,  1121,    -1,  1121,
     629,   237,  1118,  1206,    -1,  1121,   628,   237,  1118,  1206,
      -1,  1121,   630,  1121,    -1,  1121,   631,  1121,    -1,  1121,
     632,  1121,    -1,  1121,   136,  1121,    -1,  1121,   334,  1121,
      -1,  1121,   633,  1121,    -1,  1128,    -1,   378,    -1,   375,
      -1,    17,    -1,    16,    -1,   355,    -1,   354,    -1,   638,
      -1,   354,    -1,   155,    -1,   193,    -1,   204,    -1,   257,
      -1,   284,    -1,   348,    -1,    12,    -1,    18,    -1,  1402,
      -1,  1129,    -1,  1130,    -1,  1132,    -1,  1131,    -1,  1128,
      68,  1415,    -1,  1396,    -1,  1394,    -1,  1144,    -1,  1140,
      -1,  1128,   377,  1128,    -1,   629,  1128,    -1,   628,  1128,
      -1,   634,  1128,    -1,  1125,  1128,    -1,   635,  1521,   636,
      -1,   635,  1118,   636,    -1,   635,  1118,   637,  1154,   636,
      -1,   464,   635,  1118,   637,  1154,   636,    -1,   166,   635,
    1521,   636,    -1,   639,  1413,  1118,   640,    -1,   308,  1155,
       9,   635,  1121,  1134,   636,    -1,    33,  1128,    -1,    53,
     635,  1118,    19,  1152,   636,    -1,    52,  1157,  1159,  1158,
     149,    -1,    91,   635,  1118,   637,  1152,   636,    -1,    91,
     635,  1118,   593,   953,   636,    -1,   120,   635,  1402,   636,
      -1,   597,   635,  1403,   636,    -1,   237,  1118,  1206,   629,
    1118,    -1,    59,   635,  1154,   636,    -1,    59,   635,  1154,
     593,   953,   636,    -1,    99,  1116,    -1,   110,   635,  1118,
     636,    -1,   115,   635,  1118,   636,    -1,   216,   635,  1118,
     636,    -1,   234,   635,  1118,   637,  1118,   637,  1118,   637,
    1118,   636,    -1,   237,   635,  1118,   637,  1118,   636,    -1,
     237,   635,  1118,   637,  1118,   637,  1154,   636,    -1,   261,
     635,  1118,   637,  1118,   636,    -1,   328,   635,  1118,   636,
      -1,   335,   635,  1118,   636,    -1,   458,   635,  1118,   637,
    1118,   636,    -1,   471,   635,  1118,   636,    -1,   557,   635,
    1118,   636,    -1,   554,   635,  1118,   636,    -1,   554,   635,
    1118,   637,  1118,   636,    -1,   566,   635,  1118,   636,    -1,
     566,   635,   258,  1118,   189,  1118,   636,    -1,   566,   635,
     562,  1118,   189,  1118,   636,    -1,   566,   635,    44,  1118,
     189,  1118,   636,    -1,   566,   635,   258,   189,  1118,   636,
      -1,   566,   635,   562,   189,  1118,   636,    -1,   566,   635,
      44,   189,  1118,   636,    -1,   566,   635,  1118,   189,  1118,
     636,    -1,   590,   635,   636,    -1,   624,   635,  1118,   636,
      -1,     7,   635,  1118,   637,  1118,   636,    -1,     7,   635,
    1118,   637,   237,  1118,  1206,   636,    -1,    97,  1116,    -1,
     102,   939,    -1,   108,   635,  1118,   637,   237,  1118,  1206,
     636,    -1,   109,   635,  1118,   637,   237,  1118,  1206,   636,
      -1,   173,   635,  1206,   189,  1118,   636,    -1,   197,   635,
    1208,   637,  1118,   636,    -1,   950,    -1,   401,   635,  1121,
     241,  1118,   636,    -1,   530,   635,  1118,   637,  1118,   636,
      -1,   530,   635,  1118,   637,   237,  1118,  1206,   636,    -1,
     534,   635,  1118,   637,  1118,   637,  1118,   636,    -1,   534,
     635,  1118,   637,  1118,   636,    -1,   534,   635,  1118,   189,
    1118,   186,  1118,   636,    -1,   534,   635,  1118,   189,  1118,
     636,    -1,   540,   939,    -1,   555,   635,  1207,   637,  1118,
     637,  1118,   636,    -1,   556,   635,  1207,   637,  1118,   637,
    1118,   636,    -1,   594,  1116,    -1,   596,   939,    -1,   595,
     939,    -1,    21,   635,  1118,   636,    -1,    58,   635,  1118,
     636,    -1,    66,   635,  1154,   636,    -1,    69,   635,  1118,
     636,    -1,   103,   635,   636,    -1,   220,   635,  1118,   637,
    1118,   637,  1118,   636,    -1,   187,   635,  1118,   637,  1118,
     636,    -1,   187,   635,  1118,   637,  1118,   637,  1118,   636,
      -1,   324,   635,  1118,   636,    -1,   334,   635,  1118,   637,
    1118,   636,    -1,   366,   635,  1118,   636,    -1,   393,   635,
    1118,   636,    -1,   415,   635,  1118,   636,    -1,   443,   635,
    1118,   637,  1118,   636,    -1,   444,   635,  1118,   637,  1118,
     637,  1118,   636,    -1,   456,   635,  1118,   636,    -1,   465,
     635,   636,    -1,   568,   635,  1118,   637,  1118,   636,    -1,
     608,   635,  1118,   636,    -1,   608,   635,  1118,   637,  1118,
     636,    -1,   609,   635,  1118,   976,   636,    -1,   609,   635,
    1118,    19,    59,   966,   976,   636,    -1,   609,   635,  1118,
      19,    33,   966,   636,    -1,   609,   635,  1118,   637,  1234,
     637,  1234,   637,  1234,   636,    -1,    -1,  1409,   635,  1133,
    1137,   636,    -1,  1413,   643,  1413,   635,  1153,   636,    -1,
    1135,  1136,    -1,   241,    42,   331,    -1,    -1,   241,   344,
     255,   331,    -1,    -1,   613,   416,   168,    -1,    -1,  1138,
      -1,  1139,    -1,  1138,   637,  1139,    -1,  1113,  1118,  1114,
    1115,    -1,    27,   635,  1150,   636,    -1,    27,   635,   135,
    1150,   636,    -1,    36,   635,  1150,   636,    -1,    37,   635,
    1150,   636,    -1,    39,   635,  1150,   636,    -1,    92,   635,
    1211,   630,   636,    -1,    92,   635,  1150,   636,    -1,    -1,
      -1,    92,   635,   135,  1141,  1154,  1142,   636,    -1,   330,
     635,  1150,   636,    -1,   330,   635,   135,  1150,   636,    -1,
     313,   635,  1150,   636,    -1,   313,   635,   135,  1150,   636,
      -1,   524,   635,  1150,   636,    -1,   602,   635,  1150,   636,
      -1,   523,   635,  1150,   636,    -1,   604,   635,  1150,   636,
      -1,   535,   635,  1150,   636,    -1,   535,   635,   135,  1150,
     636,    -1,    -1,   203,   635,  1147,  1143,  1154,  1149,  1148,
     636,    -1,    -1,   642,  1145,  1146,    -1,  1415,   482,  1118,
      -1,  1415,    -1,   642,  1436,  1415,  1005,    -1,    -1,   135,
      -1,    -1,   475,  1393,    -1,    -1,  1224,    -1,    -1,  1211,
    1151,  1118,    -1,    33,   944,    -1,    59,   944,   964,    -1,
     346,   944,    -1,   489,    -1,   489,   239,    -1,   585,    -1,
     585,   239,    -1,   110,    -1,   557,   938,    -1,   107,   938,
      -1,   118,   936,    -1,    -1,  1154,    -1,  1118,    -1,  1154,
     637,  1118,    -1,  1156,    -1,   635,  1156,   636,    -1,  1402,
      -1,  1156,   637,  1402,    -1,    -1,  1118,    -1,    -1,   145,
    1118,    -1,   610,  1118,   553,  1118,    -1,  1159,   610,  1118,
     553,  1118,    -1,  1175,    -1,  1164,    -1,  1163,    -1,  1160,
      -1,   639,  1413,  1160,   640,    -1,  1162,    -1,  1163,   637,
    1162,    -1,  1160,  1172,  1160,    -1,  1160,   527,  1175,    -1,
      -1,  1160,  1172,  1160,   367,  1165,  1118,    -1,    -1,  1160,
     527,  1175,   367,  1166,  1118,    -1,    -1,  1160,  1172,  1160,
     593,  1167,   635,  1205,   636,    -1,  1160,   344,   250,  1175,
      -1,    -1,  1160,   261,  1191,   250,  1160,   367,  1168,  1118,
      -1,    -1,  1160,   261,  1191,   250,  1175,  1169,   593,   635,
    1205,   636,    -1,  1160,   344,   261,  1191,   250,  1175,    -1,
      -1,  1160,   458,  1191,   250,  1160,   367,  1170,  1118,    -1,
      -1,  1160,   458,  1191,   250,  1175,  1171,   593,   635,  1205,
     636,    -1,  1160,   344,   458,  1191,   250,  1175,    -1,   250,
      -1,   231,   250,    -1,    95,   250,    -1,    -1,  1174,    -1,
     390,   635,  1205,   636,   847,    -1,    -1,  1176,  1406,  1173,
    1210,  1200,    -1,  1190,  1189,  1186,    -1,   635,  1189,  1177,
     636,  1210,    -1,  1184,  1513,    -1,    -1,    -1,  1177,   581,
    1517,  1178,  1518,  1179,  1513,    -1,  1181,    -1,    -1,    -1,
    1182,  1524,  1111,  1183,   914,  1110,    -1,    -1,  1189,  1185,
    1163,    -1,    -1,    -1,  1187,  1107,  1111,  1188,   914,    -1,
      -1,   473,    -1,    -1,   381,    -1,    -1,   186,   250,    -1,
     186,   376,    46,    -1,   186,   202,    46,    -1,   184,    -1,
     221,    -1,    -1,  1193,   986,  1192,  1195,   635,  1204,   636,
      -1,    -1,   592,   986,  1192,  1196,   635,  1202,   636,    -1,
    1194,    -1,  1197,  1194,    -1,    -1,    -1,  1199,  1197,    -1,
      -1,  1201,  1198,    -1,    -1,  1204,    -1,  1413,    -1,   406,
      -1,  1203,    -1,  1204,   637,  1203,    -1,  1413,    -1,  1205,
     637,  1413,    -1,  1207,    -1,   111,    -1,   112,    -1,   113,
      -1,   114,    -1,   213,    -1,   214,    -1,   215,    -1,   326,
      -1,   327,    -1,   470,    -1,   623,    -1,   115,    -1,   608,
      -1,   216,    -1,   328,    -1,   335,    -1,   415,    -1,   471,
      -1,   324,    -1,   624,    -1,   110,    -1,   557,    -1,   554,
      -1,   107,    -1,    -1,    19,    -1,   155,    -1,    -1,  1209,
    1413,    -1,    -1,    12,    -1,    -1,    -1,   611,  1213,  1118,
      -1,    -1,    -1,   207,  1215,  1118,    -1,   160,  1128,    -1,
      -1,    -1,   202,    46,  1218,  1219,    -1,  1218,   637,  1401,
    1227,    -1,  1401,  1227,    -1,    -1,   614,    -1,   615,    -1,
     376,    46,  1221,    -1,  1221,   637,  1222,    -1,  1222,    -1,
    1403,  1227,    -1,    -1,  1224,    -1,    -1,   376,    46,  1225,
    1226,    -1,  1226,   637,  1401,  1227,    -1,  1401,  1227,    -1,
      -1,    20,    -1,   126,    -1,    -1,  1230,    -1,    -1,  1230,
      -1,   266,  1231,    -1,  1232,    -1,  1232,   637,  1232,    -1,
    1232,   365,  1232,    -1,  1413,    -1,  1394,    -1,   572,    -1,
     280,    -1,   361,    -1,    -1,   266,  1232,    -1,   361,    -1,
     209,    -1,   280,    -1,   572,    -1,   117,    -1,   181,    -1,
     361,    -1,   209,    -1,   280,    -1,   572,    -1,  1238,    -1,
     361,    -1,   572,    -1,   280,    -1,   117,    -1,   181,    -1,
     361,    -1,   572,    -1,   280,    -1,  1238,    -1,  1239,    -1,
     117,    -1,   181,    -1,    -1,    -1,   408,    14,  1241,   635,
    1242,   636,    -1,    -1,  1243,    -1,  1243,   637,  1243,    -1,
     361,    -1,    -1,  1245,  1246,    -1,  1246,   637,  1247,    -1,
    1247,    -1,   642,  1415,    -1,  1415,    -1,    -1,   238,  1249,
    1250,    -1,    -1,    -1,   382,  1412,  1251,   955,  1252,  1377,
    1380,    -1,   141,  1412,    -1,  1244,    -1,    -1,   138,  1254,
    1154,    -1,    -1,   139,  1266,  1450,  1265,  1256,  1260,  1046,
      -1,    -1,    -1,   139,   228,  1413,   367,  1406,  1257,  1258,
    1041,    -1,   139,   103,  1265,  1413,    -1,   139,   192,  1265,
    1413,   643,  1413,    -1,   139,   192,  1265,  1413,    -1,   139,
     408,  1265,   688,    -1,   139,   590,   687,  1480,    -1,    -1,
     139,   605,  1265,  1259,  1260,  1046,    -1,   139,   162,  1265,
     688,    -1,   139,   565,  1265,   688,    -1,   139,   542,   823,
    1267,    -1,   139,   276,   202,   824,  1267,    -1,   139,   479,
    1265,  1415,    -1,  1261,    -1,  1260,   637,  1261,    -1,  1406,
      -1,  1406,  1173,    -1,  1264,    -1,  1263,   637,  1264,    -1,
    1407,    -1,    -1,   220,   166,    -1,    -1,   547,    -1,    -1,
    1268,    -1,  1269,    -1,  1268,  1269,    -1,  1267,   637,  1269,
      -1,   834,    -1,   835,    -1,    -1,    -1,   234,  1271,  1276,
    1045,  1278,  1272,  1280,  1297,    -1,    -1,    -1,   444,  1274,
    1277,  1278,  1275,  1280,    -1,    -1,   283,    -1,   123,    -1,
     210,    -1,  1306,    -1,   123,    -1,   238,  1279,    -1,  1279,
      -1,  1262,    -1,  1283,    -1,   635,   636,  1283,    -1,   635,
    1282,   636,  1283,    -1,    -1,   481,  1281,  1287,    -1,  1282,
     637,  1399,    -1,  1399,    -1,   597,  1286,    -1,   598,  1286,
      -1,    -1,   892,  1284,  1509,    -1,    -1,   635,   892,   636,
    1285,  1512,    -1,  1286,   637,  1291,    -1,  1291,    -1,  1287,
     637,  1288,    -1,  1288,    -1,  1403,  1289,  1295,    -1,   155,
      -1,   482,    -1,    -1,  1289,    -1,    -1,   635,  1292,  1293,
     636,    -1,    -1,  1294,    -1,  1294,   637,  1295,    -1,  1295,
      -1,  1118,    -1,   120,    -1,  1117,    -1,   120,    -1,    -1,
      -1,   367,   142,  1298,   253,   587,  1304,    -1,    -1,    -1,
     587,  1300,  1306,  1045,  1161,   481,  1302,  1301,  1212,  1223,
    1233,    -1,  1302,   637,  1303,    -1,  1303,    -1,  1403,  1289,
    1296,    -1,  1304,   637,  1305,    -1,  1305,    -1,  1403,  1289,
    1295,    -1,    -1,   283,    -1,    -1,   125,  1308,  1316,  1309,
      -1,    -1,   189,  1406,  1173,  1310,  1212,  1223,  1233,    -1,
      -1,  1313,  1311,   189,  1161,  1212,    -1,    -1,   189,  1263,
    1312,   593,  1161,  1212,    -1,  1314,    -1,  1313,   637,  1314,
      -1,  1413,  1315,    -1,  1413,   643,  1413,  1315,    -1,    -1,
     643,   630,    -1,    -1,  1317,  1316,    -1,   417,    -1,   283,
      -1,   221,    -1,    -1,   568,  1320,  1319,  1261,    -1,    -1,
     544,    -1,    -1,  1322,    -1,  1323,    -1,  1322,   637,  1323,
      -1,    93,    -1,   321,    -1,    41,   244,    -1,    89,   539,
      -1,   386,   176,    -1,   245,    -1,   538,    -1,   498,    -1,
      12,    -1,    -1,   186,   416,   361,    -1,    -1,   486,  1326,
    1327,    -1,   104,  1338,    -1,  1334,   541,  1333,  1338,    -1,
    1334,   564,  1333,  1338,    -1,   161,  1333,  1338,    -1,   544,
     522,  1333,  1338,    -1,   370,   541,  1333,  1338,    -1,   397,
      -1,   153,   911,  1330,    -1,   153,    12,  1330,    -1,  1334,
      70,  1335,  1406,  1333,  1338,    -1,  1331,   277,    -1,   491,
     212,    -1,    -1,    34,   161,  1336,  1337,  1328,  1228,    -1,
      -1,   432,   161,  1336,  1337,  1329,  1228,    -1,   988,  1335,
    1406,  1333,  1212,    -1,  1332,   152,    -1,   407,    -1,    92,
     635,   630,   636,   607,    -1,    92,   635,   630,   636,   158,
      -1,   607,  1228,    -1,   158,  1228,    -1,   412,    -1,   411,
    1321,  1324,  1228,    -1,  1435,   522,  1338,    -1,  1334,   410,
      -1,  1435,   601,  1338,    -1,   952,  1338,    -1,    69,  1338,
      -1,   201,    -1,   201,   186,  1416,    -1,    94,   103,   902,
    1413,    -1,    94,   544,  1406,    -1,    94,   605,  1406,    -1,
     305,   522,    -1,   491,   522,    -1,    94,   408,   688,    -1,
      94,   192,   688,    -1,    94,   565,   688,    -1,   408,   522,
    1338,    -1,   192,   522,  1338,    -1,   408,    67,   688,    -1,
     192,    67,   688,    -1,    94,   162,   688,    -1,   522,    -1,
     339,    -1,   277,    -1,   305,    -1,    33,    -1,    -1,   526,
      -1,    -1,  1335,  1413,    -1,    -1,   190,    -1,   189,    -1,
     241,    -1,    -1,   241,  1410,    -1,    -1,   189,  1236,    -1,
      -1,   265,  1410,    -1,   611,  1118,    -1,    -1,  1343,  1406,
    1340,  1344,    -1,    -1,  1343,  1341,  1342,    -1,  1096,    -1,
    1270,    -1,  1273,    -1,  1299,    -1,  1307,    -1,   126,    -1,
     127,    -1,    -1,  1393,    -1,  1413,    -1,    -1,   183,  1071,
    1346,  1347,    -1,    -1,    -1,  1450,  1348,  1354,  1349,  1350,
      -1,  1352,    -1,    -1,   613,   421,   275,    -1,    -1,   186,
    1351,   170,    -1,  1352,   637,  1353,    -1,  1353,    -1,   157,
     277,    -1,   153,   277,    -1,   194,   277,    -1,   492,   277,
      -1,    33,   277,    -1,   431,   277,    -1,   416,    48,    -1,
     212,    -1,   407,    -1,   277,    -1,   522,    -1,   128,    -1,
     449,    -1,    -1,  1260,    -1,    -1,   447,  1356,  1357,    -1,
    1357,   637,  1358,    -1,  1358,    -1,    -1,   491,  1359,  1360,
      -1,   305,    -1,   416,    48,    -1,    -1,    12,    -1,    -1,
     414,  1362,  1363,    -1,  1331,   277,  1364,    -1,   561,  1410,
      -1,    29,  1118,    -1,   254,  1366,  1118,    -1,    -1,    82,
      -1,   416,    -1,   592,  1413,    -1,    -1,    -1,    -1,    -1,
     271,  1373,  1369,  1375,  1374,   229,  1412,  1370,  1376,   238,
     544,  1406,  1173,  1371,   955,  1372,  1383,  1377,  1380,  1384,
    1386,  1389,    -1,   106,    -1,   621,    -1,    -1,   272,    -1,
      -1,    80,    -1,   283,    -1,    -1,   444,    -1,   221,    -1,
      -1,    70,  1378,    -1,  1378,  1379,    -1,  1379,    -1,   549,
      46,  1393,    -1,   374,   148,    46,  1393,    -1,   148,    46,
    1393,    -1,   159,    46,  1393,    -1,    -1,   268,  1381,    -1,
    1381,  1382,    -1,  1382,    -1,   549,    46,  1393,    -1,   516,
      46,  1393,    -1,    -1,   462,   218,    46,  1393,    -1,    -1,
     221,   361,  1385,    -1,   268,    -1,   462,    -1,    -1,   635,
    1387,   636,    -1,   635,   636,    -1,  1387,   637,  1388,    -1,
    1388,    -1,  1403,    -1,   642,  1415,    -1,    -1,   481,  1390,
      -1,  1390,   637,  1391,    -1,  1391,    -1,  1403,  1289,  1113,
    1295,  1114,    -1,   550,    -1,   345,    -1,   575,   550,    -1,
    1392,  1411,    -1,  1411,    -1,   209,    -1,    35,    -1,   387,
      -1,  1396,    -1,   629,  1397,    -1,   628,  1397,    -1,  1392,
      -1,  1397,    -1,  1398,    -1,   360,    -1,   174,    -1,   567,
      -1,   209,    -1,    35,    -1,   575,   209,    -1,   575,    35,
      -1,   361,    -1,   280,    -1,   572,    -1,   117,    -1,   181,
      -1,   110,   550,    -1,   557,   550,    -1,   554,   550,    -1,
    1403,    -1,  1400,    -1,  1413,   643,   630,    -1,  1413,   643,
    1413,   643,   630,    -1,  1118,    -1,  1413,    -1,  1404,    -1,
    1413,    -1,  1404,    -1,  1413,   643,  1413,    -1,   643,  1413,
     643,  1413,    -1,  1413,   643,  1413,   643,  1413,    -1,  1413,
      -1,  1413,   643,  1413,   643,  1413,    -1,  1413,   643,  1413,
      -1,   643,  1413,    -1,  1413,    -1,  1413,   643,  1413,    -1,
     643,  1413,    -1,  1413,  1315,    -1,  1413,   643,  1413,  1315,
      -1,  1413,    -1,   217,    -1,   219,    -1,   550,    -1,   550,
      -1,   550,    -1,  1409,    -1,  1417,    -1,  1409,    -1,  1418,
      -1,  1413,    -1,  1410,    -1,   264,    -1,  1415,    -1,  1415,
     642,  1415,    -1,    99,  1116,    -1,  1418,    -1,    21,    -1,
      28,    -1,    30,    -1,    47,    -1,    48,    -1,    58,    -1,
      60,    -1,    65,    -1,    74,    -1,    76,    -1,    88,    -1,
     116,    -1,   138,    -1,   149,    -1,   165,    -1,   183,    -1,
     187,    -1,   205,    -1,   208,    -1,   211,    -1,   236,    -1,
     255,    -1,   357,    -1,   370,    -1,   372,    -1,   384,    -1,
     388,    -1,   400,    -1,   403,    -1,   438,    -1,   441,    -1,
     447,    -1,   450,    -1,   459,    -1,   467,    -1,   472,    -1,
     479,    -1,   489,    -1,   495,    -1,   491,    -1,   496,    -1,
     518,    -1,   525,    -1,   568,    -1,   579,    -1,   580,    -1,
     617,    -1,   620,    -1,   588,    -1,     5,    -1,     7,    -1,
       8,    -1,     9,    -1,    10,    -1,    11,    -1,    14,    -1,
      18,    -1,    23,    -1,    25,    -1,    24,    -1,    26,    -1,
      27,    -1,    34,    -1,    38,    -1,    41,    -1,    43,    -1,
      42,    -1,    45,    -1,    51,    -1,    54,    -1,    55,    -1,
      57,    -1,    62,    -1,    64,    -1,    63,    -1,    66,    -1,
      67,    -1,    69,    -1,    73,    -1,    72,    -1,    70,    -1,
      75,    -1,    77,    -1,    78,    -1,    79,    -1,    80,    -1,
      82,    -1,    83,    -1,    85,    -1,    87,    -1,    86,    -1,
      89,    -1,    93,    -1,    96,    -1,    98,    -1,   101,    -1,
     106,    -1,   105,    -1,   107,    -1,   110,    -1,   115,    -1,
     121,    -1,   122,    -1,   124,    -1,   128,    -1,   130,    -1,
     131,    -1,   132,    -1,   133,    -1,   134,    -1,   141,    -1,
     142,    -1,   143,    -1,   150,    -1,   154,    -1,   153,    -1,
     152,    -1,   157,    -1,   158,    -1,   160,    -1,   162,    -1,
     161,    -1,   163,    -1,   164,    -1,   168,    -1,   169,    -1,
     170,    -1,   171,    -1,   172,    -1,   176,    -1,   175,    -1,
     188,    -1,   147,    -1,   190,    -1,   178,    -1,   179,    -1,
     180,    -1,   194,    -1,   196,    -1,   195,    -1,   197,    -1,
     201,    -1,   199,    -1,   206,    -1,   212,    -1,   216,    -1,
     218,    -1,   222,    -1,   240,    -1,   223,    -1,   227,    -1,
     230,    -1,   244,    -1,   245,    -1,   247,    -1,   248,    -1,
     235,    -1,   252,    -1,   256,    -1,   259,    -1,   262,    -1,
     263,    -1,   269,    -1,   270,    -1,   272,    -1,   274,    -1,
     276,    -1,   277,    -1,   311,    -1,   305,    -1,   307,    -1,
     289,    -1,   293,    -1,   290,    -1,   291,    -1,   306,    -1,
     292,    -1,   295,    -1,   287,    -1,   294,    -1,   288,    -1,
     303,    -1,   297,    -1,   296,    -1,   298,    -1,   299,    -1,
     300,    -1,   301,    -1,   302,    -1,   285,    -1,   309,    -1,
     310,    -1,   312,    -1,   314,    -1,   315,    -1,   320,    -1,
     321,    -1,   322,    -1,   323,    -1,   324,    -1,   325,    -1,
     328,    -1,   329,    -1,   333,    -1,   331,    -1,   335,    -1,
     336,    -1,   337,    -1,   338,    -1,   339,    -1,   340,    -1,
     342,    -1,   341,    -1,   343,    -1,   346,    -1,   347,    -1,
     351,    -1,   350,    -1,   358,    -1,   352,    -1,   353,    -1,
     362,    -1,   364,    -1,   365,    -1,   366,    -1,   368,    -1,
     369,    -1,   385,    -1,   386,    -1,   389,    -1,   392,    -1,
     391,    -1,   393,    -1,   394,    -1,   395,    -1,   396,    -1,
     397,    -1,   398,    -1,   399,    -1,   404,    -1,   405,    -1,
     407,    -1,   409,    -1,   410,    -1,   411,    -1,   412,    -1,
     413,    -1,   415,    -1,   416,    -1,   417,    -1,   420,    -1,
     424,    -1,   425,    -1,   427,    -1,   426,    -1,   428,    -1,
     431,    -1,   432,    -1,   433,    -1,   434,    -1,   435,    -1,
     437,    -1,   440,    -1,   442,    -1,   445,    -1,   449,    -1,
     452,    -1,   453,    -1,   454,    -1,   456,    -1,   460,    -1,
     461,    -1,   462,    -1,   465,    -1,   463,    -1,   464,    -1,
     466,    -1,   468,    -1,   469,    -1,   471,    -1,   477,    -1,
     476,    -1,   478,    -1,   490,    -1,   483,    -1,   487,    -1,
     492,    -1,   494,    -1,   497,    -1,   498,    -1,   504,    -1,
     505,    -1,   506,    -1,   509,    -1,   508,    -1,   511,    -1,
     514,    -1,   517,    -1,   519,    -1,   520,    -1,   521,    -1,
     522,    -1,   526,    -1,   528,    -1,   529,    -1,   530,    -1,
     531,    -1,   533,    -1,   532,    -1,   536,    -1,   537,    -1,
     538,    -1,   539,    -1,   546,    -1,   541,    -1,   545,    -1,
     542,    -1,   547,    -1,   548,    -1,   551,    -1,   552,    -1,
     563,    -1,   564,    -1,   554,    -1,   555,    -1,   556,    -1,
     557,    -1,   569,    -1,   570,    -1,   571,    -1,   192,    -1,
     573,    -1,   574,    -1,   577,    -1,   576,    -1,   583,    -1,
     586,    -1,   590,    -1,   591,    -1,   601,    -1,   605,    -1,
     598,    -1,   607,    -1,   606,    -1,   608,    -1,   616,    -1,
     609,    -1,   619,    -1,   621,    -1,   624,    -1,    -1,   481,
    1421,  1420,  1422,    -1,    -1,   373,    -1,    -1,  1438,  1423,
    1428,    -1,    -1,   563,  1424,  1441,    -1,    -1,  1434,  1425,
    1426,    -1,    -1,  1437,  1427,  1428,    -1,   563,  1441,    -1,
      -1,   637,  1429,    -1,    -1,  1430,  1432,    -1,    -1,  1429,
     637,  1431,  1432,    -1,    -1,  1434,  1433,  1437,    -1,  1438,
      -1,   199,    -1,   272,    -1,   478,    -1,    -1,   199,    -1,
     272,    -1,   478,    -1,    -1,   199,   643,    -1,   272,   643,
      -1,   478,   643,    -1,  1440,  1289,  1447,    -1,    -1,  1440,
    1289,  1439,  1447,    -1,   642,  1415,  1289,  1118,    -1,   642,
     642,  1436,  1440,  1289,  1447,    -1,   952,   957,    -1,   341,
    1289,  1118,    -1,   341,   954,   959,    -1,   393,  1289,  1446,
      -1,   393,   186,  1416,  1289,  1446,    -1,  1413,    -1,  1413,
     643,  1413,    -1,   120,   643,  1413,    -1,  1442,    -1,  1443,
      -1,  1442,   637,  1443,    -1,  1443,   637,  1442,    -1,  1444,
      -1,   247,   263,  1445,    -1,   421,   369,    -1,   421,   618,
      -1,   421,   573,    -1,   421,    75,    -1,   442,   421,    -1,
     476,    -1,   550,    -1,   393,   635,   550,   636,    -1,   366,
     635,   550,   636,    -1,  1118,    -1,   120,    -1,   367,    -1,
      12,    -1,    33,    -1,    -1,   275,  1450,  1449,  1451,    -1,
     544,    -1,   541,    -1,  1452,    -1,  1451,   637,  1452,    -1,
    1406,  1210,  1453,    -1,   421,    -1,   618,    -1,   283,   618,
      -1,   421,   272,    -1,    -1,   584,  1455,  1450,    -1,   205,
    1406,   370,  1210,    -1,   205,  1408,    65,    -1,    -1,   205,
    1408,   421,  1457,  1458,  1212,  1229,    -1,  1459,    -1,  1413,
    1460,    -1,   179,    -1,   351,    -1,   179,    -1,   351,    -1,
     405,    -1,   256,    -1,    -1,  1462,  1461,   635,  1294,   636,
      -1,   155,    -1,   193,    -1,   257,    -1,   204,    -1,   284,
      -1,   457,   687,  1464,    -1,  1468,   367,  1467,  1479,   189,
    1481,    -1,  1468,   367,   192,  1479,   189,  1481,    -1,  1468,
     367,   408,  1479,   189,  1481,    -1,    12,  1469,   637,   200,
     373,   189,  1481,    -1,   413,   367,  1416,   189,  1481,    -1,
     200,   687,  1466,    -1,  1468,   367,  1467,  1479,   561,  1481,
    1486,  1487,    -1,  1468,   367,   192,  1479,   561,  1481,  1486,
    1487,    -1,  1468,   367,   408,  1479,   561,  1481,  1486,  1487,
      -1,   413,   367,  1416,   561,  1481,  1488,    -1,    -1,   544,
      -1,  1470,    -1,    12,  1469,    -1,    -1,   407,    -1,  1471,
      -1,  1470,   637,  1471,    -1,    -1,   473,  1472,  1483,    -1,
      -1,   234,  1473,  1483,    -1,    -1,   587,  1474,  1483,    -1,
      -1,   429,  1475,  1483,    -1,   125,    -1,   589,    -1,   228,
      -1,    13,    -1,    94,    -1,   139,    -1,   165,    -1,   437,
      -1,   487,    -1,   409,    -1,   178,    -1,   200,   373,    -1,
     486,   104,    -1,   536,    -1,    94,   547,   541,    -1,   275,
     541,    -1,   445,   491,    -1,   445,    64,    -1,    94,   605,
      -1,   486,   605,    -1,    94,   461,    -1,    13,   461,    -1,
      94,   590,    -1,   162,    -1,   565,    -1,    94,   542,    -1,
      -1,    17,    -1,  1478,  1476,  1477,    -1,  1478,    -1,   531,
     550,    -1,   248,   550,    -1,    62,   550,    -1,   630,    -1,
    1413,   643,   630,    -1,   630,   643,   630,    -1,  1406,    -1,
    1416,    -1,  1480,   637,  1416,    -1,  1482,    -1,  1481,   637,
    1482,    -1,  1416,   218,    46,   550,    -1,  1416,   218,    46,
     393,   550,    -1,  1416,   218,   613,  1415,    -1,  1416,   218,
     613,  1415,    19,  1410,    -1,  1416,    -1,    -1,   635,  1484,
     636,    -1,  1484,   637,  1485,    -1,  1485,    -1,  1413,    -1,
      -1,   446,  1477,    -1,   446,   515,    -1,   446,   619,    -1,
     446,   353,    -1,    -1,   613,  1489,    -1,    -1,   613,   200,
     373,    -1,  1489,  1490,    -1,  1490,    -1,   200,   373,    -1,
     310,  1234,    -1,   314,  1234,    -1,   309,  1234,    -1,   315,
    1234,    -1,    -1,  1410,    -1,   601,  1491,    -1,   486,  1327,
      -1,   198,  1492,    -1,   198,   380,   410,    -1,   198,  1334,
     410,    -1,   198,   379,  1410,    -1,   525,    13,  1410,    -1,
      -1,   226,  1495,  1493,    -1,   226,  1343,  1406,    -1,    -1,
     226,   481,  1496,  1432,    -1,   224,    -1,    -1,    30,  1499,
    1500,    -1,    -1,   616,    -1,    -1,    17,   357,    55,    -1,
      17,    55,    -1,    -1,   436,    -1,   357,   436,    -1,    -1,
     467,    -1,   225,    -1,    76,  1500,  1501,  1502,    -1,   459,
    1500,  1501,  1502,    -1,   459,  1500,   561,  1503,  1413,    -1,
     467,  1413,    -1,   436,   467,  1413,    -1,    -1,  1510,    -1,
      -1,   581,  1517,  1511,  1097,    -1,    -1,  1510,    -1,  1514,
      -1,    -1,  1514,    -1,    -1,  1515,  1516,    -1,  1224,  1228,
      -1,  1230,    -1,    -1,   135,    -1,    12,    -1,   473,  1180,
      -1,   635,  1099,   636,    -1,  1518,  1513,    -1,    -1,  1519,
     581,  1517,  1520,  1518,  1513,    -1,  1522,  1519,  1523,    -1,
      -1,    -1,    -1,  1525,    -1,  1525,  1526,    -1,  1526,    -1,
     527,    -1,   210,    -1,   135,    -1,   512,    -1,   507,    -1,
     508,    -1,   510,    -1,    12,    -1,  1532,  1528,    -1,  1531,
    1529,    -1,  1533,  1530,  1537,    -1,  1537,    -1,  1549,    -1,
    1560,    -1,  1554,    -1,   674,    -1,  1537,    -1,  1549,    -1,
    1560,    -1,  1554,    -1,  1553,    -1,   674,    -1,  1531,    -1,
    1532,    -1,    -1,   122,   155,  1416,    -1,  1534,    -1,  1534,
    1535,    -1,  1535,    -1,   378,   444,    -1,    11,   155,   574,
      -1,    11,   155,   322,    -1,    11,   155,   548,    -1,    -1,
     513,   472,   122,    -1,   513,   472,   240,    -1,    -1,  1536,
     605,  1406,  1538,  1539,    19,  1541,    -1,    -1,   635,  1540,
     636,    -1,  1413,    -1,  1540,   637,  1413,    -1,    -1,  1542,
    1543,  1548,    -1,    -1,  1546,  1544,  1509,    -1,   635,  1545,
     636,  1512,    -1,  1546,    -1,   635,  1545,   636,    -1,    -1,
     473,  1547,  1102,    -1,    -1,   613,    61,   373,    -1,   613,
      51,    61,   373,    -1,   613,   272,    61,   373,    -1,    -1,
      -1,    -1,   565,  1113,   688,   794,   795,   367,  1113,  1550,
    1406,   186,  1113,  1551,   144,   464,  1552,   743,    -1,    10,
    1113,   192,  1413,   454,   915,   496,  1410,    -1,  1113,   192,
    1413,   454,   915,   496,  1410,    -1,    -1,    -1,    -1,    -1,
      -1,  1113,   192,   688,   635,  1555,   699,   636,  1556,   454,
    1557,   949,  1558,   690,  1559,   743,    -1,    -1,    -1,    -1,
      -1,   408,  1113,   688,  1561,   635,  1562,   703,   636,  1563,
     690,  1564,   743,    -1,   620,  1567,  1566,  1568,    -1,   620,
     149,  1566,  1570,    -1,   620,   403,  1566,    -1,   620,    76,
    1566,  1569,    -1,   620,   459,  1566,    -1,   620,   425,    -1,
    1393,    -1,  1393,   637,  1393,    -1,  1393,   637,  1393,   637,
    1234,    -1,    30,    -1,   518,    -1,    -1,   250,    -1,   452,
      -1,    -1,   368,   394,    -1,    -1,    -1,   537,  1571,  1572,
      -1,    -1,   186,   325,    -1,   236,   396,  1413,   496,  1410,
      -1,   580,   396,  1413,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1967,  1967,  1980,  1979,  2004,  2011,  2013,  2017,  2018,
    2019,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,
    2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,
    2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,
    2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,  2062,
    2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,  2072,
    2073,  2074,  2075,  2076,  2080,  2090,  2091,  2095,  2105,  2112,
    2123,  2122,  2133,  2135,  2139,  2140,  2144,  2157,  2156,  2175,
    2194,  2193,  2238,  2243,  2237,  2250,  2255,  2248,  2273,  2272,
    2285,  2284,  2292,  2296,  2300,  2304,  2311,  2324,  2325,  2329,
    2333,  2337,  2341,  2345,  2350,  2354,  2362,  2361,  2395,  2394,
    2401,  2408,  2409,  2415,  2421,  2431,  2437,  2443,  2445,  2452,
    2453,  2457,  2463,  2472,  2473,  2481,  2481,  2536,  2537,  2538,
    2539,  2540,  2541,  2542,  2543,  2544,  2545,  2546,  2547,  2548,
    2553,  2567,  2581,  2600,  2601,  2605,  2606,  2611,  2613,  2615,
    2617,  2619,  2621,  2623,  2629,  2630,  2631,  2635,  2639,  2647,
    2646,  2659,  2661,  2664,  2666,  2670,  2674,  2681,  2683,  2687,
    2688,  2693,  2712,  2742,  2744,  2748,  2749,  2753,  2782,  2783,
    2784,  2785,  2789,  2790,  2794,  2795,  2800,  2803,  2830,  2829,
    2913,  2930,  2929,  3004,  3003,  3076,  3077,  3082,  3084,  3089,
    3112,  3123,  3127,  3149,  3150,  3154,  3158,  3171,  3177,  3183,
    3192,  3207,  3233,  3239,  3240,  3246,  3249,  3253,  3261,  3281,
    3283,  3301,  3307,  3309,  3311,  3313,  3315,  3317,  3319,  3321,
    3323,  3325,  3327,  3329,  3334,  3350,  3366,  3367,  3372,  3378,
    3387,  3393,  3402,  3410,  3439,  3448,  3450,  3459,  3464,  3470,
    3479,  3487,  3489,  3491,  3493,  3495,  3497,  3499,  3501,  3503,
    3505,  3507,  3509,  3511,  3516,  3536,  3560,  3562,  3561,  3568,
    3569,  3570,  3571,  3572,  3573,  3574,  3575,  3576,  3577,  3578,
    3579,  3580,  3585,  3584,  3595,  3595,  3652,  3651,  3708,  3708,
    3730,  3789,  3839,  3864,  3863,  3889,  3912,  3914,  3915,  3919,
    3937,  3958,  3967,  4003,  3958,  4032,  4034,  4035,  4039,  4040,
    4045,  4056,  4044,  4107,  4106,  4120,  4121,  4125,  4126,  4131,
    4140,  4130,  4189,  4198,  4188,  4242,  4255,  4260,  4259,  4297,
    4298,  4303,  4302,  4336,  4336,  4355,  4354,  4404,  4421,  4430,
    4420,  4484,  4493,  4483,  4533,  4535,  4540,  4542,  4544,  4561,
    4566,  4572,  4579,  4580,  4588,  4594,  4603,  4609,  4615,  4616,
    4620,  4620,  4625,  4626,  4627,  4631,  4632,  4633,  4636,  4638,
    4642,  4643,  4644,  4648,  4649,  4650,  4651,  4652,  4653,  4654,
    4655,  4658,  4660,  4664,  4665,  4666,  4670,  4671,  4672,  4673,
    4674,  4677,  4679,  4683,  4684,  4685,  4689,  4690,  4691,  4692,
    4693,  4694,  4695,  4698,  4700,  4704,  4705,  4706,  4710,  4711,
    4712,  4717,  4725,  4733,  4741,  4753,  4765,  4770,  4775,  4783,
    4791,  4799,  4807,  4815,  4823,  4831,  4844,  4857,  4871,  4876,
    4889,  4890,  4941,  4942,  4945,  4960,  4978,  4983,  4981,  4988,
    4990,  4989,  4993,  4992,  4998,  5035,  5036,  5041,  5040,  5059,
    5078,  5077,  5094,  5098,  5106,  5105,  5108,  5110,  5112,  5114,
    5119,  5120,  5125,  5126,  5130,  5131,  5135,  5154,  5164,  5175,
    5184,  5185,  5201,  5203,  5202,  5207,  5205,  5216,  5217,  5221,
    5239,  5255,  5256,  5272,  5287,  5309,  5310,  5315,  5314,  5338,
    5348,  5370,  5369,  5387,  5386,  5406,  5428,  5432,  5461,  5473,
    5474,  5479,  5490,  5478,  5515,  5516,  5520,  5533,  5554,  5567,
    5593,  5594,  5599,  5598,  5635,  5640,  5641,  5645,  5646,  5650,
    5652,  5658,  5660,  5662,  5664,  5666,  5668,  5678,  5693,  5677,
    5707,  5708,  5712,  5713,  5717,  5718,  5722,  5723,  5727,  5728,
    5732,  5733,  5737,  5741,  5742,  5745,  5747,  5751,  5752,  5756,
    5757,  5758,  5762,  5767,  5772,  5777,  5782,  5787,  5792,  5797,
    5812,  5818,  5833,  5838,  5853,  5859,  5877,  5882,  5887,  5892,
    5897,  5903,  5902,  5928,  5929,  5930,  5935,  5940,  5945,  5947,
    5949,  5951,  5957,  5965,  5983,  6000,  6011,  6030,  6031,  6032,
    6033,  6034,  6035,  6039,  6040,  6041,  6045,  6046,  6050,  6051,
    6052,  6053,  6058,  6065,  6066,  6070,  6071,  6075,  6076,  6083,
    6088,  6100,  6106,  6125,  6131,  6133,  6137,  6141,  6142,  6146,
    6151,  6150,  6173,  6174,  6175,  6176,  6181,  6185,  6190,  6195,
    6199,  6204,  6209,  6215,  6220,  6226,  6230,  6235,  6240,  6258,
    6260,  6262,  6278,  6280,  6285,  6302,  6307,  6312,  6317,  6319,
    6321,  6323,  6325,  6327,  6329,  6331,  6334,  6333,  6338,  6337,
    6341,  6343,  6367,  6371,  6372,  6376,  6377,  6381,  6382,  6383,
    6384,  6385,  6389,  6390,  6391,  6392,  6393,  6397,  6402,  6404,
    6410,  6411,  6413,  6418,  6428,  6429,  6433,  6434,  6435,  6443,
    6444,  6448,  6449,  6453,  6454,  6455,  6459,  6460,  6461,  6462,
    6465,  6466,  6470,  6471,  6475,  6476,  6480,  6481,  6485,  6486,
    6487,  6488,  6489,  6490,  6496,  6502,  6508,  6514,  6515,  6528,
    6534,  6540,  6546,  6551,  6556,  6565,  6586,  6594,  6595,  6600,
    6601,  6605,  6613,  6617,  6618,  6622,  6623,  6627,  6636,  6640,
    6641,  6645,  6653,  6654,  6658,  6659,  6663,  6664,  6669,  6670,
    6674,  6681,  6690,  6695,  6703,  6704,  6705,  6706,  6707,  6708,
    6713,  6721,  6722,  6727,  6726,  6739,  6740,  6744,  6747,  6748,
    6749,  6750,  6754,  6762,  6769,  6770,  6774,  6784,  6785,  6789,
    6790,  6793,  6795,  6799,  6811,  6812,  6816,  6823,  6836,  6837,
    6839,  6841,  6847,  6852,  6858,  6864,  6871,  6881,  6882,  6883,
    6884,  6885,  6889,  6893,  6894,  6898,  6899,  6903,  6904,  6908,
    6909,  6910,  6914,  6915,  6919,  6936,  6948,  6949,  6953,  6954,
    6958,  6959,  6968,  6969,  6978,  6979,  6983,  6984,  6988,  6990,
    6994,  6995,  7003,  7004,  7017,  7018,  7019,  7023,  7024,  7028,
    7034,  7048,  7049,  7053,  7054,  7058,  7059,  7067,  7066,  7105,
    7104,  7118,  7130,  7129,  7148,  7147,  7166,  7165,  7184,  7178,
    7198,  7197,  7230,  7235,  7240,  7245,  7250,  7257,  7264,  7269,
    7277,  7278,  7279,  7280,  7284,  7285,  7297,  7298,  7302,  7303,
    7306,  7308,  7316,  7324,  7326,  7328,  7329,  7337,  7338,  7342,
    7351,  7349,  7363,  7377,  7376,  7390,  7388,  7402,  7409,  7420,
    7421,  7449,  7456,  7460,  7465,  7464,  7480,  7482,  7487,  7495,
    7494,  7510,  7514,  7513,  7525,  7526,  7530,  7545,  7546,  7550,
    7559,  7563,  7568,  7574,  7573,  7584,  7593,  7583,  7608,  7617,
    7626,  7635,  7644,  7650,  7656,  7665,  7674,  7702,  7723,  7733,
    7737,  7742,  7743,  7746,  7748,  7749,  7750,  7751,  7754,  7759,
    7770,  7775,  7786,  7787,  7791,  7792,  7796,  7797,  7798,  7802,
    7803,  7808,  7816,  7817,  7818,  7819,  7823,  7840,  7843,  7850,
    7854,  7861,  7865,  7869,  7877,  7876,  7888,  7889,  7890,  7895,
    7894,  7916,  7917,  7921,  7922,  7926,  7927,  7928,  7933,  7932,
    7954,  7963,  7962,  7989,  7990,  7994,  7995,  7999,  8000,  8001,
    8002,  8003,  8004,  8009,  8008,  8030,  8031,  8032,  8037,  8036,
    8042,  8049,  8054,  8062,  8063,  8067,  8081,  8080,  8093,  8094,
    8098,  8099,  8103,  8113,  8123,  8128,  8127,  8138,  8139,  8143,
    8144,  8148,  8158,  8169,  8168,  8176,  8176,  8187,  8188,  8193,
    8194,  8203,  8212,  8213,  8217,  8222,  8227,  8232,  8237,  8236,
    8256,  8264,  8256,  8271,  8272,  8273,  8274,  8275,  8279,  8286,
    8293,  8295,  8306,  8307,  8311,  8312,  8340,  8370,  8372,  8378,
    8388,  8389,  8390,  8405,  8412,  8437,  8443,  8449,  8450,  8451,
    8452,  8453,  8457,  8458,  8462,  8513,  8520,  8526,  8532,  8538,
    8544,  8550,  8556,  8562,  8568,  8619,  8626,  8669,  8675,  8681,
    8687,  8693,  8699,  8705,  8711,  8715,  8721,  8727,  8733,  8739,
    8745,  8749,  8755,  8765,  8771,  8779,  8785,  8795,  8801,  8810,
    8820,  8826,  8836,  8842,  8851,  8855,  8861,  8867,  8873,  8879,
    8885,  8891,  8897,  8903,  8909,  8915,  8921,  8927,  8933,  8939,
    8943,  8944,  8948,  8949,  8953,  8954,  8958,  8959,  8963,  8964,
    8965,  8966,  8967,  8968,  8972,  8973,  8977,  8978,  8979,  8980,
    8981,  8982,  8994,  8995,  8996,  8997,  8998,  9004,  9008,  9014,
    9020,  9026,  9032,  9034,  9041,  9048,  9054,  9095,  9104,  9111,
    9119,  9125,  9132,  9138,  9152,  9159,  9175,  9181,  9187,  9195,
    9201,  9207,  9213,  9219,  9234,  9246,  9252,  9258,  9264,  9270,
    9276,  9282,  9288,  9294,  9300,  9306,  9312,  9318,  9324,  9330,
    9336,  9342,  9350,  9371,  9378,  9384,  9391,  9398,  9405,  9412,
    9418,  9424,  9429,  9435,  9442,  9448,  9454,  9460,  9466,  9472,
    9490,  9496,  9502,  9509,  9516,  9531,  9537,  9543,  9549,  9555,
    9562,  9568,  9574,  9580,  9586,  9592,  9599,  9612,  9618,  9624,
    9630,  9636,  9644,  9650,  9662,  9668,  9674,  9682,  9692,  9779,
    9778,  9851,  9891,  9893,  9898,  9899,  9903,  9904,  9908,  9909,
    9913,  9920,  9928,  9953,  9959,  9965,  9971,  9977,  9983,  9992,
    9999, 10001,  9998, 10008, 10019, 10025, 10031, 10037, 10043, 10049,
   10055, 10061, 10067, 10074, 10073, 10092, 10091, 10106, 10117, 10125,
   10141, 10142, 10147, 10152, 10157, 10160, 10173, 10172, 10189, 10191,
   10193, 10195, 10197, 10199, 10201, 10203, 10205, 10207, 10209, 10214,
   10215, 10219, 10226, 10234, 10235, 10239, 10246, 10254, 10255, 10259,
   10260, 10264, 10272, 10283, 10284, 10293, 10304, 10305, 10311, 10312,
   10332, 10334, 10338, 10336, 10353, 10351, 10369, 10367, 10374, 10383,
   10381, 10399, 10398, 10408, 10419, 10417, 10436, 10435, 10446, 10457,
   10458, 10459, 10467, 10468, 10472, 10487, 10487, 10502, 10542, 10615,
   10626, 10631, 10623, 10650, 10670, 10678, 10670, 10687, 10686, 10709,
   10726, 10709, 10733, 10737, 10763, 10764, 10769, 10772, 10773, 10774,
   10778, 10779, 10784, 10783, 10789, 10788, 10796, 10797, 10800, 10802,
   10802, 10806, 10806, 10811, 10812, 10816, 10818, 10823, 10824, 10828,
   10839, 10852, 10853, 10854, 10855, 10856, 10857, 10858, 10859, 10860,
   10861, 10862, 10863, 10867, 10868, 10869, 10870, 10871, 10872, 10873,
   10874, 10875, 10879, 10880, 10881, 10882, 10885, 10887, 10888, 10892,
   10893, 10901, 10903, 10907, 10909, 10908, 10922, 10925, 10924, 10939,
   10945, 10960, 10962, 10966, 10968, 10973, 10974, 10994, 11019, 11023,
   11024, 11028, 11041, 11043, 11048, 11047, 11082, 11084, 11089, 11090,
   11091, 11096, 11102, 11106, 11107, 11111, 11118, 11125, 11132, 11142,
   11169, 11173, 11179, 11185, 11195, 11199, 11209, 11210, 11211, 11212,
   11213, 11214, 11218, 11219, 11220, 11221, 11222, 11226, 11227, 11228,
   11229, 11230, 11234, 11235, 11236, 11237, 11241, 11246, 11247, 11250,
   11253, 11252, 11286, 11287, 11291, 11299, 11312, 11312, 11322, 11323,
   11327, 11346, 11386, 11385, 11399, 11407, 11398, 11409, 11421, 11433,
   11432, 11450, 11449, 11460, 11461, 11460, 11477, 11484, 11505, 11526,
   11538, 11543, 11542, 11552, 11558, 11565, 11570, 11575, 11585, 11586,
   11590, 11601, 11614, 11615, 11619, 11630, 11631, 11635, 11636, 11639,
   11641, 11644, 11645, 11646, 11650, 11651, 11659, 11667, 11658, 11677,
   11684, 11676, 11694, 11706, 11707, 11720, 11724, 11725, 11741, 11742,
   11746, 11755, 11756, 11757, 11759, 11758, 11769, 11770, 11774, 11775,
   11777, 11776, 11780, 11779, 11785, 11786, 11790, 11791, 11795, 11805,
   11806, 11810, 11811, 11816, 11815, 11829, 11830, 11834, 11839, 11847,
   11848, 11856, 11857, 11866, 11868, 11868, 11876, 11884, 11875, 11906,
   11907, 11911, 11919, 11920, 11924, 11934, 11935, 11942, 11941, 11957,
   11956, 11970, 11969, 11981, 11980, 11994, 11995, 11999, 12012, 12028,
   12029, 12033, 12034, 12038, 12039, 12040, 12045, 12044, 12062, 12064,
   12067, 12069, 12072, 12073, 12076, 12080, 12084, 12088, 12092, 12096,
   12100, 12104, 12108, 12116, 12119, 12129, 12128, 12143, 12150, 12158,
   12166, 12174, 12182, 12190, 12197, 12199, 12201, 12210, 12214, 12219,
   12218, 12224, 12223, 12228, 12237, 12244, 12249, 12251, 12253, 12255,
   12257, 12265, 12276, 12284, 12286, 12294, 12301, 12308, 12318, 12325,
   12331, 12340, 12348, 12352, 12356, 12363, 12370, 12376, 12383, 12390,
   12395, 12400, 12408, 12410, 12412, 12417, 12418, 12421, 12423, 12427,
   12428, 12432, 12433, 12437, 12438, 12442, 12443, 12447, 12448, 12451,
   12453, 12460, 12471, 12470, 12486, 12485, 12492, 12493, 12494, 12495,
   12496, 12500, 12501, 12505, 12506, 12507, 12522, 12521, 12534, 12543,
   12533, 12545, 12549, 12550, 12562, 12561, 12583, 12584, 12589, 12591,
   12593, 12595, 12597, 12599, 12601, 12603, 12605, 12607, 12609, 12611,
   12613, 12618, 12619, 12624, 12623, 12633, 12634, 12638, 12638, 12640,
   12641, 12645, 12646, 12651, 12650, 12661, 12665, 12669, 12681, 12691,
   12692, 12693, 12699, 12711, 12723, 12733, 12743, 12710, 12751, 12752,
   12756, 12757, 12761, 12762, 12774, 12778, 12779, 12780, 12783, 12785,
   12789, 12790, 12794, 12799, 12806, 12811, 12818, 12820, 12824, 12825,
   12829, 12834, 12842, 12843, 12846, 12848, 12856, 12858, 12862, 12863,
   12864, 12868, 12870, 12875, 12876, 12885, 12886, 12890, 12891, 12895,
   12908, 12932, 12944, 12955, 12974, 12982, 12994, 13009, 13030, 13031,
   13032, 13041, 13042, 13043, 13044, 13051, 13057, 13063, 13069, 13075,
   13104, 13135, 13145, 13155, 13161, 13170, 13182, 13188, 13194, 13210,
   13211, 13215, 13224, 13240, 13244, 13295, 13299, 13317, 13321, 13401,
   13426, 13457, 13458, 13474, 13484, 13488, 13494, 13500, 13510, 13516,
   13525, 13535, 13536, 13573, 13589, 13605, 13622, 13623, 13640, 13641,
   13652, 13653, 13654, 13658, 13685, 13718, 13733, 13734, 13735, 13736,
   13737, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 13746,
   13747, 13748, 13749, 13750, 13751, 13752, 13753, 13754, 13755, 13756,
   13757, 13758, 13759, 13760, 13761, 13762, 13763, 13764, 13765, 13766,
   13767, 13768, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776,
   13777, 13778, 13779, 13780, 13781, 13782, 13792, 13793, 13794, 13795,
   13796, 13797, 13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805,
   13806, 13807, 13808, 13809, 13810, 13811, 13812, 13813, 13814, 13815,
   13816, 13817, 13818, 13819, 13820, 13821, 13822, 13823, 13824, 13825,
   13826, 13827, 13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835,
   13836, 13841, 13842, 13843, 13844, 13845, 13846, 13847, 13848, 13849,
   13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857, 13858, 13859,
   13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867, 13868, 13869,
   13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877, 13878, 13879,
   13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887, 13888, 13889,
   13890, 13891, 13892, 13893, 13894, 13895, 13896, 13897, 13898, 13899,
   13900, 13901, 13902, 13903, 13904, 13905, 13906, 13907, 13908, 13909,
   13910, 13911, 13912, 13913, 13914, 13915, 13916, 13917, 13918, 13919,
   13920, 13921, 13922, 13923, 13924, 13925, 13926, 13927, 13928, 13929,
   13930, 13931, 13932, 13933, 13934, 13935, 13936, 13937, 13938, 13939,
   13940, 13941, 13942, 13943, 13944, 13945, 13946, 13947, 13948, 13949,
   13950, 13951, 13952, 13953, 13954, 13955, 13956, 13957, 13958, 13959,
   13960, 13961, 13962, 13963, 13964, 13965, 13966, 13967, 13968, 13969,
   13970, 13971, 13972, 13973, 13974, 13975, 13976, 13977, 13978, 13979,
   13980, 13981, 13982, 13983, 13984, 13985, 13986, 13987, 13988, 13989,
   13990, 13991, 13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999,
   14000, 14001, 14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009,
   14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019,
   14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029,
   14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039,
   14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049,
   14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059,
   14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069,
   14070, 14071, 14072, 14073, 14074, 14075, 14076, 14077, 14078, 14079,
   14080, 14081, 14082, 14083, 14084, 14085, 14086, 14087, 14088, 14089,
   14090, 14091, 14092, 14093, 14094, 14095, 14096, 14108, 14107, 14124,
   14125, 14131, 14130, 14137, 14136, 14146, 14145, 14156, 14155, 14161,
   14169, 14171, 14176, 14176, 14185, 14184, 14198, 14197, 14202, 14206,
   14207, 14208, 14212, 14213, 14214, 14215, 14219, 14220, 14221, 14222,
   14227, 14253, 14252, 14352, 14363, 14376, 14392, 14405, 14427, 14461,
   14502, 14530, 14576, 14590, 14591, 14592, 14593, 14597, 14615, 14633,
   14634, 14638, 14639, 14640, 14641, 14645, 14646, 14664, 14677, 14678,
   14679, 14685, 14691, 14703, 14702, 14718, 14719, 14723, 14724, 14728,
   14741, 14742, 14743, 14748, 14753, 14752, 14772, 14788, 14805, 14804,
   14843, 14844, 14848, 14849, 14853, 14854, 14855, 14856, 14858, 14857,
   14871, 14872, 14873, 14874, 14875, 14881, 14886, 14892, 14903, 14914,
   14918, 14928, 14933, 14940, 14952, 14964, 14973, 14975, 14979, 14980,
   14987, 14989, 14993, 14994, 14999, 14998, 15002, 15001, 15005, 15004,
   15008, 15007, 15010, 15011, 15012, 15013, 15014, 15015, 15016, 15017,
   15018, 15019, 15020, 15021, 15022, 15023, 15024, 15025, 15026, 15027,
   15028, 15029, 15030, 15031, 15032, 15033, 15034, 15035, 15039, 15040,
   15044, 15045, 15049, 15059, 15069, 15082, 15097, 15110, 15123, 15135,
   15140, 15148, 15153, 15161, 15176, 15187, 15196, 15206, 15215, 15219,
   15223, 15224, 15228, 15255, 15257, 15261, 15265, 15269, 15276, 15277,
   15281, 15282, 15286, 15287, 15291, 15292, 15298, 15304, 15310, 15319,
   15323, 15331, 15345, 15351, 15356, 15366, 15372, 15382, 15396, 15395,
   15409, 15416, 15415, 15429, 15439, 15438, 15448, 15449, 15454, 15455,
   15456, 15461, 15462, 15463, 15467, 15468, 15472, 15480, 15492, 15501,
   15511, 15520, 15534, 15535, 15540, 15539, 15555, 15556, 15557, 15561,
   15562, 15566, 15566, 15590, 15591, 15595, 15596, 15597, 15601, 15605,
   15612, 15615, 15613, 15629, 15636, 15657, 15674, 15676, 15680, 15681,
   15685, 15686, 15694, 15695, 15696, 15697, 15703, 15709, 15719, 15721,
   15723, 15728, 15729, 15730, 15731, 15732, 15736, 15737, 15738, 15739,
   15740, 15741, 15751, 15752, 15757, 15770, 15783, 15785, 15787, 15792,
   15797, 15799, 15801, 15807, 15808, 15810, 15816, 15815, 15833, 15834,
   15838, 15843, 15851, 15851, 15877, 15876, 15893, 15897, 15902, 15907,
   15906, 15918, 15919, 15921, 15923, 15941, 15947, 15952, 15934, 16015,
   16033, 16058, 16090, 16095, 16103, 16126, 16054, 16192, 16212, 16225,
   16235, 16191, 16256, 16260, 16264, 16268, 16272, 16276, 16283, 16290,
   16297, 16307, 16308, 16312, 16313, 16314, 16318, 16319, 16324, 16326,
   16325, 16331, 16332, 16336, 16346
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC",
  "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM",
  "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND",
  "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM",
  "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM",
  "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INCEPTION_START_SYM",
  "INCEPTION_COMMIT_SYM", "INCEPTION_SYM", "INDEXES", "INDEX_SYM",
  "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM",
  "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM",
  "MASTER_BIND_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OSC_PERCENT_SYM", "OSC_SYM",
  "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITION_SYM",
  "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD", "PHASE_SYM",
  "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM", "POINT_SYM", "POLYGON",
  "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM",
  "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM",
  "REVOKE", "RIGHT", "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM",
  "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "create", "$@4", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "$@17", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "$@18", "sp_proc_stmt", "sp_proc_stmt_if", "$@19",
  "sp_proc_stmt_statement", "$@20", "sp_proc_stmt_return", "$@21",
  "sp_proc_stmt_unlabeled", "$@22", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@23", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@24", "$@25", "$@26", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@27", "$@28", "searched_case_stmt", "$@29",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@30", "$@31", "searched_when_clause", "$@32",
  "$@33", "else_clause_opt", "sp_labeled_control", "$@34", "sp_opt_label",
  "sp_labeled_block", "$@35", "sp_unlabeled_block", "$@36",
  "sp_block_content", "$@37", "sp_unlabeled_control", "$@38", "$@39",
  "$@40", "$@41", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@42", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "$@43",
  "create3", "$@44", "$@45", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "$@46", "have_partitioning", "partition_entry", "$@47",
  "partition", "part_type_def", "$@48", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@49",
  "$@50", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@51", "part_name", "opt_part_values", "$@52", "$@53", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@54", "$@55",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@56", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@57", "$@58", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@59", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@60", "type", "$@61", "$@62", "char",
  "nchar", "varchar", "nvarchar", "int_type", "real_type", "float_options",
  "precision", "type_datetime_precision", "func_datetime_precision",
  "field_options", "field_opt_list", "field_option", "field_length",
  "opt_field_length", "opt_precision", "opt_attribute",
  "opt_attribute_list", "attribute", "type_with_opt_collate", "now",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@63", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "normal_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@64", "$@65", "$@66", "$@67", "$@68", "$@69",
  "$@70", "alter_user_list", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@71", "$@72", "$@73", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@74",
  "add_part_extra", "reorg_partition_rule", "$@75", "reorg_parts_rule",
  "$@76", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "$@77", "$@78", "$@79",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option", "checksum",
  "$@80", "opt_checksum_type", "repair", "$@81", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@82",
  "binlog_base64_event", "check", "$@83", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@84",
  "opt_no_write_to_binlog", "rename", "$@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@86",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@87",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@88", "cache_keys_spec", "$@89",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@90",
  "select_part2", "$@91", "$@92", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "update_set_expr",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "function_call_generic", "$@93", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@94", "$@95", "$@96",
  "variable", "$@97", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@98",
  "cast_type", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@99", "$@100", "$@101", "$@102", "$@103", "$@104", "$@105",
  "normal_join", "opt_use_partition", "use_partition", "table_factor",
  "$@106", "select_derived_union", "$@107", "$@108",
  "select_init2_derived", "select_part2_derived", "$@109", "$@110",
  "select_derived", "$@111", "select_derived2", "$@112", "$@113",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@114",
  "$@115", "index_hints_list", "opt_index_hints_list", "$@116",
  "opt_key_definition", "$@117", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@118", "having_clause", "$@119", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@120", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "$@121",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "$@122", "select_var_list", "select_var_ident",
  "into", "$@123", "into_destination", "$@124", "$@125", "do", "$@126",
  "drop", "$@127", "$@128", "$@129", "$@130", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "$@131", "$@132",
  "replace", "$@133", "$@134", "insert_lock_option", "replace_lock_option",
  "insert2", "insert_table", "insert_field_spec", "$@135", "fields",
  "insert_values", "$@136", "$@137", "values_list", "ident_eq_list",
  "ident_eq_value", "equal", "opt_equal", "no_braces", "$@138",
  "opt_values", "values", "expr_or_default", "update_set_expr_or_default",
  "opt_insert_update", "$@139", "update", "$@140", "$@141", "update_list",
  "update_elem", "insert_update_list", "insert_update_elem",
  "opt_low_priority", "delete", "$@142", "single_multi", "$@143", "$@144",
  "$@145", "table_wild_list", "table_wild_one", "opt_wild",
  "opt_delete_options", "opt_delete_option", "truncate", "$@146",
  "opt_table_sym", "opt_profile_defs", "profile_defs", "profile_def",
  "opt_profile_args", "show", "$@147", "show_param", "$@148", "$@149",
  "show_engine_param", "master_or_binary", "opt_storage", "opt_db",
  "opt_full", "from_or_in", "binlog_in", "binlog_from", "wild_and_where",
  "describe", "$@150", "$@151", "explanable_command", "describe_command",
  "opt_describe_column", "flush", "$@152", "flush_options", "$@153",
  "$@154", "opt_flush_lock", "$@155", "flush_options_list", "flush_option",
  "opt_table_list", "reset", "$@156", "reset_options", "reset_option",
  "$@157", "slave_reset_options", "purge", "$@158", "purge_options",
  "purge_option", "kill", "kill_option", "use", "load", "$@159", "$@160",
  "$@161", "$@162", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "$@163",
  "opt_option", "start_option_value_list", "$@164", "$@165", "$@166",
  "start_option_value_list_following_option_type", "$@167",
  "option_value_list_continued", "option_value_list", "$@168", "$@169",
  "option_value", "$@170", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "$@171", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@172",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@173", "handler", "$@174", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@175",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@176", "$@177", "$@178",
  "$@179", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "opt_grant_option", "grant_option_list", "grant_option",
  "opt_variables_name", "local_show_param", "inception_show_param",
  "inception", "$@180", "$@181", "inception_magic_start", "begin", "$@182",
  "opt_work", "opt_chain", "opt_release", "opt_savepoint",
  "inception_magic_commit", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@183", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@184",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@185", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@186",
  "view_list_opt", "view_list", "view_select", "$@187", "view_select_aux",
  "$@188", "create_view_select_paren", "create_view_select", "$@189",
  "view_check_option", "trigger_tail", "$@190", "$@191", "$@192",
  "udf_tail", "sf_tail", "$@193", "$@194", "$@195", "$@196", "$@197",
  "sp_tail", "$@198", "$@199", "$@200", "$@201", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@202", "opt_migrate", "install", "uninstall", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   124,    38,    45,    43,
      42,    47,    37,    94,   126,    40,    41,    44,    33,   123,
     125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   645,   646,   647,   646,   646,   648,   648,   649,   649,
     649,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   651,   652,   652,   653,   654,   654,
     656,   655,   657,   657,   658,   658,   659,   661,   660,   662,
     664,   663,   665,   666,   663,   667,   668,   663,   669,   663,
     670,   663,   663,   663,   663,   663,   671,   672,   672,   673,
     673,   673,   673,   673,   673,   673,   675,   674,   677,   676,
     676,   678,   678,   678,   678,   679,   679,   680,   680,   681,
     681,   682,   682,   683,   683,   685,   684,   686,   686,   686,
     686,   686,   686,   686,   686,   686,   686,   686,   686,   686,
     687,   688,   688,   689,   689,   690,   690,   691,   691,   691,
     691,   691,   691,   691,   692,   692,   692,   693,   693,   695,
     694,   696,   696,   697,   697,   698,   698,   699,   699,   700,
     700,   701,   702,   703,   703,   704,   704,   705,   706,   706,
     706,   706,   707,   707,   708,   708,   709,   709,   711,   710,
     710,   712,   710,   713,   710,   714,   714,   715,   715,   716,
     717,   717,   718,   719,   719,   720,   720,   720,   720,   720,
     721,   722,   722,   723,   723,   724,   724,   725,   725,   726,
     726,   726,   727,   727,   727,   727,   727,   727,   727,   727,
     727,   727,   727,   727,   728,   729,   730,   730,   731,   731,
     732,   732,   733,   734,   734,   735,   735,   736,   737,   737,
     738,   739,   739,   739,   739,   739,   739,   739,   739,   739,
     739,   739,   739,   739,   740,   740,   741,   742,   741,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   745,   744,   747,   746,   749,   748,   751,   750,
     752,   753,   754,   756,   755,   757,   758,   758,   758,   759,
     759,   761,   762,   763,   760,   764,   764,   764,   765,   765,
     767,   768,   766,   770,   769,   771,   771,   772,   772,   774,
     775,   773,   777,   778,   776,   779,   779,   781,   780,   782,
     782,   784,   783,   786,   785,   788,   787,   789,   790,   791,
     789,   792,   793,   789,   794,   794,   795,   795,   795,   796,
     797,   798,   799,   799,   800,   800,   801,   802,   803,   803,
     805,   804,   806,   806,   806,   807,   807,   807,   808,   808,
     809,   809,   809,   810,   810,   810,   810,   810,   810,   810,
     810,   811,   811,   812,   812,   812,   813,   813,   813,   813,
     813,   814,   814,   815,   815,   815,   816,   816,   816,   816,
     816,   816,   816,   817,   817,   818,   818,   818,   819,   819,
     819,   820,   821,   822,   823,   824,   825,   825,   825,   826,
     827,   828,   829,   830,   831,   832,   833,   834,   835,   835,
     836,   836,   837,   837,   837,   837,   838,   839,   838,   840,
     841,   840,   842,   840,   843,   844,   844,   846,   845,   847,
     849,   848,   850,   851,   852,   851,   851,   851,   851,   851,
     853,   853,   854,   854,   855,   855,   856,   857,   858,   859,
     860,   860,   861,   862,   861,   863,   861,   864,   864,   865,
     866,   867,   867,   868,   868,   869,   869,   871,   870,   872,
     873,   874,   873,   875,   873,   876,   876,   877,   877,   878,
     878,   880,   881,   879,   882,   882,   883,   883,   884,   884,
     885,   885,   887,   886,   888,   889,   889,   890,   890,   891,
     891,   891,   891,   891,   891,   891,   891,   893,   894,   892,
     895,   895,   896,   896,   897,   897,   898,   898,   899,   899,
     900,   900,   901,   902,   902,   903,   903,   904,   904,   905,
     905,   905,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   906,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   907,   906,   906,   906,   906,   906,   906,   906,   906,
     906,   906,   906,   908,   909,   910,   911,   912,   912,   912,
     912,   912,   912,   913,   913,   913,   914,   914,   915,   915,
     915,   915,   916,   917,   917,   918,   918,   919,   919,   920,
     920,   920,   920,   920,   921,   921,   922,   923,   923,   924,
     926,   925,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   928,   927,   929,   927,
     927,   927,   930,   931,   931,   932,   932,   933,   933,   933,
     933,   933,   934,   934,   934,   934,   934,   935,   935,   935,
     936,   936,   936,   937,   938,   938,   939,   939,   939,   940,
     940,   941,   941,   942,   942,   942,   943,   943,   943,   943,
     944,   944,   945,   945,   946,   946,   947,   947,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   949,   950,   951,   951,   952,
     952,   953,   953,   954,   954,   955,   955,   956,   956,   957,
     957,   958,   959,   959,   960,   960,   961,   961,   962,   962,
     962,   963,   963,   963,   964,   964,   964,   964,   964,   964,
     964,   965,   965,   967,   966,   968,   968,   969,   970,   970,
     970,   970,   971,   972,   973,   973,   974,   975,   975,   976,
     976,   977,   977,   978,   979,   979,   980,   980,   981,   981,
     981,   981,   982,   982,   982,   982,   982,   983,   983,   983,
     983,   983,   984,   985,   985,   986,   986,   987,   987,   988,
     988,   988,   989,   989,   990,   991,   992,   992,   993,   993,
     994,   994,   995,   995,   996,   996,   997,   997,   998,   998,
     999,   999,  1000,  1000,  1001,  1001,  1001,  1002,  1002,  1003,
    1003,  1004,  1004,  1005,  1005,  1006,  1006,  1008,  1007,  1009,
    1007,  1007,  1010,  1007,  1011,  1007,  1012,  1007,  1013,  1007,
    1014,  1007,  1007,  1007,  1007,  1007,  1007,  1007,  1015,  1015,
    1016,  1016,  1016,  1016,  1017,  1017,  1018,  1018,  1019,  1019,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,
    1021,  1020,  1020,  1022,  1020,  1023,  1020,  1020,  1020,  1020,
    1020,  1024,  1025,  1025,  1027,  1026,  1028,  1028,  1028,  1030,
    1029,  1031,  1032,  1031,  1033,  1033,  1034,  1035,  1035,  1036,
    1037,  1037,  1037,  1038,  1037,  1039,  1040,  1037,  1037,  1037,
    1037,  1037,  1037,  1037,  1037,  1037,  1037,  1037,  1037,  1037,
    1037,  1037,  1037,  1041,  1041,  1041,  1041,  1041,  1042,  1042,
    1043,  1043,  1044,  1044,  1045,  1045,  1046,  1046,  1046,  1047,
    1047,  1047,  1048,  1048,  1048,  1048,  1049,  1050,  1050,  1051,
    1051,  1052,  1052,  1052,  1054,  1053,  1055,  1055,  1055,  1057,
    1056,  1058,  1058,  1059,  1059,  1060,  1060,  1060,  1062,  1061,
    1063,  1065,  1064,  1066,  1066,  1067,  1067,  1068,  1068,  1068,
    1068,  1068,  1068,  1070,  1069,  1071,  1071,  1071,  1073,  1072,
    1072,  1074,  1074,  1075,  1075,  1076,  1078,  1077,  1079,  1079,
    1080,  1080,  1081,  1082,  1083,  1085,  1084,  1086,  1086,  1087,
    1087,  1088,  1089,  1091,  1090,  1093,  1092,  1094,  1094,  1095,
    1095,  1096,  1097,  1097,  1098,  1098,  1099,  1099,  1101,  1100,
    1103,  1104,  1102,  1105,  1105,  1105,  1105,  1105,  1106,  1106,
    1107,  1107,  1108,  1108,  1109,  1109,  1109,  1110,  1110,  1110,
    1111,  1111,  1111,  1112,  1112,  1113,  1114,  1115,  1115,  1115,
    1115,  1115,  1116,  1116,  1117,  1117,  1117,  1117,  1117,  1117,
    1117,  1117,  1117,  1117,  1118,  1118,  1118,  1118,  1118,  1118,
    1118,  1118,  1118,  1118,  1118,  1119,  1119,  1119,  1119,  1119,
    1119,  1120,  1120,  1120,  1120,  1120,  1120,  1120,  1120,  1120,
    1120,  1120,  1120,  1120,  1120,  1121,  1121,  1121,  1121,  1121,
    1121,  1121,  1121,  1121,  1121,  1121,  1121,  1121,  1121,  1121,
    1122,  1122,  1123,  1123,  1124,  1124,  1125,  1125,  1126,  1126,
    1126,  1126,  1126,  1126,  1127,  1127,  1128,  1128,  1128,  1128,
    1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,
    1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,  1128,
    1128,  1128,  1128,  1128,  1128,  1128,  1129,  1129,  1129,  1129,
    1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,
    1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,  1129,
    1129,  1129,  1129,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,  1130,
    1130,  1130,  1130,  1130,  1130,  1131,  1131,  1131,  1131,  1131,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,
    1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1131,  1133,
    1132,  1132,  1134,  1134,  1135,  1135,  1136,  1136,  1137,  1137,
    1138,  1138,  1139,  1140,  1140,  1140,  1140,  1140,  1140,  1140,
    1141,  1142,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,
    1140,  1140,  1140,  1143,  1140,  1145,  1144,  1146,  1146,  1146,
    1147,  1147,  1148,  1148,  1149,  1149,  1151,  1150,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1153,
    1153,  1154,  1154,  1155,  1155,  1156,  1156,  1157,  1157,  1158,
    1158,  1159,  1159,  1160,  1160,  1161,  1162,  1162,  1163,  1163,
    1164,  1164,  1165,  1164,  1166,  1164,  1167,  1164,  1164,  1168,
    1164,  1169,  1164,  1164,  1170,  1164,  1171,  1164,  1164,  1172,
    1172,  1172,  1173,  1173,  1174,  1176,  1175,  1175,  1175,  1177,
    1178,  1179,  1177,  1180,  1182,  1183,  1181,  1185,  1184,  1187,
    1188,  1186,  1189,  1190,  1191,  1191,  1192,  1192,  1192,  1192,
    1193,  1193,  1195,  1194,  1196,  1194,  1197,  1197,  1198,  1199,
    1198,  1201,  1200,  1202,  1202,  1203,  1203,  1204,  1204,  1205,
    1205,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1206,  1206,  1207,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1208,  1208,  1208,  1208,  1209,  1209,  1209,  1210,
    1210,  1211,  1211,  1212,  1213,  1212,  1214,  1215,  1214,  1216,
    1216,  1217,  1217,  1218,  1218,  1219,  1219,  1219,  1220,  1221,
    1221,  1222,  1223,  1223,  1225,  1224,  1226,  1226,  1227,  1227,
    1227,  1228,  1228,  1229,  1229,  1230,  1231,  1231,  1231,  1232,
    1232,  1232,  1232,  1232,  1233,  1233,  1234,  1234,  1234,  1234,
    1234,  1234,  1235,  1235,  1235,  1235,  1235,  1236,  1236,  1236,
    1236,  1236,  1237,  1237,  1237,  1237,  1238,  1239,  1239,  1240,
    1241,  1240,  1242,  1242,  1242,  1243,  1245,  1244,  1246,  1246,
    1247,  1247,  1249,  1248,  1251,  1252,  1250,  1250,  1250,  1254,
    1253,  1256,  1255,  1257,  1258,  1255,  1255,  1255,  1255,  1255,
    1255,  1259,  1255,  1255,  1255,  1255,  1255,  1255,  1260,  1260,
    1261,  1262,  1263,  1263,  1264,  1265,  1265,  1266,  1266,  1267,
    1267,  1268,  1268,  1268,  1269,  1269,  1271,  1272,  1270,  1274,
    1275,  1273,  1276,  1276,  1276,  1276,  1277,  1277,  1278,  1278,
    1279,  1280,  1280,  1280,  1281,  1280,  1282,  1282,  1283,  1283,
    1284,  1283,  1285,  1283,  1286,  1286,  1287,  1287,  1288,  1289,
    1289,  1290,  1290,  1292,  1291,  1293,  1293,  1294,  1294,  1295,
    1295,  1296,  1296,  1297,  1298,  1297,  1300,  1301,  1299,  1302,
    1302,  1303,  1304,  1304,  1305,  1306,  1306,  1308,  1307,  1310,
    1309,  1311,  1309,  1312,  1309,  1313,  1313,  1314,  1314,  1315,
    1315,  1316,  1316,  1317,  1317,  1317,  1319,  1318,  1320,  1320,
    1321,  1321,  1322,  1322,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1324,  1324,  1326,  1325,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1328,
    1327,  1329,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,  1327,
    1327,  1327,  1330,  1330,  1330,  1331,  1331,  1332,  1332,  1333,
    1333,  1334,  1334,  1335,  1335,  1336,  1336,  1337,  1337,  1338,
    1338,  1338,  1340,  1339,  1341,  1339,  1342,  1342,  1342,  1342,
    1342,  1343,  1343,  1344,  1344,  1344,  1346,  1345,  1348,  1349,
    1347,  1347,  1350,  1350,  1351,  1350,  1352,  1352,  1353,  1353,
    1353,  1353,  1353,  1353,  1353,  1353,  1353,  1353,  1353,  1353,
    1353,  1354,  1354,  1356,  1355,  1357,  1357,  1359,  1358,  1358,
    1358,  1360,  1360,  1362,  1361,  1363,  1364,  1364,  1365,  1366,
    1366,  1366,  1367,  1369,  1370,  1371,  1372,  1368,  1373,  1373,
    1374,  1374,  1375,  1375,  1375,  1376,  1376,  1376,  1377,  1377,
    1378,  1378,  1379,  1379,  1379,  1379,  1380,  1380,  1381,  1381,
    1382,  1382,  1383,  1383,  1384,  1384,  1385,  1385,  1386,  1386,
    1386,  1387,  1387,  1388,  1388,  1389,  1389,  1390,  1390,  1391,
    1392,  1392,  1392,  1392,  1393,  1393,  1393,  1394,  1395,  1395,
    1395,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,
    1396,  1397,  1397,  1397,  1397,  1397,  1398,  1398,  1398,  1399,
    1399,  1400,  1400,  1401,  1402,  1402,  1403,  1403,  1404,  1404,
    1404,  1405,  1405,  1405,  1405,  1406,  1406,  1406,  1407,  1407,
    1408,  1409,  1409,  1410,  1411,  1412,  1413,  1413,  1414,  1414,
    1415,  1415,  1415,  1416,  1416,  1416,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,  1417,
    1417,  1417,  1417,  1417,  1417,  1417,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1420,  1419,  1421,
    1421,  1423,  1422,  1424,  1422,  1425,  1422,  1427,  1426,  1426,
    1428,  1428,  1430,  1429,  1431,  1429,  1433,  1432,  1432,  1434,
    1434,  1434,  1435,  1435,  1435,  1435,  1436,  1436,  1436,  1436,
    1437,  1439,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1440,  1440,  1440,  1441,  1441,  1441,  1441,  1442,  1443,  1444,
    1444,  1445,  1445,  1445,  1445,  1446,  1446,  1446,  1447,  1447,
    1447,  1447,  1447,  1449,  1448,  1450,  1450,  1451,  1451,  1452,
    1453,  1453,  1453,  1453,  1455,  1454,  1456,  1456,  1457,  1456,
    1458,  1458,  1459,  1459,  1460,  1460,  1460,  1460,  1461,  1460,
    1462,  1462,  1462,  1462,  1462,  1463,  1464,  1464,  1464,  1464,
    1464,  1465,  1466,  1466,  1466,  1466,  1467,  1467,  1468,  1468,
    1469,  1469,  1470,  1470,  1472,  1471,  1473,  1471,  1474,  1471,
    1475,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,
    1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,
    1471,  1471,  1471,  1471,  1471,  1471,  1471,  1471,  1476,  1476,
    1477,  1477,  1478,  1478,  1478,  1479,  1479,  1479,  1479,  1480,
    1480,  1481,  1481,  1482,  1482,  1482,  1482,  1482,  1483,  1483,
    1484,  1484,  1485,  1486,  1486,  1486,  1486,  1486,  1487,  1487,
    1488,  1488,  1489,  1489,  1490,  1490,  1490,  1490,  1490,  1491,
    1491,  1492,  1493,  1493,  1493,  1493,  1493,  1493,  1495,  1494,
    1494,  1496,  1494,  1497,  1499,  1498,  1500,  1500,  1501,  1501,
    1501,  1502,  1502,  1502,  1503,  1503,  1504,  1505,  1506,  1506,
    1507,  1508,  1509,  1509,  1511,  1510,  1512,  1512,  1512,  1513,
    1513,  1515,  1514,  1516,  1516,  1517,  1517,  1517,  1518,  1518,
    1519,  1520,  1519,  1521,  1522,  1523,  1524,  1524,  1525,  1525,
    1526,  1526,  1526,  1526,  1526,  1526,  1526,  1526,  1527,  1527,
    1527,  1528,  1528,  1528,  1528,  1528,  1529,  1529,  1529,  1529,
    1529,  1529,  1530,  1530,  1531,  1532,  1533,  1533,  1533,  1534,
    1535,  1535,  1535,  1536,  1536,  1536,  1538,  1537,  1539,  1539,
    1540,  1540,  1542,  1541,  1544,  1543,  1543,  1545,  1545,  1547,
    1546,  1548,  1548,  1548,  1548,  1550,  1551,  1552,  1549,  1553,
    1553,  1555,  1556,  1557,  1558,  1559,  1554,  1561,  1562,  1563,
    1564,  1560,  1565,  1565,  1565,  1565,  1565,  1565,  1566,  1566,
    1566,  1567,  1567,  1568,  1568,  1568,  1569,  1569,  1570,  1571,
    1570,  1572,  1572,  1573,  1574
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     4,     1,     2,
       0,     4,     0,     2,     3,     1,     2,     0,     3,     3,
       0,     7,     0,     0,    14,     0,     0,    14,     0,     6,
       0,     3,     4,     4,     3,     2,    10,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     0,    13,     0,     6,
       2,     0,     1,     3,     1,     0,     2,     0,     2,     0,
       1,     3,     4,     0,     2,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     0,     2,     0,     2,     2,     2,     2,
       2,     3,     3,     1,     1,     1,     2,     3,     3,     0,
       4,     0,     3,     0,     1,     3,     1,     0,     1,     3,
       1,     0,     3,     0,     1,     3,     1,     4,     0,     1,
       1,     1,     0,     3,     2,     3,     0,     3,     0,     5,
       5,     0,     7,     0,     6,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     5,     0,     2,     0,     3,     0,     2,
       2,     2,     2,     0,     6,     2,     0,     2,     1,     1,
       3,     0,     0,     0,     7,     0,     2,     2,     1,     1,
       0,     0,     8,     0,     6,     1,     2,     1,     2,     0,
       0,     6,     0,     0,     6,     0,     2,     0,     5,     0,
       1,     0,     5,     0,     2,     0,     5,     4,     0,     0,
       8,     0,     0,     8,     1,     1,     1,     1,     1,     2,
       4,     5,     0,     4,     4,     4,     3,     3,     2,     2,
       0,     2,     1,     2,     3,     1,     1,     1,     0,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     2,     3,     1,     1,
       1,     2,     2,     2,     1,     1,     1,     1,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     4,     1,     1,
       1,     1,     2,     3,     2,     4,     5,     0,     5,     0,
       0,     5,     0,     7,     1,     0,     1,     0,     4,     0,
       0,     3,     5,     5,     0,     4,     2,     2,     2,     2,
       0,     1,     0,     1,     1,     3,     1,     4,     5,     5,
       0,     2,     0,     0,     7,     0,     9,     1,     3,     1,
       1,     0,     2,     0,     3,     1,     3,     0,     6,     1,
       0,     0,     5,     0,     4,     1,     1,     1,     3,     1,
       3,     0,     0,     5,     1,     3,     1,     1,     0,     3,
       1,     3,     0,     4,     1,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     0,     1,     1,     2,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     0,     6,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     2,     2,     7,
       8,     8,     8,     2,     0,     1,     4,     0,     1,     2,
       0,     4,     3,     3,     3,     1,     2,     1,     1,     3,
       2,     3,     2,     2,     1,     3,     3,     2,     3,     1,
       2,     2,     2,     1,     2,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     0,     6,     0,     6,
       2,     1,     1,     1,     2,     2,     1,     2,     1,     2,
       3,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       0,     1,     1,     5,     0,     3,     0,     2,     3,     0,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       0,     1,     0,     1,     0,     1,     2,     1,     1,     2,
       2,     3,     1,     3,     2,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     0,     1,     1,     2,
       2,     1,     2,     2,     0,     1,     1,     1,     3,     1,
       3,     0,     1,     0,     4,     1,     1,     1,     0,     1,
       2,     1,     1,     2,     1,     3,     3,     1,     1,     0,
       2,     0,     1,     5,     0,     3,     3,     1,     0,     2,
       2,     2,     0,     3,     3,     6,     6,     1,     1,     2,
       2,     2,     1,     2,     2,     1,     1,     0,     1,     1,
       1,     1,     0,     1,     1,     0,     1,     2,     0,     1,
       0,     1,     1,     2,     1,     2,     2,     2,     3,     2,
       1,     1,     1,     3,     1,     1,     1,     4,     2,     1,
       4,     0,     1,     0,     2,     1,     3,     0,     6,     0,
       5,     7,     0,     5,     0,     5,     0,     5,     0,     4,
       0,    10,     3,     4,     3,     3,     7,     4,     3,     5,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     3,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       7,     3,     1,     1,     0,     5,     0,     3,     2,     0,
       5,     0,     0,     6,     1,     3,     1,     1,     3,     2,
       3,     2,     4,     0,     6,     0,     0,     8,     4,     4,
       3,     3,     2,     2,     6,     5,     3,     5,     1,     1,
       1,     1,     1,     0,     1,     1,     2,     2,     3,     3,
       3,     3,     0,     1,     0,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     3,     0,     1,     1,
       3,     3,     2,     2,     0,     5,     0,     1,     1,     0,
       6,     0,     1,     1,     2,     1,     1,     1,     0,     5,
       2,     0,     5,     0,     1,     1,     2,     1,     1,     1,
       1,     1,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     2,     3,     2,     3,     0,     3,
       0,     0,     6,     2,     1,     1,     2,     2,     8,     4,
       0,     1,     2,     1,     1,     1,     1,     0,     2,     4,
       3,     1,     1,     3,     4,     0,     0,     0,     2,     2,
       1,     1,     0,     2,     3,     3,     2,     3,     4,     3,
       4,     3,     4,     1,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     3,     2,     2,     2,
       2,     3,     3,     5,     6,     4,     4,     7,     2,     6,
       5,     6,     6,     4,     4,     5,     4,     6,     2,     4,
       4,     4,    10,     6,     8,     6,     4,     4,     6,     4,
       4,     4,     6,     4,     7,     7,     7,     6,     6,     6,
       6,     3,     4,     6,     8,     2,     2,     8,     8,     6,
       6,     1,     6,     6,     8,     8,     6,     8,     6,     2,
       8,     8,     2,     2,     2,     4,     4,     4,     4,     3,
       8,     6,     8,     4,     6,     4,     4,     4,     6,     8,
       4,     3,     6,     4,     6,     5,     8,     7,    10,     0,
       5,     6,     2,     3,     0,     4,     0,     3,     0,     1,
       1,     3,     4,     4,     5,     4,     4,     4,     5,     4,
       0,     0,     7,     4,     5,     4,     5,     4,     4,     4,
       4,     4,     5,     0,     8,     0,     3,     3,     1,     4,
       0,     1,     0,     2,     0,     1,     0,     3,     2,     3,
       2,     1,     2,     1,     2,     1,     2,     2,     2,     0,
       1,     1,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     3,     0,     6,     0,     6,     0,     8,     4,     0,
       8,     0,    10,     6,     0,     8,     0,    10,     6,     1,
       2,     2,     0,     1,     5,     0,     5,     3,     5,     2,
       0,     0,     7,     1,     0,     0,     6,     0,     3,     0,
       0,     5,     0,     1,     0,     1,     0,     2,     3,     3,
       1,     1,     0,     7,     0,     7,     1,     2,     0,     0,
       2,     0,     2,     0,     1,     1,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     0,
       2,     0,     1,     0,     0,     3,     0,     0,     3,     2,
       0,     0,     4,     4,     2,     0,     1,     1,     3,     3,
       1,     2,     0,     1,     0,     4,     4,     2,     0,     1,
       1,     0,     1,     0,     1,     2,     1,     3,     3,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       0,     6,     0,     1,     3,     1,     0,     2,     3,     1,
       2,     1,     0,     3,     0,     0,     7,     2,     1,     0,
       3,     0,     7,     0,     0,     8,     4,     6,     4,     4,
       4,     0,     6,     4,     4,     4,     5,     4,     1,     3,
       1,     2,     1,     3,     1,     0,     2,     0,     1,     0,
       1,     1,     2,     3,     1,     1,     0,     0,     8,     0,
       0,     6,     0,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     3,     4,     0,     3,     3,     1,     2,     2,
       0,     3,     0,     5,     3,     1,     3,     1,     3,     1,
       1,     0,     1,     0,     4,     0,     1,     3,     1,     1,
       1,     1,     1,     0,     0,     6,     0,     0,    11,     3,
       1,     3,     3,     1,     3,     0,     1,     0,     4,     0,
       7,     0,     5,     0,     6,     1,     3,     2,     4,     0,
       2,     0,     2,     1,     1,     1,     0,     4,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     1,     3,     3,     6,     2,     2,     0,
       6,     0,     6,     5,     2,     1,     5,     5,     2,     2,
       1,     4,     3,     2,     3,     2,     2,     1,     3,     4,
       3,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     0,     1,     0,
       2,     0,     1,     1,     1,     0,     2,     0,     2,     0,
       2,     2,     0,     4,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     4,     0,     0,
       5,     1,     0,     3,     0,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     0,     1,     0,     3,     3,     1,     0,     3,     1,
       2,     0,     1,     0,     3,     3,     2,     2,     3,     0,
       1,     1,     2,     0,     0,     0,     0,    22,     1,     1,
       0,     1,     0,     1,     1,     0,     1,     1,     0,     2,
       2,     1,     3,     4,     3,     3,     0,     2,     2,     1,
       3,     3,     0,     4,     0,     3,     1,     1,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     3,     1,     5,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     2,     1,
       1,     3,     5,     1,     1,     1,     1,     1,     3,     4,
       5,     1,     5,     3,     2,     1,     3,     2,     2,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     4,     0,
       1,     0,     3,     0,     3,     0,     3,     0,     3,     2,
       0,     2,     0,     2,     0,     4,     0,     3,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     2,     2,     2,
       3,     0,     4,     4,     6,     2,     3,     3,     3,     5,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     2,
       2,     2,     2,     2,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     0,     4,     1,     1,     1,     3,     3,
       1,     1,     2,     2,     0,     3,     4,     3,     0,     7,
       1,     2,     1,     1,     1,     1,     1,     1,     0,     5,
       1,     1,     1,     1,     1,     3,     6,     6,     6,     7,
       5,     3,     8,     8,     8,     6,     0,     1,     1,     2,
       0,     1,     1,     3,     0,     3,     0,     3,     0,     3,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     3,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     0,     1,
       3,     1,     2,     2,     2,     1,     3,     3,     1,     1,
       3,     1,     3,     4,     5,     4,     6,     1,     0,     3,
       3,     1,     1,     0,     2,     2,     2,     2,     0,     2,
       0,     3,     2,     1,     2,     2,     2,     2,     2,     0,
       1,     2,     2,     2,     3,     3,     3,     3,     0,     3,
       3,     0,     4,     1,     0,     3,     0,     1,     0,     3,
       2,     0,     1,     2,     0,     1,     1,     4,     4,     5,
       2,     3,     0,     1,     0,     4,     0,     1,     1,     0,
       1,     0,     2,     2,     1,     0,     1,     1,     2,     3,
       2,     0,     6,     3,     0,     0,     0,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     1,     2,     1,     2,
       3,     3,     3,     0,     3,     3,     0,     7,     0,     3,
       1,     3,     0,     3,     0,     3,     4,     1,     3,     0,
       3,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2534,  1005,  2464,     0,     0,     0,     0,     0,     0,
    2466,    90,    65,  1627,  1741,  1742,  1529,  1557,     2,     0,
    1005,   236,   140,     0,    77,  2463,  2476,  2458,  1566,     0,
    1789,     0,     0,  1005,   450,     0,  1783,     0,     0,  1005,
    1569,  1773,   213,   140,  2466,     0,  1050,  2259,  1665,     0,
       0,  1648,     0,  2334,  1616,     0,     0,     0,     0,     3,
       8,    21,     0,    41,    26,    31,    15,    20,    14,    54,
      48,    28,    39,    11,    56,    17,    45,    12,    13,    16,
      37,    44,    38,    40,    52,  1041,    24,    25,    32,    46,
      60,    22,    57,    55,    23,  1734,    27,    47,    42,    34,
      61,    35,    53,    36,    59,    30,    49,    29,    63,    10,
       9,    19,    18,    50,    51,    43,    62,    33,    58,     0,
     878,     0,     0,   955,     0,     0,     0,     0,   140,     0,
     858,  2532,  2533,  2534,  1007,  1006,     0,  2466,  1893,   990,
    1016,  1956,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1907,
    1964,  1966,  1965,  1967,  1968,  1908,  1909,  1969,  1970,  1971,
    1973,  1972,  1974,  1910,  1911,  1975,  1976,  1977,  1978,  1912,
    1913,  1979,  1981,  1980,  1914,  1982,  1983,  1984,  1987,  1986,
    1985,  1915,  1988,  1916,  1989,  1990,  1991,  1992,  1993,  1994,
    1995,  1997,  1996,  1917,  1998,  1999,  2000,  2001,  2002,  2004,
    2003,  2005,  2006,  2007,  1918,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  2016,  1919,  2017,  2018,  2019,  2039,  1920,
    2020,  2023,  2022,  2021,  2024,  2025,  2026,  2028,  2027,  2029,
    2030,  1921,  2031,  2032,  2033,  2034,  2035,  2037,  2036,  2041,
    2042,  2043,  1922,  1923,  2038,  2040,  2237,  2044,  2046,  2045,
    2047,  2049,  2048,  1924,  2050,  1925,  1926,  2051,  2052,  1891,
    2053,  1892,  2054,  2056,  2057,  2058,  2063,  1927,  2055,  2059,
    2060,  2061,  2062,  2064,  1928,  2065,  2066,  2067,  2068,  2069,
    2070,  2071,  2072,  2073,  2074,  2096,  2085,  2087,  2078,  2080,
    2081,  2083,  2079,  2086,  2084,  2090,  2089,  2091,  2092,  2093,
    2094,  2095,  2088,  2076,  2082,  2077,  2097,  2098,  2075,  2099,
    2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,  2108,  2109,
    2111,  2110,  2112,  2113,  2114,  2115,  2116,  2117,  2119,  2118,
    2120,  2121,  2122,  2124,  2123,  2126,  2127,  1929,  2125,  2128,
    2129,  2130,  2131,  2132,  2133,  1930,  1931,  1932,  2134,  2135,
    1933,  2136,  2138,  2137,  2139,  2140,  2141,  2142,  2143,  2144,
    2145,  1934,  1935,  2146,  2147,  2148,  2149,  2150,  2151,  2152,
    2153,  2154,  2155,  2156,  2157,  2158,  2159,  2161,  2160,  2162,
    2163,  2164,  2165,  2166,  2167,  2168,  1936,  2169,  1937,  2170,
    2171,  1938,  2172,  1939,  2173,  2174,  2175,  2176,  1940,  2177,
    2178,  2179,  2181,  2182,  2180,  2183,  1941,  2184,  2185,  2186,
    1942,  2188,  2187,  2189,  1943,  2191,  2192,  1944,  2190,  1946,
    2193,  2194,  1945,  1947,  2195,  2196,  2197,  2198,  2199,  2201,
    2200,  2202,  2203,  2204,  1948,  2205,  2206,  2207,  2208,  1949,
    2209,  2210,  2211,  2212,  2213,  2215,  2214,  2216,  2217,  2218,
    2219,  2221,  2223,  2222,  2220,  2224,  2225,  2226,  2227,  2230,
    2231,  2232,  2233,  2228,  2229,  1950,  2234,  2235,  2236,  2238,
    2239,  2241,  2240,  1951,  1952,  2242,  2243,  1955,  2244,  2245,
    2248,  2246,  2247,  2250,  2249,  2251,  2253,  2252,  1953,  2254,
    1954,  2255,  2256,   159,  1896,   142,  1897,  1906,     0,  2326,
    2325,   974,   991,  2467,  2468,   543,   814,     0,     0,     0,
     542,   813,   140,  2534,    95,     0,   539,   540,     0,     0,
    1641,     0,  1555,  1555,  1555,     0,     0,  1555,  1555,     0,
    1558,  1555,   140,  1555,     0,    70,  1746,   237,     0,     0,
       0,     0,     0,  1890,     0,  2461,     0,     0,  1572,     0,
    1790,  1791,     0,  1798,     0,  1799,  1793,  2323,     0,     0,
       0,     0,     0,   140,  1008,     0,  1625,     0,   203,   212,
     214,   215,   211,     0,  2468,  2480,  1042,  1048,  1060,  2260,
    2257,  1721,   215,   967,  1649,  1646,     0,     0,  1625,  1792,
    2591,     0,     0,     0,  2587,     0,  2592,     0,  1050,     0,
       0,     1,     5,     0,     0,     0,  1732,  1885,     0,   849,
     879,     0,   854,     0,   852,  1902,  1901,  1900,     0,   865,
     864,   862,     0,   414,     0,     0,     0,  2543,   856,   988,
    2465,     0,   161,     0,    79,     0,     0,     0,  2471,     0,
       0,     0,     0,    94,     0,     0,     0,    91,  1075,  1075,
    2534,  2536,  2538,   543,   541,     0,     0,  1645,  1644,  1643,
       0,  1641,  1957,  1907,  1968,     0,  1858,     0,     0,     0,
    1327,     0,  1912,     0,  1982,  1984,     0,     0,  1082,  1082,
     686,     0,     0,     0,  2006,  2007,  1864,     0,     0,     0,
    1855,  1865,  1923,  2047,     0,  1857,  2052,     0,     0,     0,
       0,  1862,     0,     0,  2106,  2108,     0,     0,  2112,  1841,
    1147,     0,   686,  1854,  1861,  2131,  1847,  2139,     0,  2154,
       0,     0,  2176,     0,  2182,  2180,  2186,     0,     0,  2212,
       0,     0,   686,  1840,  2230,  2231,  2232,  2233,     0,  1856,
    1950,  1863,     0,  2244,  1082,   686,   686,     0,     0,     0,
    2251,  2253,  2256,     0,     0,     0,  2504,  1146,     0,  1295,
       0,  1221,  1321,  1104,  1110,  1124,     0,  1139,  1157,  1158,
    1160,  1159,  1165,  1164,  1530,  1851,  1163,  1162,  1852,  1853,
    1156,  1875,  1896,  1874,     0,     0,     0,     0,     0,     0,
       0,     0,  1559,     0,     0,  1541,  1555,    72,     0,     0,
    2370,  2385,  2386,  2382,  2387,  2405,  2388,  2392,     0,  2384,
    2376,     0,  2391,     0,  2380,  2389,     0,  2374,     0,  2390,
    2395,  2406,  2378,  2383,  2361,     0,  2368,  2372,  1887,  1436,
    2337,  2338,     0,    78,     0,  2460,  1721,  1721,     0,  2459,
    1574,  1575,  1573,   954,     0,  1788,     0,  1802,     0,  1003,
     460,   451,     0,  1716,  1715,     0,  1784,  2481,     0,     0,
     979,  1577,  1626,     0,  1576,  1779,     0,  1777,  1774,  1776,
     204,     0,     0,   234,  2370,     0,  2355,     0,  2474,  2471,
    2482,  2517,  2512,  2511,  2514,  2515,  1066,  2516,  1065,  2513,
    2510,  1075,  1061,  1063,  1064,     0,     0,   730,     0,  1729,
       0,     0,  1729,     0,  1471,  1719,  1722,     0,  2283,  1697,
     811,   810,   809,  2284,  1715,     0,  1673,  1685,     0,  1650,
    1690,     0,  2285,     0,  1718,     0,  1471,  1729,     0,  1666,
       0,     0,     0,     0,   210,     0,     0,   966,   968,   969,
       0,  2604,  2335,   954,  1846,  1845,  1894,  2588,  1844,  2596,
    2598,  2584,  2586,  2593,  1044,     0,  2486,     6,    64,  1736,
    1737,  1738,  1739,  1740,  1735,  1743,  2541,  2542,  2540,   746,
       0,  1082,  1903,  2535,   143,   863,     0,   415,   143,     0,
       0,     0,     0,     0,   416,   417,   349,   867,     0,   847,
     860,     0,     0,   859,  2543,     0,     0,  1018,  1020,  1019,
    1035,   163,   160,   141,   976,  1548,  1550,   993,  2470,     0,
       0,  2472,  2477,  1145,  1144,     0,    88,    93,     0,     0,
       0,  2427,    92,  2421,  2539,  1075,  1075,  1075,  2531,     0,
    2519,  2526,  2527,  2530,  2529,  2528,  2525,     0,  2518,  2521,
    2522,  2524,  2523,  2543,  2537,     0,   815,   815,     0,  1628,
    1631,  1635,  1639,  1642,     0,     0,  1441,  1178,  1441,  1441,
    1441,  1328,     0,     0,     0,     0,     0,     0,     0,  1441,
       0,  1215,  1188,     0,  1216,     0,     0,     0,  1866,     0,
       0,     0,  2504,     0,     0,     0,  1300,     0,     0,     0,
    2504,     0,     0,     0,     0,  1323,  1325,  1874,  1441,     0,
       0,  1441,     0,     0,  1097,   726,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1441,  1441,     0,
       0,  1441,  1229,  1868,     0,     0,     0,  1867,     0,     0,
       0,  1860,  1859,  1842,     0,  1232,  1234,  1233,     0,  1441,
    1441,     0,     0,     0,  1168,  1167,  1169,     0,     0,     0,
       0,     0,     0,  1143,  1142,  1141,  1140,     0,     0,     0,
    1148,     0,  1149,  1150,     0,  1151,  1152,  1153,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1170,     0,     0,
       0,  1843,  1259,     0,  1556,  1536,  1543,  1538,     0,  1559,
    1539,  1547,   429,   428,  1564,  1565,  1545,  1560,  1561,     0,
    1544,  2419,  1540,     0,  1531,     0,    71,     0,  1769,     0,
       0,     0,  1765,  1767,  1766,     0,     0,  1770,     0,  1768,
    1747,  1751,  1757,  1748,     0,     0,   235,   238,   240,     0,
     243,  2371,  2369,  2403,  2402,  2407,     0,  2404,  2400,  2393,
    2428,  2397,     0,  2428,  2399,  2398,  2428,  2394,  2401,  2428,
    2366,     0,  1437,  1438,     0,  2336,     0,  1886,   730,     0,
    2279,  2280,  2119,  2139,  2281,     0,     0,  2300,  2462,  2276,
    2278,     0,     0,     0,  2449,     0,  2453,  2452,     0,     0,
       0,  1025,  1803,  1804,  1800,  1436,  2324,  2327,     0,   461,
       0,     0,   470,     0,     0,    67,    68,     0,  1010,     0,
    1009,  1013,     0,     0,     0,  1580,  1570,  1579,  1362,  1780,
    1781,     0,   202,   227,   222,   230,   224,   226,   225,   231,
     232,   233,   228,   223,   229,   216,     0,  2369,     0,  2366,
    2475,     0,  2478,  2495,  1049,  2483,  1072,  1051,  1071,     0,
    1062,  2228,  2258,  2265,  2261,  1725,   729,     0,     0,  1696,
       0,   543,     0,     0,     0,     0,     0,     0,  1667,     0,
       0,   586,     0,  1689,  1472,  1723,  1724,  1729,     0,     0,
    1729,     0,  1702,  1719,     0,  1729,  1662,     0,     0,  1654,
    1659,  1655,     0,  1661,  1660,  1663,  1651,  1652,  1725,  1678,
    1703,  1719,  1688,  1695,     0,  1677,  1684,     0,  1693,  1719,
    1719,  1729,  1729,   972,   973,     0,     0,  1647,  1365,     0,
       0,  2585,  2599,  2583,  2594,  2595,  2582,  1045,  2487,  1043,
    2488,     0,     7,     4,  1733,  1744,  1745,   747,   746,   534,
     537,   536,     0,     0,  1905,     0,   855,     0,   403,   853,
       0,     0,   381,   360,   381,   418,     0,     0,   746,   870,
       0,     0,   857,   989,     0,     0,   449,  1035,  1022,  1037,
       0,   164,   166,   978,   977,     0,   975,  1001,  1000,   998,
       0,   999,   997,   992,   994,   995,  2469,  2473,   544,   746,
     391,     0,   352,     0,     0,     0,     0,     0,   543,     0,
       0,  2520,    80,   816,     0,     0,  1633,  1552,  1362,  1554,
    1885,     0,     0,     0,  1637,     0,     0,  1442,  1441,     0,
    1306,     0,     0,     0,     0,  1329,     0,     0,     0,     0,
       0,     0,  1280,     0,  1306,  1083,     0,   687,  1239,     0,
       0,     0,     0,     0,     0,  1412,  1413,  1414,  1415,  1423,
    1416,  1417,  1418,  1425,  1430,  1419,  1420,  1426,  1427,  1428,
    1421,  1429,  1424,  1422,  1431,     0,  1411,     0,  1435,  1432,
    1434,  1433,     0,  1301,  1293,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1441,     0,     0,     0,  1441,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1251,     0,     0,     0,     0,     0,  1441,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1211,
       0,  1877,  1876,     0,     0,     0,   779,     0,  1172,     0,
    1171,  1374,     0,  2489,  2505,     0,  2286,  1296,  1298,     0,
    1095,  1094,  1096,  1107,  1100,  1105,  1098,  1102,     0,  1154,
    1963,  1108,     0,     0,  1136,  2504,  1450,  1137,  1122,  1127,
    1128,     0,  1125,  1126,     0,  1130,     0,  1129,  1133,  1134,
    1135,  1138,     0,     0,     0,     0,  1161,  1166,  1322,  1075,
    1878,     0,  1533,  1546,  1717,  1562,  1601,     0,   956,     0,
       0,    73,    75,  1762,  1759,  1758,  1760,  1764,  1763,  1761,
       0,  1771,  2006,  2230,  2233,   247,     0,   220,   219,   221,
     244,     0,     0,  2396,     0,  2377,     0,  2381,  2375,  2379,
       0,     0,  2367,     0,  2373,  1440,  2042,  2123,     0,  1443,
    2340,     0,   732,   734,  1599,  1600,   733,   742,     0,   731,
       0,     0,  2286,     0,   738,   740,   739,  2295,   737,     0,
       0,  2291,  2456,  2454,  2450,  2451,  2455,  2457,  1567,  2603,
       0,  1801,     0,     0,     0,  1004,     0,  1075,   459,   458,
     457,   456,     0,   472,   454,     0,    69,     0,     0,  1785,
       0,     0,     0,     0,   981,  1578,     0,     0,  1551,  1363,
    1782,  1778,  1775,     0,     0,     0,     0,     0,     0,     0,
    2479,  2497,  2496,  2484,  1075,  1462,  1076,  1076,  1874,     0,
       0,  2270,     0,  1727,  1730,  1731,     0,     0,  1711,  1705,
    1704,  1700,  1706,  1701,  1714,  1713,  1712,  1675,  1674,  1482,
    1483,  1481,  1475,  1476,  1480,  1479,  1670,  1720,  1710,  1708,
    1698,  1729,  1709,  1707,  1656,  1657,  1658,     0,  1471,     0,
    1727,  1729,  1719,     0,  1729,  1729,  1692,  1694,   971,   970,
    1383,  1382,     0,  1336,     0,  1338,  1335,  1334,  1333,     0,
    1382,  2589,  2597,  2601,     0,  1471,  2494,  2492,   535,  1601,
    1601,     0,  1904,     0,     0,     0,     0,     0,     0,     0,
     144,   153,     0,     0,   358,   359,  1601,   357,   404,   405,
     408,   409,   410,     0,     0,     0,     0,     0,     0,     0,
       0,    97,   411,  1601,  1601,   354,   382,   383,   386,   387,
     388,   389,   390,   350,     0,   355,     0,   868,   952,  1601,
     952,     0,  1601,  1601,   952,  1601,     0,     0,  1601,  1601,
       0,     0,  1601,     0,     0,   952,     0,  1601,     0,   939,
       0,     0,  1601,  1601,  1601,  1601,  1601,   952,     0,     0,
    1601,   449,  1601,     0,     0,   962,     0,     0,  1601,  1601,
    1601,  1601,     0,     0,  1601,     0,  1601,   886,   938,   547,
     573,   574,   848,   885,   887,   899,   445,     0,   917,   941,
     942,   940,     0,   872,   874,  2544,  2545,  2546,  1017,  1024,
    1021,  1035,  1033,  1023,   806,   805,     0,  1036,   162,     0,
    1549,  1002,   996,    89,   746,  1601,  1601,  1601,  1601,   356,
     392,   393,   396,   397,   398,   399,   402,   400,   401,     0,
       0,   368,     0,     0,  2422,     0,  2577,     0,     0,     0,
     142,   545,     0,     0,   817,     0,     0,     0,     0,  1629,
       0,  1888,  1636,  1365,  1640,  1639,     0,  1235,     0,  1273,
       0,  1275,  1276,  1277,     0,     0,     0,     0,     0,  1236,
       0,  1186,  1237,  1238,     0,     0,     0,  1279,     0,   688,
       0,     0,  1189,  1190,  1183,  1175,     0,     0,     0,     0,
    1191,     0,     0,     0,     0,     0,  1324,     0,  1326,  1878,
       0,  1285,  1243,  1196,     0,  1283,     0,  1197,  1245,  1246,
       0,  1247,     0,     0,  1250,     0,     0,  1199,  1289,  1287,
       0,     0,     0,     0,  1291,  1201,     0,     0,     0,  1200,
       0,     0,     0,     0,     0,     0,     0,  1203,     0,  1184,
    1288,  1290,  1253,     0,     0,     0,     0,     0,  1212,     0,
    2498,  1373,  2506,  1374,     0,     0,  2500,  2490,  2495,  2503,
    1176,     0,     0,     0,     0,     0,  1879,  1101,  1106,  1099,
    1103,  2504,     0,     0,     0,     0,  1120,  1119,     0,     0,
       0,  2504,  1450,  1123,     0,     0,  1269,  1270,  1319,     0,
    1537,  1534,  1563,  1602,     0,  2420,   958,   957,  1542,   956,
      76,     0,  1756,  1772,  1749,     0,   239,   248,   241,   245,
     246,   242,  2432,     0,  2431,     0,  2415,  2418,  1885,     0,
       0,     0,  2350,  2344,  2351,  2353,  2347,  2352,  2354,  2345,
    2346,  2341,  2348,  1444,  1473,  2302,     0,  2297,  2296,     0,
       0,     0,  2315,  2298,     0,     0,  2301,  2277,     0,     0,
       0,  1026,  1028,  1029,  1027,  1035,     0,     0,  2330,  2331,
    2329,  2328,   462,     0,  1507,  1508,  1493,  1494,  1492,  1495,
     471,  1496,  1506,     0,   483,     0,   462,  1787,  1786,     0,
    1011,  1014,  1015,   986,   985,   987,   980,   982,   983,   527,
    1584,     0,     0,     0,  1590,  1571,  1581,     0,     0,   217,
       0,     0,     0,     0,     0,     0,  1070,  1365,  1522,  1067,
    1055,  1473,  1463,  1054,  1077,  1073,     0,     0,     0,  2264,
    2303,  2304,  2307,  2228,  2266,  2267,  2272,  2262,  1726,     0,
    1679,     0,  1699,     0,     0,  1672,     0,  1691,  1653,  1681,
    1671,  1443,  1719,  1668,  1669,  1382,  1365,     0,     0,  1359,
    1384,     0,  1384,  1365,  1365,     0,  1365,  1362,  1379,     0,
       0,  2600,  1464,  2493,     0,     0,   851,   147,   150,   148,
       0,   149,     0,     0,   413,   412,     0,  1717,   406,   101,
     100,   102,   103,  1490,  1491,  1487,  1488,  1486,  1489,   105,
     104,    99,   866,     0,     0,     0,  1717,   384,   361,   362,
     365,   366,   367,     0,   953,   841,  1005,   921,     0,   618,
     841,   802,   807,   919,     0,     0,  1005,     0,     0,     0,
       0,     0,  1005,     0,     0,     0,  1601,     0,   932,   881,
       0,     0,     0,     0,     0,   933,     0,     0,   882,  1601,
       0,     0,     0,     0,     0,     0,  1005,     0,     0,   447,
       0,  1005,   449,   965,   964,   963,     0,  1005,  1005,     0,
       0,     0,     0,   579,   580,   578,     0,     0,   571,   548,
     746,   883,   446,   884,   617,     0,   959,   614,   620,  1881,
       0,     0,     0,   111,  2548,     0,  1403,   165,     0,     0,
       0,     0,  1717,   394,     0,     0,  1601,   351,   369,   370,
     373,   374,   375,   376,   377,   380,   378,   379,     0,  2423,
    2425,     0,     0,   345,   344,     0,   106,  2571,     0,     0,
     617,    81,   445,   546,   549,   834,   836,   835,   827,   826,
      82,    85,  1553,  1639,  1365,  1443,  1886,  1443,     0,  1638,
       0,     0,  1274,  1307,     0,  1330,     0,  1180,   700,   700,
     684,  1315,   680,   700,  1311,   684,  1313,     0,     0,     0,
       0,  1281,  1278,     0,     0,     0,     0,     0,  1304,     0,
       0,     0,  1185,     0,  1264,  1286,  1284,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1292,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   768,   774,   777,   778,   780,   772,     0,  1255,
    1173,  1075,  2507,  2509,  1046,     0,  2499,  2501,  2287,  2288,
    2289,   843,  1297,     0,  1117,  1113,     0,  1111,  1449,  1132,
    1131,     0,     0,     0,  1121,  1076,  1260,  1075,     0,  1320,
    1880,   943,   427,   585,  1532,    74,  1752,     0,     0,  2429,
       0,  2440,     0,     0,     0,     0,     0,     0,     0,  2339,
    1474,   745,   744,   743,   741,     0,     0,     0,     0,  2293,
       0,  2321,  2322,  2319,  2320,  2318,  2292,  1613,     0,  1035,
    1039,  1895,  1794,  2332,  2333,     0,   463,   464,   466,  1076,
     480,   460,     0,   452,   455,     0,     0,   984,  1060,     0,
    1603,  1588,  1595,  1589,     0,     0,     0,  1587,  1870,  1869,
    1876,  2482,     0,  1409,     0,     0,  2360,     0,     0,     0,
    2485,  1443,  1443,  1516,     0,     0,  1052,  1057,  1053,  1056,
       0,  1074,  1081,  1080,  1871,  1878,     0,  2309,  2310,     0,
       0,  2269,  2270,  2271,     0,  1500,  1501,  1499,  1497,  1498,
    1728,  1471,  1687,  1686,  1478,  1477,  1664,  1471,  1683,  1729,
       0,  2489,  1377,     0,  1361,  1360,  1385,     0,  1365,  1384,
    1384,     0,  1341,  1340,  1617,  1620,     0,  1339,  1436,  1367,
    1060,  2590,  2602,     0,   584,   583,   152,   151,   157,   158,
     431,   419,   430,   407,    98,   420,   421,   385,     0,   363,
     869,   619,   842,   904,     0,     0,     0,   807,   613,   841,
     815,   808,   841,   948,   949,     0,     0,   558,   555,   923,
     567,   902,   893,   903,   914,   916,     0,   557,   581,     0,
       0,   569,     0,   888,   930,   931,   956,   552,     0,     0,
     594,   595,   593,   575,   582,   950,   951,   553,   554,   925,
       0,  1458,  1460,  1468,   560,   559,     0,   556,     0,   901,
     936,   909,     0,   592,   590,   587,   589,   588,   591,   570,
     562,   561,   564,   563,   566,   565,   568,   898,     0,   952,
     952,   918,     0,   602,   603,   605,   606,  1884,     0,   961,
     920,     0,   607,   615,   608,     0,     0,     0,   121,     0,
       0,   871,     0,   114,   112,   123,     0,     0,     0,  1406,
       0,  1407,  1404,  1405,   426,   425,   424,   423,   395,     0,
       0,     0,  1717,   371,  2424,     0,     0,  2578,   348,   346,
     347,     0,     0,   167,   600,   601,   599,   598,     0,   434,
       0,   432,     0,   444,     0,  1805,   746,   550,     0,     0,
       0,  1443,  1462,  1889,  1632,     0,  1213,  1331,     0,     0,
     701,  1308,   754,     0,  1317,     0,  1318,   682,   681,  1310,
    1312,  1316,  1314,  1179,  1187,  1182,  1181,     0,     0,     0,
    1219,  1241,     0,  1220,  1302,  1305,     0,     0,  1193,     0,
    1195,     0,     0,  1266,  1244,  1222,  1248,     0,  1198,  1174,
       0,  1223,     0,  1228,  1226,     0,  1202,     0,     0,  1209,
       0,  1207,     0,  1208,     0,  1210,  1252,  1254,     0,     0,
     779,   765,   766,   767,     0,   769,   771,   773,     0,     0,
    1375,  2508,  1047,     0,     0,  1299,  1109,     0,  1118,  1115,
       0,  1112,  1077,  1271,  1261,  1535,   945,   944,  1754,     0,
    1750,   256,   251,   259,   253,   255,   254,   260,   261,   262,
     263,   257,   252,   258,   250,   249,  2430,     0,  2365,  2417,
    2416,  2433,  2433,  2433,     0,  1445,  2299,     0,     0,     0,
    2290,     0,  1568,  1030,  1035,  1039,     0,  1031,  1805,   467,
       0,     0,     0,   487,     0,   485,   453,  1012,  1075,  1585,
    1597,     0,  1605,     0,     0,  1582,  1592,     0,     0,     0,
    1591,   449,     0,   218,     0,  2357,  2358,  2356,  1473,  1451,
       0,     0,  1528,     0,  1523,  1068,     0,  1079,  1078,     0,
       0,     0,  2314,  2308,  2305,  2306,  2268,  2274,  2273,  1680,
    1682,  1676,  2495,  1436,  1369,  1365,  1337,  1365,  1348,     0,
       0,  1365,  1344,  1342,  1346,     0,  1443,     0,  1401,  1075,
    1873,  1465,  1468,   364,   906,     0,   841,   803,   804,   815,
       0,   815,     0,     0,   892,     0,   993,     0,   897,   742,
     576,   929,   928,     0,   577,     0,   890,     0,  1469,  1470,
    1461,   448,   889,   911,   895,  1771,   922,   617,   960,   784,
     676,   634,   625,   700,   628,   627,   662,   684,   639,   680,
     678,   656,   680,   680,   672,   646,   754,   754,   645,   675,
     754,     0,   663,   680,   668,   677,   661,   658,   674,   700,
     684,   684,   643,   673,   754,     0,   666,   700,   704,   754,
     761,     0,     0,   700,   702,  1883,   122,   110,     0,     0,
     873,   875,     0,     0,   876,  2550,     0,  2552,     0,  1038,
       0,     0,   353,   422,   372,  2426,     0,   178,  1075,     0,
       0,   168,   170,   171,     0,     0,     0,   545,  1807,  1806,
     433,   530,   551,     0,     0,  1639,  1634,  1484,     0,  1332,
       0,     0,     0,     0,   748,   759,   757,   751,     0,   755,
     756,  1309,     0,     0,  1282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1177,     0,  1262,     0,     0,
       0,     0,     0,     0,  1206,  1204,  1205,   763,  1257,     0,
     776,   770,   768,   775,     0,  1473,  2489,   844,  1114,     0,
    1272,   947,   946,     0,     0,     0,     0,  2438,  2438,  2438,
    1610,  1609,     0,  1608,  2317,  2316,  2294,  1614,  1032,  1040,
       0,   465,   468,     0,     0,     0,   484,     0,   528,     0,
       0,     0,  1606,  1594,  2486,  1583,  1586,  1878,  1364,  1410,
    2359,  1059,     0,  1446,  1527,  1524,     0,  1517,  1519,  1521,
       0,  1872,  2312,  2311,  2313,     0,  1370,  1368,  1378,     0,
    1333,  1365,  1365,     0,  1333,     0,     0,     0,  1619,  1462,
    1612,     0,  1611,     0,  1093,  1621,  1366,  1398,  1380,     0,
    1467,     0,     0,   905,     0,     0,     0,     0,     0,   935,
       0,   959,   894,   915,   937,     0,   704,  1005,  1459,   910,
     912,   981,     0,   604,     0,   788,   633,   626,   644,   642,
     689,   679,     0,   689,   689,   652,   662,   647,     0,   754,
     660,   651,   664,   667,   669,   671,   689,     0,   754,   641,
     640,   649,   637,   689,   712,     0,     0,     0,     0,   708,
       0,   782,     0,     0,   715,   621,   705,   707,     0,     0,
     665,   754,   630,   762,   761,   632,   754,   761,   689,     0,
     703,   689,     0,   108,   113,   124,   125,   861,  2549,     0,
    2547,     0,  1034,  1408,     0,     0,   181,   179,   180,     0,
     174,   176,   171,  2565,     0,  2572,     0,     0,  2570,   435,
     437,   445,   531,     0,     0,  1468,   839,     0,     0,  1630,
    1214,   698,   696,   699,   697,   750,   749,   753,     0,   752,
     761,   685,     0,  1217,  1218,  1242,  1303,  1294,  1240,     0,
    1194,  1263,     0,     0,  1249,  1224,  1227,  1225,  1230,  1231,
       0,  1256,     0,  1067,  1067,   596,  2502,  1116,  1755,  1753,
    2441,     0,     0,  2437,  2435,     0,  2436,  2434,  2408,     0,
    2363,  2364,  2362,  2349,     0,     0,     0,  1075,   473,     0,
     490,   489,   486,  1473,  1596,  1598,  1604,  1593,     0,  1447,
    1462,   735,  1520,     0,  1069,  2275,     0,  1349,     0,  1353,
    1358,  1354,     0,  1345,  1343,     0,  1484,  1086,     0,     0,
       0,  1402,     0,  1473,  1468,   908,     0,   616,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   934,  1848,   924,
     449,   926,   891,     0,   896,   572,     0,   787,     0,   792,
     693,   694,   695,   653,   690,   692,     0,   655,   624,   648,
     670,   654,     0,   650,   638,   718,   719,   721,   720,   717,
     727,   710,   728,     0,     0,   722,   723,   724,   716,   706,
     714,   709,   629,   631,   635,   636,   622,     0,   623,  1882,
     115,   877,   284,  2551,  2559,     0,  2561,  2554,    96,  2569,
    2579,   178,     0,     0,   119,     0,   169,   742,   172,  2486,
    1805,     0,   440,   818,     0,   838,     0,   820,  1485,   760,
     758,     0,     0,  1265,  1267,   764,     0,  1376,   597,  2414,
    2413,  2412,  2409,     0,     0,     0,     0,     0,     0,  2439,
    2443,  1607,     0,     0,     0,   481,     0,   477,   479,     0,
     515,   529,  1455,  1468,     0,  1473,     0,  1525,  1518,  1371,
       0,     0,     0,     0,     0,  1618,  1085,  1084,  1089,  1087,
    1091,     0,  1390,  1391,     0,     0,  1396,  1400,  1381,  1466,
     907,     0,     0,   818,     0,  1850,  1849,   900,   959,     0,
     785,     0,   789,   790,   791,     0,   783,   691,     0,   845,
       0,   711,   713,     0,   117,   310,     0,   296,   282,     0,
       0,     0,   286,   126,   129,   127,     0,   128,   134,     0,
     135,   136,   137,   138,   139,   130,   308,   309,   133,   131,
     132,     0,  1898,     0,  1899,  1050,     0,     0,  2557,     0,
    2553,  2482,   145,   175,     0,     0,   111,   120,  2573,   725,
     438,   436,     0,  2482,     0,  1601,    83,   819,   831,   830,
     822,  1468,     0,     0,    86,   821,   832,   824,   683,  1192,
    1258,  2410,  2444,  2447,  2445,  2446,  2448,  2442,     0,  1362,
    1076,     0,   474,   475,     0,   493,     0,  1601,     0,     0,
    1601,  1601,  1601,  1601,   508,   516,   518,     0,  1456,  1457,
       0,  1452,  1454,  1448,  1509,   736,  1808,  2489,  1350,     0,
    1355,     0,  1347,  1090,  1088,  1092,  1386,  1386,  1397,     0,
     818,   609,   820,   927,     0,   786,     0,     0,   754,     0,
     754,   116,     0,   109,     0,     0,   295,   298,     0,     0,
     301,   291,   290,   292,     0,   285,   284,   284,   338,   289,
     335,   334,   327,  2560,     0,  2486,     0,     0,     0,  2555,
    2580,   177,  1075,   123,     0,   442,   441,   829,     0,   943,
     823,   837,   840,     0,   943,   825,  1615,  1623,     0,  1795,
       0,   482,   481,   478,     0,   491,     0,  1601,  1601,     0,
       0,     0,     0,     0,   488,   517,  1601,  1468,     0,  1058,
       0,  1816,  1372,     0,     0,     0,  1394,  1392,   612,   611,
     610,     0,   798,     0,   797,     0,   794,   793,   657,   846,
     659,   118,   311,   322,   325,   317,   297,     0,     0,     0,
     287,   284,     0,   271,   269,   270,   276,   277,   278,   279,
     280,   281,   272,   275,   273,   274,   284,     0,   186,     0,
       0,  2558,  2556,     0,  2562,     0,   155,   154,   146,     0,
     284,  2566,     0,  2574,  2486,   828,    84,   833,    87,     0,
       0,   735,   469,   476,   501,   494,   497,     0,   526,     0,
       0,  1504,  1502,  1503,   522,  1505,   523,   521,   519,   512,
       0,   510,     0,  1453,  1510,     0,     0,     0,     0,  1809,
    1811,     0,  1526,  1352,  1357,     0,  1387,     0,     0,     0,
     913,   800,   801,   799,     0,     0,     0,     0,   284,   318,
       0,   293,     0,   302,     0,     0,   184,   341,   339,   182,
     329,   329,  2563,  2564,   156,  2581,     0,   125,   145,   443,
    1622,  1624,  1796,   501,     0,   499,     0,   495,   492,   496,
     524,   525,     0,   509,     0,   520,     0,     0,     0,     0,
       0,  1810,     0,     0,  1817,  1819,  1389,  1388,  1403,     0,
       0,     0,   319,   325,   315,   323,   284,     0,     0,   283,
       0,   337,   185,     0,     0,     0,   284,     0,   328,   330,
     332,     0,   107,  2575,  1822,   498,     0,   506,   502,   504,
     507,   515,   514,   511,  1512,  1814,  1815,     0,  1812,     0,
       0,  1818,     0,     0,   796,   795,     0,   316,     0,     0,
     314,   294,   299,   284,   342,   284,   196,   195,     0,   188,
     264,   336,     0,   187,  2567,   284,     0,  1808,   500,     0,
       0,   513,  1515,     0,  1513,  1813,  1821,  1820,  1395,  1393,
     320,     0,   284,     0,   284,     0,   284,     0,     0,     0,
       0,     0,   183,   284,  2576,     0,  1816,   505,   503,  1511,
       0,     0,   312,   284,   300,   305,     0,     0,   191,   265,
     266,     0,   193,  2568,     0,  1824,  1514,   284,   284,   301,
     304,   343,   340,     0,   267,   189,   190,   201,   200,     0,
    1823,     0,  1828,   284,   284,   306,   209,   207,   284,   197,
     205,   199,     0,   206,     0,   194,     0,     0,  1835,     0,
     192,   208,   268,  1826,  1827,  1825,  1830,     0,     0,  1832,
    1833,     0,  1797,   198,  1834,  1829,     0,  1836,  1838,     0,
    1831,     0,  1075,  1837,     0,  1076,  1839
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   603,  1433,    59,    60,    61,    62,    63,  1305,
      64,   797,  1216,  1691,  1692,    65,   544,    66,    67,  2041,
    2948,  3979,  2949,  3984,  1489,   513,   514,  1910,  1911,  1028,
    2932,  2901,  3700,  2905,  3814,  3943,  3856,  1993,  3254,  3701,
    3702,  3823,   539,  2039,  1446,  3970,  1890,  4068,  1891,    68,
     632,  1002,  1470,  1471,  3270,  3271,  3527,  3272,  3519,  3520,
    3521,  3522,  4196,  4041,  4139,  4197,  4269,  4303,  4309,  4238,
    4318,  4319,  4320,  4307,   871,  4321,    69,   570,   571,   873,
    1335,  1705,  1336,    70,    71,   538,  1236,  1237,  1238,  1239,
    2211,  1706,  2206,  2207,  3064,  4239,  4305,  4324,  4042,  4043,
    3950,  4044,  3826,  4045,  3954,  4046,  3829,  4047,  4048,  4049,
    4050,  4188,  4051,  3949,  4231,  4038,  4039,  4190,  4285,  4300,
    4052,  3836,  3944,  4126,  3837,  3945,  4183,  4034,  4184,  4226,
    4281,  4035,  4127,  4229,  4130,  4053,  4059,  4198,  4054,  4060,
    4055,  3841,  3961,  4058,  3959,  4057,  4194,  4193,  4265,  2515,
    2931,   619,   620,   643,  2031,   621,  1017,   975,  1448,  1923,
    1924,  2398,  2399,  2497,  2498,  2499,  1915,  1916,  1917,  2019,
    2020,  2021,  1897,  1898,  1899,  1452,  1894,  1895,   622,   976,
     986,  1918,  1919,  1920,  2503,  2023,  2024,  2025,  2026,  1204,
    1205,  2791,  2521,  2941,  3719,  3280,  3863,  4074,  2942,  2943,
    2472,  2856,  2002,    72,   559,   851,  1302,  2275,  1303,  2685,
    2686,  2687,  1768,  1769,  3598,  1773,  2274,  3755,  3992,  3756,
    3757,  2689,  3892,  2693,  3094,  3095,  3365,  3600,  3760,  4087,
    3994,  4158,  4085,  4154,  4086,  4156,  4250,  4208,  4209,  4004,
    4100,  4101,  4162,  4211,  3904,  3905,  3906,  2294,  2698,  3603,
    3533,  2013,  1438,  1439,   515,   516,   517,   640,  2522,  1978,
    2523,  2524,  2878,  1980,  1981,  2642,  1370,  2869,  2843,  3573,
    2938,  2882,  2883,  2884,  2885,  2886,  2892,  2808,  2408,  2409,
    2477,  2895,  3717,  3452,  3467,  3239,  3240,  3241,  3242,  3243,
    3244,  2966,  2967,  2964,  1074,  3663,  3664,  3665,  2960,  2961,
    3501,  3485,  3486,  3487,  3718,   761,  3681,  3298,  1736,  1737,
    3767,  1746,  1747,  2662,  2237,  2663,  1442,  3299,  3300,  3301,
    3495,  3019,  3570,  3025,  3026,  3027,  2602,  2603,  2604,  2605,
    2606,  2147,  3488,  2894,  3445,  3656,  3659,  3806,  4026,  2410,
    2809,  2411,  2812,   928,   518,  2412,  1503,  1504,  3866,  3874,
    3867,  3875,  3868,  3869,  3870,  3877,  2528,  3534,  3535,  2801,
    3035,  3808,    73,  1458,   969,   978,   974,   994,   627,  1459,
     987,  1994,  2483,  3507,   609,  1982,  3437,  3176,  3441,  1983,
    2822,  1984,  3164,  3423,  1985,  3193,  3439,  3653,  2823,  2824,
    1986,  1987,  1988,  3175,  3185,  3798,  3045,  3046,  3047,  2413,
     129,  2198,  2890,  2456,    74,   937,   938,   939,    75,   635,
    1476,    76,  1313,  2286,  2287,  2288,    77,   995,    78,    79,
     636,  1483,  1484,  1485,    80,  1298,   136,    81,   859,  1308,
    1310,  1311,    82,   631,   996,   997,   998,   999,  1998,    83,
    1760,  2251,  2252,  2253,  2254,  1467,  2485,  1468,  1469,  2007,
    3087,    84,    85,   600,  2155,   576,   880,   577,   578,  1805,
    2309,  3574,   891,   892,   893,  2726,  1347,  1348,  1349,  2314,
    2731,  1071,  3412,   762,   763,   764,   765,  1158,  1159,  3489,
     766,  1168,  1652,   767,   768,   769,   770,   771,  1679,  2992,
    2993,  3317,  2185,  2186,  2187,   772,  2076,  2977,  2089,   773,
    1151,  1637,  1574,  3309,  2984,  1519,  2060,  2557,  2638,  2149,
    1094,  1095,  1062,  2067,  1525,  1863,  1864,  1865,  1866,  1867,
    3406,  3405,  3407,  3770,  3618,  3772,  3622,  2354,  1788,  1789,
    1868,  1869,  2760,  3616,  3917,  2150,  2151,  2152,  3335,  2761,
    3145,  2779,  2780,  3633,  2345,  1870,  2767,  4016,  3785,  3786,
    4119,  4118,  3787,  3631,  3632,  3416,  3417,  2910,  2911,  2912,
    2712,  1565,  1566,  1572,  1264,  1265,  1520,  2234,  2658,  3610,
    3764,  2176,  3383,  3762,  3911,  1991,  2851,  2852,  2311,  2312,
    2783,  3161,  3190,  1373,  3575,  2660,  1832,  1833,  3539,  4308,
    2792,  2750,  4094,  2271,  2272,  4009,  4166,  4253,  4254,  3122,
    3123,  3387,  3388,  2313,  2723,  3124,  3611,  3916,    86,   521,
      87,  1689,  2191,  2641,  1213,  2203,  1005,  1315,  1506,  1507,
     785,   534,  1206,  1207,  1208,    88,   548,  2250,    89,   566,
    1786,   843,   863,  1316,  1317,  2295,  2699,  2706,  2296,  2711,
    3374,  2701,  3099,  3100,  2193,  2194,  2702,  3102,  3371,  3352,
    3353,  3415,  3082,  3595,    90,   588,  3156,  2774,  2775,  3986,
    3987,   864,    91,   520,  1049,  2535,  1512,  2048,  1050,  1051,
    2051,   660,   661,    92,   940,   585,  1395,  1396,  1397,  1848,
      93,   581,   929,  2751,  2757,  1827,   930,  1209,  1377,   932,
    1378,  1813,  2330,  1359,    94,   965,   605,   964,    95,  1434,
      96,   798,  1230,  1701,  2646,  3050,  3343,  1231,  1232,  2204,
      97,   567,   868,   869,  1320,  1791,    98,   561,   856,  1779,
      99,   552,   100,   101,   847,  3088,  4081,  4204,   556,  1762,
    1294,  3281,  4011,  4109,  4110,  4112,  4174,  4175,  4247,  4312,
    4335,  4328,  4338,  4339,  4342,  4347,  4348,   775,   947,   776,
    3647,   777,   778,   779,  2707,  2708,  3162,   780,  2709,   781,
    2478,  1006,  1509,   542,   494,   616,   948,  2682,   783,  3843,
     972,  1021,   496,   497,   102,   895,   580,  1352,  1811,  1809,
    1810,  2324,  2742,  2327,  2743,  2744,  3395,  1278,  1750,  1279,
     933,  2164,  2247,  1280,  2249,  1281,  2319,  2320,  2321,  2322,
    3133,  2243,  2676,   103,   848,   501,  1296,  1297,  2260,   104,
     587,   105,  1266,  1729,  1730,  2231,  2657,  2232,   106,   876,
     107,   824,  1723,   825,  1242,   826,   827,  1256,  1250,  1259,
    1253,  3743,  3587,  3588,  2219,  1212,  1022,  1023,  1715,  2213,
    2214,  3347,  3590,  3068,  3749,  3750,  1755,  1286,   839,   108,
     547,   834,   109,   110,   137,   504,   638,  1012,  1341,   111,
     112,   113,   114,   115,  1344,  1428,  2305,  1429,  2156,  1430,
    1431,  1877,  1803,  1633,  1634,  3033,  1148,  1149,  2159,  2611,
    2612,   894,   647,  1038,  1030,   130,   131,   132,   650,   651,
     133,   992,   993,  2484,  2907,  3256,  3510,  3511,  3706,  3851,
    3847,  3848,  3845,  3850,  1032,  3713,  4146,  4273,  1033,  1034,
    2933,  3715,  3974,  4148,  4245,  1035,  2512,  3267,  3852,  4070,
     116,   949,   597,  1426,  1421,  1423,  1873,  2361,   117,   118
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3656
static const int yypact[] =
{
    4477,  2197,  1414, -3656,  -162,   219, 46775,   118,  1357,  1357,
     440,  2881, -3656, -3656, -3656, -3656, -3656,  2733, -3656, 46775,
    1414,   990, -3656, 23886, -3656, -3656, -3656,  1137, -3656,   709,
     194,   165,  1357,  1414, -3656, 46775, -3656,   652,  1424,  1414,
   -3656, -3656, 41213, -3656,   440, 46775, -3656,   756, -3656, 41213,
     591,   729,   987, -3656, -3656, 46775,  1171,   517,  1403,  1297,
   -3656, -3656,  1150, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, 23886, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  1311,
   46775,  1413, 46775, -3656,  1382, 46775, 39359, 46775, -3656,  1129,
    1495, -3656, -3656,  1631, -3656, -3656,  1357,   440, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656,  1127, -3656, -3656,  1301, -3656,
   -3656, -3656, -3656, -3656,  1921,  1732, -3656,  1787, 39359, 46775,
   -3656, -3656, -3656,   215, -3656,  1429, -3656,  1469,  1828,  1860,
     965, 10634,  1845,  1845,  1845, 46775,  1915,  1845,  1845, 46775,
   -3656,  1845, -3656,  1845,  1357, -3656, -3656, -3656,  2006,  4506,
   46775,  1769,   462,   -95, 39359, -3656, 23886,  1155,  1745, 46775,
   -3656, -3656, 10634, -3656,  1904, -3656, -3656, -3656,  1357,  2106,
    1966,   250, 46775, -3656, -3656,  1357,  1387,  1421,  1563, -3656,
   -3656,  1693, -3656,  5153,   158, -3656, -3656, -3656,  1055, -3656,
   -3656,  5628,  1693,   -99, -3656, -3656, 46775,  1357,  1894, -3656,
   -3656,   256,   256,   256, -3656,   256, -3656,   256, -3656,   517,
    1543, -3656, -3656,  1544, 46775,   259, -3656,  1550,  1368, -3656,
    1608, 36269, -3656, 46775, -3656, -3656, -3656, -3656,  1831, -3656,
   -3656, -3656,  2055, -3656, 36269, 23886, 46775,  1698, -3656, -3656,
   -3656, 23886,  1579, 46775, -3656, 23886, 23886,   944,  1032,  1447,
   46775, 46775,  2035, -3656,  2220, 36269,  1803, -3656,   459,  1163,
    1631,  2228, -3656,  1732, -3656, 46775, 46775, -3656, -3656, -3656,
   41831,   965,  1596,  1628,  1637, 15746, -3656,  1645,  1651,  1666,
   10634,  1668,  1678,  1681,  1691,  1703,  1706,  1710,  1712,  1712,
    1715,  1718,  1725,  1728,  -187,  1738, -3656,  1747,  1752,  1763,
   -3656, -3656,  1765,  1770,  1772, -3656,  1789,  1807,  1813, 11273,
    1818, -3656, 20772,  1822,  1825,  1827,  1841,  1844,  1847, -3656,
   -3656, 10634,  1715, -3656, -3656,  1849, -3656,  1854,  1868,  1880,
    1884,  1886,  1889,  1898,  1917,  1919,  1933,  1940,  1947,  1949,
    1969,  1975,  1715, -3656,   473,  1982,  1998,   531,  2000, -3656,
    2004, -3656,   285,  2018,  1712,  1715,  1715,  2039,  2044,  2056,
    2075,  2092,  2095, 15746, 15746, 15746, 10634, -3656, 46775, -3656,
   46775, -3656,  1647,  3368, -3656,  2689, 15746,   973, -3656, -3656,
   -3656, -3656, -3656, -3656,  1696,  1820, -3656, -3656, -3656, -3656,
   -3656, -3656,  2097,  1773,  2170, 46775, 46775, 46775,  2079, 46775,
   46775, 39359,  1072, 46775, 36269, -3656,  1845,  1797,  3067, 28849,
    2102,  2098,  -123, -3656, -3656, -3656, -3656, -3656,  2225, -3656,
   -3656,  2090, -3656,  2274, -3656, -3656,   142, -3656,   208, -3656,
   -3656, -3656, -3656, -3656, -3656,  2333,  2105, -3656, -3656,    98,
   -3656, -3656, 46775, -3656, 25749, -3656,   975,  5628,  2721, -3656,
   -3656, -3656, -3656,  2523,  2249,  1647,  2700,  1006, 23886, -3656,
      78, -3656,   989, -3656, -3656,  2472, -3656, -3656, 36269, 23886,
   -3656, -3656, -3656, 21395, -3656, -3656,  2703, -3656,  2116, -3656,
   -3656,  1820,  3399, -3656,  2102,  2389, -3656,  2395,  2298,  1032,
    2185, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656,  2137,  1055, -3656, -3656, 26369,  2610, -3656,  2294,   -30,
    2141,   518,   -30, 36887,  2511,  1349, -3656,   363, -3656,  2595,
   -3656, -3656, -3656, -3656,  2260,  2242, -3656, -3656,   364,  2313,
   -3656,  2623, -3656,    67, -3656,  2264,  2511,   -30,  1349, -3656,
    2512,  2640,   471,  1264, -3656,   -71,  2710, -3656,  2159, -3656,
   23886, -3656, -3656,  2523, -3656, -3656, -3656,  2160, -3656,  2430,
    2267, -3656, -3656,    65, -3656,  2171,    11,  2658, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, 37505, -3656, -3656, -3656,  2693,
    2709,  1712,  2174, -3656, -3656, -3656,  2818, -3656, -3656,  2192,
    2724,  2724,  2724,  2827, -3656, -3656, -3656,  2195,  2441, -3656,
   -3656,  2363,  2234, -3656,  1698, 23886,  2604,  2210, -3656, -3656,
    2459, 10634, -3656, -3656,   211, -3656, -3656,   114, -3656,  2799,
    2421, -3656, -3656, -3656, -3656,  2694, -3656, -3656,  2818,  2753,
    2724,  2643,  2229, -3656, -3656, -3656, -3656, -3656, -3656,   249,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656,   253, -3656, -3656,
   -3656, -3656, -3656,  1698, -3656, 23886, -3656, -3656, 23886, -3656,
    2241, -3656,  2219, -3656, 10634, 10634,  1753,  2803,  2867,  2867,
    2867,  1647,  2270, 10634, 10634, 10634, 10634, 10634, 10634,  1795,
    2247, -3656, -3656,   -22, -3656,  2248, 10634, 10634, -3656, 10634,
   10634, 24507, -3656,  3890, 10634,   549,  2751, 10634, 10634, 10634,
   10634,  2762, 10634, 24507,  2878,  2251, -3656,  2254,  1837, 10634,
   10634,  1874, 10634, 10634, -3656, -3656, 10634, 10634, 15746, 10634,
   10634, 10634, 10634, 10634, 10634,  2255, 10634,  2867,  2867, 10634,
   10634,  1878, -3656, -3656, 10634,  2422,  2422, -3656, 10634,  7439,
   10634, -3656, -3656, -3656,  2262, -3656, -3656, -3656, 24507,  2867,
    2867, 10634, 10634, 10634,  2803,  2803,  2803,   308,  2265,  1165,
   10634, 26989,  2261, -3656, -3656, -3656, -3656, 10634, 10634, 10634,
   -3656, 15746, -3656, -3656,  2368, -3656, -3656, -3656, 11912, 15746,
   15746,  2272, 15746, 15746, 15746, 15746, 15746,  2641, 15746, 15746,
   16385, 17024, 15746, 15746, 15746, 15746,  1040,  2803, 39359, 15746,
   10634, -3656, -3656, 46775, -3656, -3656, -3656,  2266, 23886,  1072,
   -3656, -3656, -3656, -3656, -3656, -3656,  2268,  1072, -3656,  2755,
   -3656, -3656,  2275, 23886, -3656,  2269, -3656,  2638, -3656,  2644,
    2647,  2649, -3656, -3656, -3656,  2880,  2652, -3656,  2654, -3656,
   -3656,  2295, -3656, -3656, 17663, 39359, -3656,  2299, -3656,  2783,
   -3656, -3656, -3656, -3656, -3656, -3656,  2396, -3656, -3656, -3656,
    2304, -3656, 36269,  2304, -3656, -3656,  2304, -3656, -3656,  2304,
     956,  5421, -3656, -3656, 46775, -3656, 47393, -3656,    -5,  2297,
     196,   213, 33797,   106,   390, 27609, 34415,  2300, -3656, -3656,
   -3656,    64,  -162,  2531,  -162,  2535, -3656, -3656,  -162, 21395,
    -162, -3656, -3656, -3656,  2675,   185,  2311, -3656, 23886, -3656,
     100,   100,  2558,  1236, 39359, -3656, -3656,   204,  2315,  2405,
    2320, -3656,  2406, 23886, 23886, -3656, -3656, -3656,  2578, -3656,
    2958,  1421, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656,  2334,  2817,  2336, 36269,  1104,
   -3656, 46775, -3656,  1931, -3656, -3656, -3656,  2342, -3656, 10634,
   -3656,    69, -3656, -3656, -3656,  2739, -3656,  -162, 10634, -3656,
    2351,  1732, 46775, 46775, 46775, 23886, 46775, 23886, -3656,    10,
      10, -3656, 35033, -3656, -3656, -3656, -3656,   -30, 46775, 46775,
     -30, 36269, -3656,  1349, 46775,   -30, -3656,  2741,  2448, -3656,
   -3656, -3656,  2820, -3656, -3656,  2811,  2364, -3656,  2739, -3656,
   -3656,  1349, -3656, -3656, 23886, -3656, -3656,  1349, -3656,  1349,
    1349,   -30,   -30, -3656, -3656,  2510,   -99, -3656,  1250,   256,
    2613, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656,   765, -3656, -3656, -3656, -3656, -3656, -3656,   137, -3656,
   -3656, -3656,  2142,  2877, -3656, 39359,  1667,   835,  1178,  1667,
    1866,  -162,   290, -3656,   290, -3656, 36269,  2841,  2479,  2645,
     230, 23886, -3656,  2380, 46775, 23886, -3656, -3656, -3656,  1379,
    2375,  2385,  1647, -3656, -3656, 23886, -3656, -3656, -3656, -3656,
    2437, -3656, -3656, -3656, -3656,  2355, -3656, -3656, -3656,   154,
    2462,  2409,  2435,    91, 36269,  2839, 46775, 46775,  1732, 46775,
   46775, -3656, -3656,  -133,  2665,  2666,  2397, -3656,  2578, -3656,
     976, 46775,  2849, 30707, -3656,   380,   391, -3656,  2867,  2404,
   -3656,  2414,  2415,  2417, 10634,   231,   280,  1063,  1529,  1409,
    1144,   314, -3656,  2418,  2411, -3656,  2420, -3656, -3656,   416,
     436,  1159,  1167,  2425,  2428, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656,  2856, -3656,   456, -3656, -3656,
   -3656, -3656,  2438, -3656, -3656,  1172,   472,   496,   310,  2447,
     665,  1488,  2442, 24507, 46775,  2867,  2446,  1210,  1216,  2867,
    2449,   699,  1222,  1228,  1269,  2828,  1274,   803,   843,  1278,
     845,   874, -3656,  1287,  2457,  2465,   876,   319,  2867,  2469,
     327,  2458,  2461,  1323,  8717,  9356,  9995,   821,   884, -3656,
    2474, -3656,  2254,  2477,  2478,   339,   291,  1335, -3656, 10634,
   -3656, -3656,  1182,   768,  2497,   175,   901, -3656,  2633, 46775,
    2021,   168, -3656, -3656, -3656, -3656, -3656, -3656,   880, -3656,
    2481, -3656,  2487,   791,  2491, 10634,   847,  2491,  2787,  1948,
    1948, 15746,  2922,  3009, 11273,   801, 11273,   801,  2491,  2491,
    2491, -3656, 15746,  2494, 15746, 15746, -3656,  2803,  1647,  2489,
    1350, 46775, -3656,  2268,  1143, -3656,    64, 36269,   113, 23886,
   39359,  2493, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
    3797, 23886,  2576,  2581,  2582, -3656, 29469, -3656, -3656, -3656,
   -3656, 29469,   -16, -3656, 46775, -3656,  2572, -3656, -3656, -3656,
   22016, 22016, -3656, 22016, -3656, -3656,   267,   271,  2810,  2528,
   -3656, 46775, -3656, -3656, -3656, -3656, -3656,  3076, 10634, -3656,
   36269,  1233,   901,    64, -3656, -3656, -3656, -3656, -3656, 46775,
   42449, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   23886, -3656,  2917,   639, 23886,  2380,  2513, -3656, -3656, -3656,
   -3656, -3656,  1891,  2618, -3656,  2517, -3656, 10634,  -162, -3656,
   36269, 36269, 23886, 23886,  1037, -3656,  1477,  2518, -3656, -3656,
   -3656, -3656, -3656,  3399, 17663,  2956,  2970, 22016, 22016, 22016,
   -3656, -3656, -3656, -3656, -3656,   153,  1647, -3656,  2521,    85,
   43067,  2529,  -162,  2976, -3656,  1647,  2532, 46775, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656,   585, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656,   -30, -3656, -3656, -3656, -3656, -3656,  2754,  2511,  2313,
    2976,   -30,  1349, 23886,   -30,   -30, -3656, -3656, -3656, -3656,
   -3656, -3656, 46775,  2502,  2686, -3656,  2538, -3656, -3656, 23886,
   -3656,  2539, -3656,  2993,  3134,  2511, -3656, -3656, -3656,    64,
      64,  2842, -3656,  -162,  2670,  2679,  2680,  2684,  2687,  2716,
   -3656, -3656,  -162,  -162, -3656, -3656,    64, -3656,   839, -3656,
   -3656, -3656, -3656,  -162,  -162,  -162,  -162,  2374,  -162,  -162,
    1618, -3656, -3656,    64,    64, -3656,  1932, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656,   894, -3656,  2797, -3656,  2600,    64,
    3128,  2812,    64,    64,  3128,    64,  2814,  2815,    64,    64,
    2648,  3070,    64,  2957,  2664,  1916,  2963,    64,  2826, -3656,
    2676,  3092,    64,    64,    64,    64,    64,  3128,  2835,  3182,
      64, -3656,    64,  2844,  2843,   209,  2846,  2848,    64,    64,
      64,    64,   177, 46775,    64,  2850,    64, -3656, -3656,  5998,
   -3656, -3656, -3656, -3656, -3656, -3656,  1066, 22640, -3656, -3656,
   -3656, -3656,   149, -3656,  2808, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656,  2607, -3656, -3656, 10634,
   -3656, -3656, -3656, -3656,   166,    64,    64,    64,    64, -3656,
    2443, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, 39359,
    2972,  2023,   -39, 39359, -3656, 46775, -3656,  1113, 46775,  2616,
     503,  3910,  1031,  1031, -3656, 23886, 23886, 46775,  2672, -3656,
   30707, -3656, -3656,  1250, -3656,  2614, 12551, -3656,  2622, -3656,
   10634, -3656, -3656, -3656,   724, 10634, 10634,  3117,  1502, -3656,
   38123, -3656, -3656, -3656, 38123,  1502, 10634, -3656,  2632, -3656,
    3032,  3033, -3656, -3656, -3656, -3656, 10634, 10634, 10634, 10634,
   -3656, 10634, 10634, 10634, 10634, 10634, -3656, 15746, -3656,  2631,
    2651, -3656, -3656, -3656,  2655, -3656, 10634, -3656, -3656, -3656,
   10634, -3656, 10634, 10634, -3656, 10634, 10634, -3656, -3656, -3656,
   13190, 10634, 10634,  2657, -3656, -3656, 10634, 10634, 10634, -3656,
   10634,  1313, 10634,  1620, 10634,  1890, 10634, -3656, 10634, -3656,
   -3656, -3656, -3656, 10634,   392,  1891,  2374,  2659, -3656,  1648,
   -3656, -3656,  1314, -3656,  1182,  2660, -3656, -3656,  1931, -3656,
   -3656,  2656,  2661,  2663, 39359, 10634, -3656, -3656, -3656, -3656,
   -3656, -3656, 15746,   343,  2667, 15746, -3656,  2787,  2762,  2762,
    1960, 10634,   847,  2787, 10634,  2671,  2639, -3656, 10634, 46775,
   -3656, -3656, -3656, -3656, 39359, -3656, -3656, -3656, -3656,   113,
   -3656,  2269, -3656,  2380, -3656,  3129,  2646, -3656, -3656, -3656,
   -3656, -3656, -3656,  1656, -3656, 36269,  2668, -3656,  2681,  2727,
    2736,  2747, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656,  2511, -3656, 38741, -3656,  1647,    64,
    2691,  2692, -3656, -3656, 42449, 10634, -3656, -3656,    64,  8078,
    1477, -3656,  2673, -3656, -3656,  2459,  2750,  2696,  3056, -3656,
   -3656, -3656, 46775, 15746, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656,  3285,  2698,  2705, 46775,  1647, -3656,  2774,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,   680, -3656,
   -3656,  2706,  2706, 19528, -3656, -3656, -3656, 46775,  3193, -3656,
    2977, 36269,  3163,  3164,  3167,  1194, -3656,   842, -3656,   171,
    3123,  2511, -3656,  3173, 39977, -3656, 31325,  3101,   593, -3656,
    2729,  2730, -3656,    85, -3656, -3656, -3656, -3656, -3656,  1053,
   -3656,   126, -3656, 35033, 35033, -3656,  3007, -3656, -3656, -3656,
   -3656,  2528,  1349, -3656, -3656, -3656,  1195,  3119,  3127, -3656,
    2992,  1166,  2992,  1195,  1195, 24507,  1250,  2578, -3656,  2374,
    3057, -3656, -3656, -3656, 38741, 35651, -3656, -3656, -3656, -3656,
    3275, -3656,  3277,  1073, -3656, -3656,  1644,     9, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656,  1866,  1644,  1644,   349, -3656,   145, -3656,
   -3656, -3656, -3656,  3218, -3656, 25128,  1414, -3656,   116, -3656,
   25128, -3656,  1379, -3656, 43685, 25128,  1414,  1053,  2374, 25128,
    2374, 44303,  1414,  -162,  -162,  2271,    64,  2374, -3656, -3656,
    3137, 46775,  3138, 25128, 25128, -3656, 39359, 46775, -3656,    64,
     144,  2374, 44921,  1053,  1053, 25128,  1414, 24507,  2520, -3656,
    -162,  1414, -3656, -3656, -3656, -3656, 23886,  1414,  1414,  2194,
    2713,  2793,  2898, -3656, -3656, -3656,  2374, 44303, -3656, -3656,
    5701, -3656, -3656, -3656, 18907, 46775,   320,   195, -3656,  2749,
      22,   999,  2832,  1399,  2760,  2761, 45539,  1647,  -162,  1891,
    1644,  1644,  2436, -3656,  3027,  3200,    64, -3656,  1923, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  2853, -3656,
    3385,  2954,  2777, -3656, -3656,   222, -3656, -3656,  1132, 23886,
   18286, -3656,  3036, -3656,  3859, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656,  2779,  1250,  2528,  1538,  2528,  2804, -3656,
   11273,  1352, -3656,  1647, 10634,  1647,  1331, -3656,  2792,  2792,
    2800, -3656,  2806,  2792,  3203,  2800,  3206,  2813,  2816,  2830,
    2831,  1696, -3656, 10634, 10634,  1360,   369,  1364,   -74,   922,
     936,   378, -3656,  1370,  2955, -3656, -3656,  1385,  1412,  1435,
     967,  1456,  1719, 11273,  1458,  1142,   382, -3656,  1467,   992,
    1013,  1524, 10634,  1576, 10634,  1585, 10634,  1600,  1605,  1626,
    2829,  2829,   147, -3656,  2809, -3656, -3656, -3656,  2836, -3656,
   -3656,  2137,  1314, -3656, -3656,  2840, -3656, -3656, -3656, -3656,
   -3656,  2805,  1647,  2851, -3656, -3656, 10634, -3656,   973, -3656,
   -3656, 15746,   389,  2855, -3656,  1647, -3656, -3656,  2859,  1696,
   -3656,   292, -3656, -3656, -3656, -3656,   227,  3493, 29469, -3656,
   46775,  -193,  2821, 31943, 36269, 36269, 36269,  2847, 10634, -3656,
   -3656, -3656, -3656, -3656, -3656,  1233,  2925,  2927,    64,  1647,
    8078, -3656, 15746,  1747, -3656,  1647, -3656,  3080, 23886, -3656,
    3258, -3656, -3656, -3656, -3656,  2861,  2862, -3656, -3656, -3656,
    2787,  3234,  3112, -3656, -3656,  2868, 36269, -3656,  1055, 24507,
   -3656,  2869, -3656,  2869,  1699,  2876,  1743, -3656, -3656, -3656,
    2870,  2185,  1756, -3656, 17663,  3325,  2229, 36269, 36269, 36269,
   -3656,  2528,  2528,   832,  2932,  3280, -3656, -3656, -3656, -3656,
   46157, -3656, -3656, -3656, -3656,  1383,  1757, -3656, -3656,  3278,
    3105, -3656,  2529,  2885, 25749, -3656, -3656, -3656, -3656, -3656,
   -3656,  2511, -3656, -3656, -3656, -3656, -3656,  2511, -3656,   -30,
    -165,   768, -3656,   886, -3656, -3656, -3656,  3279,  1195,  2992,
    2992,  3281,  3160,   581,  2891, -3656,    64, -3656,  2897, -3656,
    1055, -3656, -3656, 10634, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,   894, -3656,
   -3656, -3656, -3656, -3656,  2900,  3283,  3286,  1379, -3656, 25128,
   -3656, -3656, 25128, -3656, -3656,   443, 44303, -3656, -3656, -3656,
   -3656, -3656, -3656,  2903, -3656, -3656,  1891, -3656, -3656, 35651,
    -162, -3656, 25128,  2903, -3656, -3656,   180, -3656,  2928,  -162,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   44303,  2907, -3656,   352, -3656, -3656,  2106, -3656, 44303, -3656,
   -3656, -3656, 44303, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  2910,  2552,
    1509, -3656,  2921,  2909, -3656, -3656, -3656, -3656, 46775, -3656,
   -3656, 23886, -3656, -3656, -3656,  4948, 46775,  3154, -3656, 10634,
   10634,  3195, 46775,  3196, -3656,  3486, 46775,  3545, 44303, -3656,
    2929, -3656,  2931, -3656, -3656, -3656, -3656, -3656, -3656,  2934,
   46775,  1644,  2074, -3656, -3656,  -162,  1132, -3656, -3656, -3656,
   -3656,  3204,  3207, 46775, -3656, -3656, -3656, -3656,  3074, -3656,
   23886, -3656,  3102, -3656,  2940,   182,  5791, -3656,  2942,  2960,
   30707,  2528,  3214, -3656, -3656,  2762, -3656,  1647, 10634,   854,
   -3656, -3656,   189,  3230, -3656,  1039, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656,  2961,  2762,  2762,
   -3656, -3656, 10634, -3656,  3121, -3656, 10634, 10634, -3656, 10634,
   -3656,  1019,  2962,  2979, -3656, -3656, -3656, 10634, -3656, -3656,
    2762, -3656, 10634, -3656, -3656, 10634, -3656, 10634, 10634, -3656,
    1642, -3656,  1676, -3656,  1695, -3656, -3656, -3656,  1891,  2964,
    3336, -3656, -3656, -3656,  1891,  3145, -3656, -3656,  1891,  2374,
    2342, -3656, -3656,  1165, 46775, -3656, -3656,  1758, -3656, -3656,
   10634, -3656, 39977, -3656, -3656, -3656,  3328,  3593, -3656,  3184,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656,  3409, -3656, -3656,
   -3656,  -128,  -128,  -128, 13829,  1647, -3656,  2974,  2980,  8078,
   -3656,  3470, -3656, -3656, -3656,  3258,  3356, -3656,   828, -3656,
   46775,  2981,  1514, -3656,  1760, -3656, -3656, -3656,  2137,  2983,
   -3656,    64, 13829,  2706,  3102, -3656, -3656,  1699, 24507, 31325,
   -3656, -3656, 46775, -3656, 36269,  2229,  2229,  2229,  2511,  3416,
    2750,  2750, -3656, 28229, -3656, -3656,  3139, -3656, -3656, 32561,
     150,  3202, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656,  1931,  1907, -3656,  1250, -3656,  1195, -3656,  3371,
    3374,  1195, -3656, -3656, -3656, 24507,  2528, 14468, -3656,  2137,
    1647,  2989,   352, -3656,   802, 10634, 25128, -3656, -3656, -3656,
    2994, -3656,  3508,  3510, -3656, 25128,  2355, 46775, -3656,  3076,
   -3656, -3656, -3656,  3087, -3656,  4948, -3656, 24507, -3656, -3656,
   -3656, -3656, -3656, 46775, -3656, 23886, -3656, 18907, -3656,  2999,
   -3656,  2792,  2792,  2792, -3656, -3656, -3656,  2800, -3656,  2806,
    3241, -3656,  2806,  2806, -3656, -3656,   189,  1220, -3656, -3656,
     189,   159,  1504,  2806, -3656, -3656, -3656, -3656, -3656,  2792,
    2800,  2800, -3656, -3656,   189,  2792, -3656,  2792,  2991,   417,
      93,  2792,  2792,  2792,  3010,  3001, -3656,  1647,  2762,  3568,
   -3656, -3656,  3156,  -162,  3511, -3656,  1784, -3656,  3012, -3656,
   45539,  1866, -3656, -3656, -3656, -3656,  3155,   872, -3656,  3185,
    3014,  3017, -3656, -3656,  -162,  3019,  3020,  5998, -3656, -3656,
   -3656,  3638, -3656, 46775, 46775,  2614, -3656,  3392,   573,  1647,
    3023,  3024,  3025,  3028,  3630,   193, -3656,  3636, 38123, -3656,
   -3656, -3656,  3037,  1786, -3656,  3040,  3043,  1730,   256,  3044,
    1735,  1029,  1801,  3341,  3426, -3656,  3266, -3656,  1740,  1176,
    1755,  1781,  1811,  1850, -3656, -3656, -3656, -3656, -3656,  3047,
   -3656, -3656,   333, -3656,  3048,  1133,   768, -3656, -3656,  1829,
   -3656, -3656, -3656,  3514,  3411,  3315,   859,  3077,  3077,  3077,
    1747,  1647,  1861, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
    3451, -3656, -3656,  3059,  3061, 46775, -3656,  3112,  2342, 24507,
   13829,  3055,  3060, -3656,    11, -3656, -3656,  3058, -3656, -3656,
    2229, -3656,  3652,  3492, -3656, -3656, 39359,  3063, -3656, -3656,
    3372, -3656, -3656, -3656, -3656, 25749, -3656, -3656,  2538,  3144,
    3109,  1195,  1195,  3148,  3111, 10634, 10634,  3075, -3656,  3214,
    1747, 10634, -3656,  1655,  2490, -3656, -3656,   331,  2342, 10634,
   -3656,  1891,  3112, -3656,  1859,  3078,  3079, 46775,  3082, -3656,
    3120,   320, -3656, -3656, -3656, 23886,  2991,  1414, -3656, -3656,
    2903,   680,  3073, -3656, 46775,  3403, -3656, -3656, -3656, -3656,
    1430, -3656,  3084,  1430,  1430, -3656,  2294, -3656,  3118,   189,
   -3656, -3656,  3122, -3656, -3656, -3656,  1430,  3085,   189, -3656,
   -3656, -3656, -3656,  1430, -3656, 39359,  1963,  -162,  2782, -3656,
    3125, -3656,  3595,  1395,  3471, -3656,  2991, -3656,  3473,  3363,
   -3656,   189, -3656, -3656,  3694, -3656,   189,  3694,  1430,  3367,
   -3656,  1430, 46775, -3656, -3656, -3656, -3656, -3656, -3656, 46775,
   -3656,  1309, -3656, -3656,  1895,  -162, -3656, -3656, -3656,  3093,
    3096, -3656, -3656, -3656,   999, -3656, 46775,  4948, -3656, -3656,
   -3656,  3036, -3656,  1401,  1920,   352,  3095,  1926, 35033, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, 38123, -3656,
    3694, -3656,  3373, -3656, -3656, -3656, -3656, -3656, -3656, 10634,
   -3656, -3656,  3404,  3569, -3656, -3656, -3656, -3656, -3656, -3656,
    3100, -3656,  2374,   171,   171, -3656, -3656, -3656, -3656, -3656,
   -3656,  3188,  3201, -3656, -3656,  3205, -3656, -3656,   121,  2350,
   -3656, -3656, -3656, -3656, 13829,  3497,  3208, -3656, -3656, 46775,
    3149, -3656, -3656,  1133, -3656, -3656, -3656, -3656, 10634, -3656,
    3214,  2271, -3656, 28229, -3656, -3656,  1165, -3656,  3165, -3656,
   -3656, -3656,  3166,  1647,  1647, 46775,  3392,  1901, 10634, 10634,
    2488, -3656,   374,  1133,   352, -3656,  1929, -3656, 46775, 46775,
    1935, 46775,  2576,  2581,  2582,  1615,  1615, -3656, -3656, -3656,
   -3656, -3656, -3656,  3524, -3656, -3656,  1937, -3656,  1333,  3396,
   -3656, -3656, -3656, -3656,  1430, -3656,   256, -3656, -3656, -3656,
   -3656, -3656,   256, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656,  3412,  3172, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656,  3135, -3656, -3656,
    3254, -3656, 52955, -3656, -3656,  1407,  3161, -3656, -3656, -3656,
   -3656,  1771, 46775, 23886,  3195,  3319, -3656,  3076, -3656,    11,
     182,  3102, -3656,   232, 46775, -3656,  3414,   129, -3656, -3656,
   -3656,  3142,  1865, -3656, -3656, -3656,  3146, -3656, -3656, -3656,
   -3656, -3656, -3656,   712,  3408,  2374,  2374,  2374,  2374,  2350,
   -3656, -3656,  3211, 23886, 15746,  3260,  1958, -3656, -3656,  1646,
    1243, -3656,  1674,   352, 10634,  2511, 35651, -3656, -3656, -3656,
   10634,  3169, 10634,  3174,  1965, -3656,  1924,  1945,  1994,  2036,
    2065,  1135, -3656, -3656,  1379,  1379, -3656,   374, -3656, -3656,
   -3656,  1970,  1972,   232,  1983, -3656, -3656, -3656,   320,  3176,
   -3656, 46775, -3656, -3656, -3656,   240, -3656, -3656,  1988, -3656,
    1991, -3656, -3656, 10634,  3649,  3190, 46775,  1303, -3656, 54191,
   54191, 46775, -3656, -3656, -3656, -3656,  4949, -3656, -3656,    -4,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656,  3782, -3656,  3170, -3656, -3656,  1407,  3177, -3656,   258,
   -3656,  2185, -3656, -3656,  4948,  3631,  1399, -3656, -3656, -3656,
   -3656, -3656,  3186,  2185,  -162,    64, -3656,   232, -3656, -3656,
   -3656,   352,  3187,  3433, -3656,   129, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, 24507,  2578,
   -3656,  1891, -3656, -3656, 46775, -3656,  3272,    64,  3695,  3697,
      64,    64,    64,    64,  3194,  1243, -3656,  3672, -3656, -3656,
   10634, -3656, -3656,  1647,  3423, -3656,  3762,   768,  1647, 46775,
    1647, 46775, -3656,  2118,  2133,  2147,  3651,  3651, -3656,  3410,
     232, -3656,   129, -3656,  3112, -3656,  1686,  1686,   189,   256,
     189,  1647, 10634, -3656, 10634,  3231, -3656, -3656,  3653, 46775,
   -3656, -3656, -3656, -3656, 10634, -3656, 52955, 52955, -3656, -3656,
   -3656, -3656,  3810, -3656,  3227,    11,  3783,  3481,  3803, -3656,
    3539, -3656, -3656,  3486,  4948, -3656, -3656, -3656,  2374,   292,
   -3656, -3656, -3656,  1996,   292, -3656,  3228, -3656,    64, -3656,
    3233, -3656,  3260, -3656,  3235, -3656,  -162,    64,    64,  1633,
    1633,  1891, 39359,  3310, -3656, -3656,    64,   352,  3858, -3656,
    1305,  3605, -3656,  2015,  2020,  1355, -3656, -3656, -3656, -3656,
   -3656,  2031, -3656,  3869, -3656,   928,  3509,  3512, -3656, -3656,
   -3656,  1647,  1647, -3656,   244, -3656, -3656,  3637,  3728, 10634,
    1647, 49865,  3237, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, 53573, 10634, -3656,    -4,
    3782, -3656, -3656,  3507, -3656,  3513, -3656, -3656, -3656,  3752,
   52955, -3656,  3745, -3656,    11, -3656, -3656, -3656, -3656, 24507,
   13829,  2271, -3656, -3656,  3255, -3656, -3656,   -12, -3656,  -162,
    -162, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
    2033, -3656, 39359, -3656, -3656,  3843,  3845,  3747,  3851,  1305,
   -3656,  -114, -3656, -3656, -3656,  3853, -3656,  3854,  3268,  3269,
   -3656, -3656, -3656, -3656,  3314,  3780,  3296, 10634, 52955, -3656,
    3758, -3656,  3688,  1647,  3627,  3270, -3656,  3276,  1647,  3793,
   54191, 54191, -3656, -3656, -3656, -3656,  3770, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656,  2041, -3656, 15107, -3656, -3656, -3656,
   -3656, -3656, 39359, -3656,  3310, -3656,  3287,   256,   256,  3875,
     256, -3656,  3878,  3880,  -114, -3656, -3656, -3656, 45539, 45539,
    1686,  1686, -3656,   245, -3656,  1647, 50483,  3877, 46775, -3656,
    3377, -3656, -3656, 10634,  3794, 40595, 51101,  3290, -3656, -3656,
   -3656,  3475, -3656,  3539,  3472, -3656,  3255, -3656,  3300, -3656,
    2787,  1243, -3656, -3656,  3579, -3656, -3656,   256, -3656,   256,
     256, -3656,  3306,  2045, -3656, -3656, 10634, -3656,  3795,  3394,
   -3656,  3311, -3656, 52955,  1647, 52955, -3656, -3656,  3744,  3316,
    1659, -3656,  3318, -3656, -3656, 52955,  3733,  3762, -3656, 15107,
    3320, -3656, -3656,  3321,  3323, -3656, -3656, -3656, -3656, -3656,
    1647,  3903, 52955, 46775, 48011,  3812, 51719,  3777, 46775,  4948,
    3778,  3781, -3656, 52955, -3656,  3920,  3605, -3656, -3656, -3656,
    3579,  3418, -3656, 48629, -3656,  2382,  3529,  3361, -3656, -3656,
    3855,  1125, -3656, -3656,   256,  3755, -3656, 52955, 52955, -3656,
   -3656, -3656, -3656, 33179, -3656, -3656, -3656, -3656, -3656,  1194,
   -3656,  3616,  3345, 49247, 52337, -3656, -3656, -3656, 30089, -3656,
   -3656, -3656,  3800, -3656, 10634, -3656,   717, 20149,  3500, 33179,
   -3656, -3656,  1647, -3656, -3656, -3656, -3656, 39359,  2049, -3656,
   -3656, 24507, -3656, -3656, -3656, -3656, 23263,  3348, -3656,    64,
   -3656, 24507, -3656, -3656, 13829, -3656, -3656
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3656, -3656, -3656, -3656, -3656,   156, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656,  1788, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656,   732,  1597,  3346,
   -3656,   470, -3656,   141, -3656, -3656, -3656, -2803,    26,  -141,
   -3656, -3656,   286,    31,  3022,  -140, -2967, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656,   485,   484, -3656, -3656,
     300, -3656, -3656,  -861, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656,  -316,  -277,  1897, -3656, -3656, -3656,  3966, -3656,  3435,
   -3656, -1698,  2226, -3656, -3656, -3656, -3656, -3656,  2307, -1611,
   -3656, -3656, -3656,  1372, -3656, -3656, -3656, -3656,  -118,   321,
   -3656,   323, -3656,   325, -3656,   329, -3656,   334,   335,   336,
     338, -3656,   341, -3656, -3656,  -278, -3656, -3656, -3656, -3656,
     342, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  -150, -3656,
   -3656,     7, -3656, -3656,  -138,   344, -3656,  -112,   345, -3656,
     346, -3656,   -11, -3656,    -9, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  3035, -3656,
   -3656, -3656, -1903, -3656, -3656, -2077,  2597, -3656, -1723, -3656,
   -3656, -1762, -3656, -3656, -1634,  1209, -3656, -3656,   883,   337,
   -3656, -1282, -1830, -1824, -3656, -3656, -3656, -1929, -1927, -1341,
   -1307, -2129, -3656, -3656, -3656,   340, -3656, -3656, -2435,  2068,
    2598, -3656, -1931, -3656, -3656,  1199, -3656, -3656,  1371,  1783,
   -3656,   971,  2763, -1210, -3656, -3656, -3656, -3656, -3656, -3656,
     172,   311,    75, -3656, -3274,   703, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -2227, -3656, -3656, -3656,  -178, -3656,
   -3656,   -92, -3656, -3656,  -136, -3656,   178, -2234, -3656, -3656,
   -3656, -3656,  2587, -1266, -3656,  3560, -3656,  -556,   805,  2101,
   -2088, -1385, -3656,  -902,  -877, -2395, -3656, -3656, -3656, -3191,
    1158,  1565, -3656,   889,  2103, -1835, -3656,  1611, -3656, -3656,
     914, -3656, -1966, -3656, -3656,   875, -3656,   878, -3656, -3656,
   -3656,  -845,   849, -2430,  1472,  -999, -3656,   433, -2336, -2407,
   -3656,   662, -3656,   613, -3338, -3144, -3656,  -574, -2016, -2305,
      19, -3656, -3656,   626, -2981,  1749, -3656, -3656, -3656, -3005,
   -3123,  1501, -3656, -3656,  1082, -3656,  -822,  1081, -3656, -3656,
   -3656,  1095, -3656,   187, -3656, -3656, -3656, -3656, -3655, -3656,
   -3656, -1445,  1315, -3656, -3656,  4109, -1020, -2572, -3443,   191,
   -3656, -3656,  2621, -3414,   254,   251,  2082, -2090,   404, -2302,
   -3656,   458, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  2145,
   -1129, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -2330, -2334,
   -3656, -3656,  1662, -3656, -3656, -3656, -1863, -1413, -1407, -1725,
    -485, -2065, -3194, -3656, -3656, -3656, -3656,  2717, -3656, -3656,
   -3656, -3656, -3656,   693,  1848, -3656, -3656, -3656, -3656, -3656,
   -3656,   959,  2662, -3656, -3656, -3656,    13, -3656, -3656, -3656,
   -3656,  2357, -3656, -3656, -3656, -3656,  2685, -3656, -3656, -3656,
   -3656, -3656, -3656,  1459, -3656,  1885, -3656, -1423, -3656, -3656,
    1056,  -601,  1846,  3543,  1995, -3656, -3656,  -593, -3656, -3656,
   -3656, -1584, -2306, -3656,  3261,  -885, -2422,  2348,  -647, -1791,
    1112,   864, -3656,  3358,  1000, -1106, -1099,   745, -3656,  -636,
   -3656, -3656, -3656,  -623, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656,  1526, -3656, -3656, -3656, -3656, -1181,
   -3656, -3656, -3656, -3656, -3656,  1701, -3656,  2086, -3656,  -506,
   -3656,  3081, -3656, -3656, -3656, -2231, -1822,  1810,  1022, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -1488, -3656,
   -2263, -3656, -3656, -3656, -3656, -3656,  2016, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -1646, -3656, -1860,   241, -3656,   384,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656,    -2,   917,    -1,
   -2475, -1051,  1570, -3656, -3656, -1260,  3110, -2242, -3656, -3656,
   -3656,  1999, -3656, -3656, -3656, -3656, -3656,   993, -2798, -1370,
   -3656, -3656, -3038,  -878, -2178,  -854, -3656, -2270,   557, -1876,
   -1744, -2034,   184, -1302, -3656, -3656, -3656, -3656,   -94, -3656,
   -3656, -3656,   572,  1877, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656,  -567,  -764, -3656, -3656,  2143,
    2722, -3656,  2995, -3656,  -984,  3586, -3656, -3656,  3587, -3656,
   -3656, -3656, -3656,  2904,  2883,  1952, -3656, -3656, -2437, -3656,
   -3656,  1906, -3656,   830, -1262, -1774,  1100, -3656, -3656,  1103,
   -3304, -3656, -3656, -3656,  3601, -3656, -3656, -3656,  1052, -3656,
     130,  3620,  3606, -3656, -3656, -3656, -3656, -3656, -3656,  2699,
   -1027,  3551, -3656, -3656, -3656, -3656, -3656, -3656,  2366, -3656,
   -3656, -3656,  3382, -3656, -3656,  2852,  3659,  -575, -1274,  3387,
    -634,  2833,  2376,  -740, -3656, -3656, -3656, -3656,  4197, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,  2527,  1034,
   -3656, -3656, -3656,  2911, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656,  1146,   -17, -3656,   127,   -41, -3656,    63, -3656, -3656,
   -3656, -3656, -3656,  -108, -3656, -3656,  -111, -3656,  -957, -1346,
     763, -1211,  -942, -3656,  1134,  2894, -3267,  -664, -1120, -1124,
   -2165,    95, -3656, -3656,  2677,    28,  -405,  -415,    -6, -2495,
    -104,  -577, -3656,  -154, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656,  1503, -3656, -3656, -3656, -2632, -3656,  3352,
   -3656,  2506,  2439,  3355, -3656, -1551,  1928,  1513,  1515, -3656,
   -3656,  1590, -2457, -3656, -3656,   119, -3656,  2492, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
   -3656, -3656,  2919,  3686,  3386, -3656,  3000, -3656, -3656, -3656,
   -3656, -3656,   520, -3656,   586, -3656, -2055,  2770,  1065, -3656,
    1616,  -356,  -630, -3656, -3656,   516, -3656, -3656, -3656, -3656,
   -3656, -3656, -3656, -3656, -3656,  1486,  3693,  3389, -3656, -3656,
   -3656, -3656, -3656, -3656, -2646,  -868, -3656, -3264, -2704, -1612,
   -3656, -3656, -2070, -2889, -3656, -3656, -1004, -3656, -3656, -3656,
   -3656, -1783, -3656, -3656, -3656,    41,  3756,  3757, -3656, -3656,
    -147, -3656,   442, -3656, -3656, -3656, -3656, -3656, -3656, -3656,
     425,   761, -3656, -3656,  3624, -3656, -3656, -3656, -3656,  3625,
   -3656, -3656, -3656, -3656, -3656,  3626, -3656, -3656, -3656, -3656,
   -3656,  1751, -3656, -3656, -3656, -3656, -3656, -3656, -3656, -3656
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2544
static const yytype_int16 yytable[] =
{
     495,  1029,  1037,  1015,   959,   954,   931,   927,  1435,  1595,
    1738,  1741,  1345,   535,  1621,   774,  2315,   543,  1620,  1751,
    2049,  2157,   618,  1708,  2006,  1514,  1834,  1505,  2270,   560,
    2449,  2389,   139,   536,   973,  1763,   572,   493,  1096,   575,
    1579,  2837,  1057,   572,  2003,  1989,   558,   988,  1402,   589,
    1374,  1990,   565,  1707,  2558,  1643,  2659,  3144,  2559,  2705,
    2785,  1875,  1651,  2754,  2755,  3110,  3605,  1440,  1004,  1007,
    1653,  1654,  1374,  1979,  1657,  1658,  1659,  1660,  1544,  1662,
    1663,  1665,  1667,  1668,  1669,  1670,  1671,  2945,  2617,   607,
    2772,  1771,  1441,  2407,  2401,  2205,  2299,  1045,  3250,  2758,
    2402,  2833,  2504,  2838,  2505,  2364,  2365,  1901,  2810,  1841,
    3607,  1921,  3138,  1921,   610,  2763,   495,  1262,   541,   495,
     617,   623,  2376,  2773,  3420,  2971,  3493,  1851,   502,  1186,
    1144,  1145,  1146,  2728,  2644,  1854,  1855,  2032,  3742,  2394,
    2395,  1902,  2962,  1187,  3336,  1922,  2969,  1922,  3636,  2027,
   -1912,   557,  3634,   612,  3287,  2414,   614,   564,  2417,  2418,
    2651,  2420,  1368,  2196,  2423,  2424,  1900,  3021,  2427,  1913,
    1766,  1477,  1878,  2436,   628,   637,  1417,  2804,  2440,  2441,
    2442,  2443,  2444,  2028,  1153,  1154,  2448,  1403,  2450,  3030,
     606,  1153,  1154,  2397,  2459,  2460,  2461,  2462,  3434,  2248,
    2466,  2501,  2468,  3864,  1262,  2415,  1254,  2502,  2022,  2419,
    3294,  3455,  3460,  3080,  3546,  3461,  2968,  1211,  3462,  1734,
    2434,  2310,  3295,  1685,  2358,  3392,   119,  2480,  2453,  3471,
    2196,  2537,  2445,  1777,  3492,  1357,  3296,  3649,  3170,  1896,
    2802,  2488,  2489,  2490,  2491,  2802,  2716,   897,   898, -1439,
    2815,   897,   898,  1263,  2819,   629,  2804,  1437,  2493,  2248,
    1276,  1734,   931,   927,  2378,  2795,  2796,  3105,  2835,  2836,
    2608,   553, -2411,  3022,  1437, -1885,   550, -2491,  3956,  1399,
    2849,  1309,  4027,   853,  2752,  1478,  1437,  1824,  -850,  1479,
    3751,   944,  1740,  2952,  1404,  2954,  1153,  1154,  1413,  2068,
    1480,  2805,  1874,  1929,  4157,  -532,  3864,  1153,  1154,  3966,
    2144,  2463,  1257,  3876,  1913,  1424, -2263,  -533,  3346,  3967,
    1131,  1276,   935,  2840,  1153,  1154,  1153,  1154,  2888,   573,
    1153,  1154,  2317,  -439,  3680,  1153,  1154,   121,  1244,  1536,
    1263,  3763,  2307,  1153,  1154,  1299,  2209,  2928,  1300,  1825,
    3931, -2049,  1995,  3021,  2508,  1153,  1154,  2724,  1289,  1153,
    1154,  2916,  2917,  1078,  2454,  3936,   652,  1202, -2071,  2613,
    1191,  3693,  3188,  1913,  3695,  1896,  2065,  2897,  1495,  1496,
    1497,  3865,  1473,  2817,    13,  1153,  1154, -2491,   138,  4128,
    4128,  2308,  3098,   554,  1153,  1154,  1153,  1154,  1153,  1154,
    2841,  2607,  4172,  3278,   642,  1153,  1154,  1153,  1154,  2847,
    2848,  1498,  3761,  3048,   624,  1498,  3142,  1543, -2342,  1245,
    3067,  2923, -2343,   498,  1246,  2600,  2898,  3730,  1463,  1096,
    1379,  1384,  1153,  1154,  1481,  4173,  2947,  2042,  3294,  3957,
     833,  1499,  3788, -1717,  1494,  1500,  2725,   140,  1079,  2210,
    3295,  2601,  1153,  1154,  3669,  3860,  2929,  1914,  1418,  3022,
    2043,  3876,  1871,  3673,  3296,   945,  1322,  1247, -1439,  1025,
    1996,  3143,  1153,  1154,  3159,   897,   898, -1912,  3189,  3118,
    3119,  2245,  1248,  2781,  3865,  2722,  3692,  4019,  1153,  1154,
   -2263,  3694,  2771,    28,  1132,  2799,  1301,  3725,  2464,  2889,
    2433,  2842,   617,   623,  1044,  3148,  2318,  3169,  2121,  1494,
    3171,  2509,  1153,  1154,   936, -1399,  3971,  1425,  3876,   788,
    1896,  2859,  2806,   623,  3179,  4224,  4225,   830,  1648,  1874,
    3968,  1482,  1826, -2342,   828,   924,  1440, -2343,   617,  3811,
     607,  1407,  2818,   844,  2820, -2189,  1735,  1414,   832,  1656,
    1155,  2831, -1399,  1156,  2145,   854,   857,  1901,  3782,  1528,
    1529,  1441,  2177,  1190,  2197,  2844,  1677,  1954,  2401,  2504,
    1709,  2505,  2855,  2180,  2402,  1921,  2183,  1876,  2341,  1896,
     941,  1358,  3172,  1708,  2871,  2873,  2875,  1440,  1735,  1400,
    2876,  1902,  1343,   646,  1979,  3783,  3789,  3426,   958,  3071,
    3072,  3073,  1914,  3023,  3933,   617, -1439,   977,  3958,  1922,
     551,  3626,  1441,  1707,  1537,  1203,  1900,  2481,   617,   607,
     495,  1361,  3356,  4153,  2891,   607,  3279,  1003,  1474,   607,
     607,  2197,  3576,  1255,  1016,   977,  4073,  1836, -1912,   617,
    1839,   835,  2400,  4007,  2802,  1843,  1688,  2802,  1202,  1046,
    1047,  2174,  2830,   796,  1052,  1155,  1568,   990,  1156,  1569,
    4021,  1914,  3115,  3116,  3117,  2839,  1155,  3181,  2501,  1156,
    3375,  1856,  1857,  2797,  2502,  1716,  3368,   849, -2049,  2027,
    1362,  1153,  1154,  1155,   860,  1155,  1156,  1201,  1156,  1155,
    2506,  1043,  1156,  2668,  1155, -2071,  1097,  1156,  2807,  2762,
    2192,  4062,  1155,    40,  2033,  1156,   942,  1202,  3276,  3286,
    1363,  2010,  2951,  2028,  1155,  1153,  1154,  1156,  1155,   878,
     989,  1156,  2921,  3393,  2507,  3912,  1000,  3769,  2959,  2729,
    2918,  1765,    46,  2753, -2411,  1767,  3859,  3418,  2022, -1439,
    1153,  1154,  3873,  2793,  1155,  2915,  1784,  1156,  1878,  2500,
    1475,  1475,  1150,  1155,  1152,  1155,  1156,  1155,  1156,  3463,
    1156,  1796, -2411,  3615,  1155,  1778,  1155,  1156,  3297,  1156,
    2455,  3182,  3547,  1853,  3581,  3024,  4151,  3449,  -850,  1195,
     495,  1197,  2798,   977,   495,   617,   555,   495,   617,  3023,
    1157,  1155,  3263,  1240,  1156,  -532,  3448,  1157,   645,  1371,
    3469,  3470,  2042, -1439,  1840,  1817,   946,  -533,  2172,  2930,
    4149,  1155,  3765,  1258,  1156,  2160,   924,  1196,   794,  1153,
    1154,  1200,  3468,  -439,  1210,  2043,  1267,  3937,  1277,  3031,
    3473,  1155,  2680,  3981,  1156,  1133,  3498,  1153,  1154, -2049,
    3049,  2066,   607,  3433,  3042,  3264,    54,  1155,  1475,   858,
    1156,  2283,   617,   607,  4033,  4182, -2071,   607,  3282,  1153,
    1154,  1153,  1154,  3440,  3425,  3446,  3447,  1026,  1880,  2778,
    2705,  1155, -2189,  2968,  1156,   924,  2968,  2968, -2342,  1926,
    1306,  1408, -2343,   831,  3400,  1380,  1385,  2968,  3404,  1277,
    1153,  1154,  1153,  1154,    57,  3163,  1203,   617,  3091,  3472,
    1153,  1154,  1157,  3491,  3494,  3496,  3497,  2074, -2342,  3149,
    3150,  3857, -2343,  1157,  3409,  1188,  3399,  1233,  1913,  2098,
    3403,  3581,  2257, -1399,  3173,  2351,  1364,  1170,  2146,  3238,
    1157,  4290,  1157,  4028,   607,  4030,  1157,  1170,  1153,  1154,
    3381,  1157,  2038,  1295,  1628,  1629,  1628,  2093,  3153,  1157,
    2333,  2075,  1153,  1154,  1312,  1203,  2122,  2518,  1318,  1436,
    3582,  1157,  2737,  2125,  2126,  1157,  3784,  2811,  2401,  4103,
    2337,  3290,   991,  3120,  2402,  2142,  2143,  2665,  1018,  2625,
    2626,  2347,  2721,  1153,  1154,  4333,  2670,  1834,  1834,   607,
     598,  1157, -1717,  2504,  1374,  2505,  3297,  2363,  2574,  1008,
    1157,  2802,  1157,  4067,  1157,  2981,  2982,  2175,  1153,  1154,
    2136,  1157,  1409,  1157,  2988,  2989,  3113,  2056,  3004,  3005,
    3490,  1374,  2899,  1123,  1027,  3039,  3040,  2057,  2539,  1153,
    1154,  1372,  2184, -2189, -2491,  1410,  1901,  2205,  1157,   607,
    1155,  1188,  1510,  1156,  2407,  1153,  1154,  1638,  4122,  3278,
    4355,  2182,  2959,  2080,  2167,  1921,   503,  1989,  1157,  3380,
    2258,  3313,  1365,  1990, -2543,  2694,  2624,   881,  2759,  1896,
    1902,  1672,  3396,  2081,  1155,  1097,  2525,  1156,  1157,  1153,
    1154,  1127,  3178,  1366,  1676,  1979,  1292,  1097,   537,  1922,
    1031,  1039,  2501,  2087,  1157,  1900,  3720,  2284,  2502,  1155,
    2161,  2335,  1156,  1570,  3516,   549,  1571,  3582,  1124,  2091,
    2195,  2340,  1440,  3517,  2343,  2344,  2400,  2348,  1157,   562,
    2263,  2513,  2199,  1367,  1896,  1173,  1199,  2629,  2630,   579,
    1709,  1710,  1622,  2092,  3291,  1173,  2349,  1441,  3619,  3620,
    1502,  1874,  2514,  1508, -2491,   617,   633,  2350,  1720,  2157,
    3774,  2027,   599,  3334,   583,  2434,  3290,  2506,  1153,  1154,
    1153,  1154,  2900,  2239,  2690,   906,  1128,  2623,  1739,  1621,
    2745,  1743,  1748,  2162,  3154,  1153,  1154,  2633,  1155,  4334,
    3378,  1156,   617,  1153,  1154,  2028,   657,  1680,  1153,  1154,
     882,  2507,   607,  3421,  3537,  2788,  1155,  1202,  2985,  1156,
    1776,   590,  2094,  2279,  2280,  3969,  1914,   607,  2283,  3540,
    2022,  2738,  3583,  4012,  3121,  3292,  2500,  3976,  1155,  3436,
    1155,  1156,  2334,  1156,  1189, -1717,  1153,  1154,  1097,   617,
    2351,  1621,  1153,  1154,  2746,  2776,  4067,  2526,  1153,  1154,
    2168,  3294,  2383,  3585,  1153,  1154,   617,   591,   658,  1155,
    2934,  1155,  1156,  3295,  1156,  3518,  3085,  2259,  1725,  1155,
    1728,  1892,  1156,    14,    15,   883,   617,  3296,  3728,   617,
     617,  2285,  3279,   584,  3327,  1175,  1176,  2544,   897,  3456,
    2607,  1673,  3550,   607,  2607,  1153,  1154,  1157,  4123,  1293,
    1153,  1154,   607,  1682,  1153,  1154,  1797,  1155,   617,  3722,
    1156,  1009,  2095,  1153,  1154,  1674,  2384,   607,   607,  3923,
    1752,  1155,  1754,  2789,  1156,  1860,  1757,  3897,  1759,  3291,
     592,  1157,  2307,  1621,  3951,  3952,   881,  2853,  3002,  1153,
    1154, -1717,   617,  2747,  2385,  1800,  2106,  3640,  2877,  1153,
    1154,  1882,  1155,  1808,  2352,  1156,  1157,  1153,  1154,  3898,
    1189,  1153,  1154,   836,  1282,  1283,   495,   495,   495,   607,
     495,   607,  2811,  3314,  1721,   924,  1835,  1155,  1153,  1154,
    1156,  2935,  1837,   495,  3584,   617,  1153,  1154,   495,  2163,
    1153,  1154,   659,   586,  1318,  1814,  1153,  1154,  1155,  1010,
    3585,  1156,   644,  1818,  1819,  1820, -1717,  1822,   607,  1372,
    3303,  1153,  1154,   601,  1155,  2386,  3079,  1156,  1896,  1318,
    1838,  1893,   792,  2353,  2748,  1842,  2768,  1178,  1179,  1180,
    1181,  1182,  1183,  1184,  1185,  1157,  3293,  2769,  1153,  1154,
    1202,  1182,  1183,  1184,  1185,  2433,  1462,  3422,  1155,   617,
    2112,  1156,  1774,  1157,  4013,  1203,  4014,  2169,   602,   882,
     617,  1153,  1154,  4105,  2284,   607,  1961,  2137,  1999,   607,
    1821,  3915,  1823,  2170,  4106,  1157,   608,  1157,  1011,   607,
    1675,  3899,  1153,  1154,  1153,  1154,  2377,  1861,  3586,  1912,
    2113,  1862,  2115,  1153,  1154,  1501,  2387,  3862,   617,  1775,
     495,   495,  3947,  2040,   495,  2168,  1157,  2527,  1157,  1852,
    1722,  1202,  2592,  1708,  1964,  1052,  1157,  2055,  -173,  2953,
     861,  2116,  1798,  2120,  3157,  3685,  2400,  1155,  3158,  1155,
    1156,  2138,  1156,  3802,   883,  3038,  3146,  2036,  2037,  3686,
     574,  2903,  3729,  1707,  1155,  2548,  1202,  1156,  1375,   138,
    1153,  1154,  1155,  1072,  1157,  1156,  2904,  1155,  3791,  3792,
    1156,  3794,  2628,   604,  3900,  2936,  1997,  4115,  1157,  2986,
    2001,  2549,   884,   885,   886,   887,   888,   889,   611, -1639,
    2561,  1026,  3901,  2987,   593,  1621,  1284,  1097,  2099,  3101,
    2404,  2506,   890,  2568,   613,  1155,  2200,  3914,  1156,  1157,
    1376,  1155,  1153,  1154,  1156,  3902,   594,  1155,   924,  2240,
    1156,  1153,  1154,  1155,  2997,  4116,  1156,  2004,  1135,  2550,
    2582,  3293,  2551, -1639,  1157,  2507,  1153,  1154,   545,  2050,
    2552,  1153,  1154,   630,  2770,  2749,  2241,   568,  2285,  3007,
     595,  1304,  2005,  2166,  3342,  1157,  1153,  1154,  1631,  3341,
    2500,   837,  1153,  1154,  1155,  4199,  4199,  1156,  1722,  1155,
    3008,  1157,  1156,  1155,  3948,  2153,  1156,   626,  1153,  1154,
    2937,  2680,  1155,  1153,  1154,  1156,  3559,    46,  1860,   924,
     862,  1153,  1154,   625,  1475,  2190,   991,  3635,  1203,  4107,
     838,   617,  2639,   607,   617,  1157,   134,  3174,  1155,   596,
     966,  1156,  1153,  1154,  2430,   607,  3736,  2388,  1155,  2069,
    1240,  1156,  3924,  2470,   924,  1240,  1155,  4165,  2212,  1156,
    1155,  1153,  1154,  1156,  2218,  2218,  3687,  2218,  3925,  3797,
    3363,  3186,  3803,  1860,  2157,  2235,   865,  1155,  1027,  3192,
    1156,  4117,   686,  3194,   617,  1155,  4022,  2004,  1156,  1155,
    4270,  1883,  1156,  2246,  1277,  1155,  1153,  1154,  1156,  1203,
    2264,  1153,  1154,   121,   607,  1884,  1153,  1154,   607,  4271,
    1155,  2264,  2005,  1156,  1157,  1517,  1157,  3364, -2543,   924,
     633,  1153,  1154,   135,   617,   617,   607,   607,  3003,  3258,
    2073,  1157,  3704,  2242,  1203,  3903,  1411,  1155,  1097,  1157,
    1156,  2218,  2218,  2218,  1157,  2082,   691,  1153,  1154,  3297,
    1632,  1013,  1014,  2083,  1277,  2094,  2278,  1517,  2090,  2594,
    1155,  2332,  3565,  1156,  2265,  2217,  2217,  2154,  2217,  3457,
    3236,   884,   885,  3804,   887,  2265,   889,  1153,  1154,    57,
    1861,  1155,  1157,  1155,  1156,  1444,  1156,   866,  1157,  3370,
    2328,   890,  1155,  1345,  1157,  1156,  2102,   607,  2553,  1517,
    1157,  2829,  2103,  2266,  4108,  2255,  2346,  4155,  2107,  1295,
    4159,  2790,   634,   607,  2108,  1412,  1153,  1154,   840,  3883,
    3884,  3885,  3886,  3139,  2289,  1153,  1154,  1312,  2282,  3140,
    3704,  1153,  1154,  3397,  2958,  1861,  1517,  3895,  1518,  1862,
    1517,  1157,  2217,  2217,  2217,   701,  1157,  1374,   499,  1155,
    1157,   500,  1156,  1374,  3288,  2109,  1153,  1154,  3896,  1157,
    2111,  2367,   867,  4091,  2114,  2432,   967, -1097, -1097,  3660,
    2374,  2375,  1885,  2117,  2267,  2494,  1262,  3305,  3306,  2510,
    1532,  2379,  2380,  2381,  2382,  1157,  2390,  2391,   637,   569,
    1153,  1154,   968,  1801,  3705,  1157,   569,  1913,  2342,  3319,
    2289,  1155,   639,  1157,  1156,   841,  1913,  1157,  2290,  2129,
    1155,  1153,  1154,  1156,  2357,   499,  1739,  2465,   500,  1903,
    1739,  2148,  1585,   653,  1157,  1155,   714,  2631,  1156,  4248,
    1155,  2479,  1157,  1156,  1621,  2188,  1157,  2404,  2956,   641,
    2184,  2554,  1157,  2189,  4092,  1155,  2980,  2015,  1156,  1886,
    2983,  1155, -1439,  3516,  1156,  2268,  2990,  1157,  2264,  1589,
   -1100, -1100,  3517,  1608,   563,  3661,   510,  1155,  2188,  3141,
    1156,  2994,  1155,   617,  1887,  1156,  3129,   617,   842,  2511,
    1155,  1621,   495,  1156,  1157,  2776,  3721,  1153,  1154,   607,
     607,  2533,  3846,  4023,  2536,  2072,  1190,  1913,  2995,  1057,
    1709,  1155, -1098, -1098,  1156,  3662,   655,  1157, -1439,  2555,
    2621,   980,  1263,  1621,   617,   784,  1802,  2853,   617,  2516,
    1155,  2996,  2265,  1156,  2291,  2292, -1717,  1904,  1157,  2596,
    1157, -1102, -1102,  3676,  1170, -1717,  1888,  2556,   656,  1157,
    2643,  3978,  2998, -1439,  3001,  2496,  1170,  2015,  1913,  3990,
    2266,  2430,  4075,  3006,  3464,  1155,  3677,  3465,  1156, -1439,
    1155,   981,  2293,  1156, -1439,  1155,  4076,   789,  1156,  3097,
    3037,  4078,  2070,  3996,  2096,  1583,  3999,  4000,  4001,  4002,
    1155, -1639,  2664,  1156, -1101, -1101,   799,  4024, -1439,   829,
    2530,  2531,   846,  3678,  2004, -1439,  1157,  3991,  2015, -1099,
   -1099,  3428,   850,  1896,  3518,   852,  1155, -1439,   617,  1156,
    3009,   870,  1896, -1103, -1103,  2071,  1190,  4025, -1439,  2005,
    1276,  2267,  2289, -1439,   872, -1639, -1717,   862,  3130,   956,
    1889,  2538, -1439,  2640,  1105,   957,  1155,   741,   617,  1156,
    1453,  1454,  1834,   832,   982,  2496,   970,  3503,  1157,  3131,
     897,   898,  3330,   979,  1122,  4093,  3332,  1157,   119,   617,
    1879,   991,  3011,   259,  1001,   261,  2269,  1136,  1137,  3648,
    1019,  3013,  1157,  4089,  4090,  1155,  1020,  1157,  1156,  1492,
     617,  1054,  4102,  3132,  1155,  1914,  3015,  1156,  1277,   119,
    1155,  3016,  1157,  1156,  1914,  1621,  2496,  1024,  1157,  3101,
    1905, -1439,  2268,  1896,  2392,  2393,  2688,  4097,  2953,  1906,
    2664,  1739,  3017,  1055,  1157,  1155,  1907,  3648,  1156,  1157,
    2688,  2863,  1056,  2864, -1439,  2016, -1097,  3628,  3324, -1097,
    1058,  1202,  1173, -1439,  2610,  1190,  1059,  2710,  3908,  3909,
    1202,  2713,  2649,  2650,  1173,   617,  2291,  2292,  1157, -1095,
     120,  1060, -1095,  1063,  1896,  2157,  2431,  2220,  2733,  2221,
    2735,  3910,  3325,  1064,  2865, -1439,  1065,  1157,  1717,   121,
   -1094,  1718,  2432, -1094,  1719,  1386,  1066,  1835,  1835,   897,
     898,  3326,  2643,  1190,  3104,  1914,  1194,  2866,  1067,  3926,
    3927,  1068,  2732,   950,   951,  1069,   952,  1070,   953,  1622,
    1073,  3556,  1157,  1075,  1387,  2999,  1190,  1157,   617,   617,
    1076,  1908,  1157,  1077,  3450, -1439,  3555,  3453,  3454, -1100,
     946,  3558, -1100,  1080,  2867,  2016,  3564,  1157,  3466,  3107,
    3108,  1202,  1081,  2302,  2303,  2304,  1914,  1082, -1439,   122,
    1215,  3566,  3111,  3112,  3338,  1190,  3366,  3367,  1083,  2479,
    1084,  3989,  1388,  1157,  2479,  1085,  1389,  1086,  2814,  2479,
     983, -1098,  1477,  2479, -1098,  2825,  1193,  3567,   123,  2803,
    3508,  3509,  3543,  3552,  1087,  2825,  2016,  2479,  2479,  2816,
     617,  2825,  1202,  1157, -1439,  2826,  2846,  3560,  1190,  2479,
   -1102,  1622,  1088, -1102,  1175,  1176,  1198,  3568,  1089,   924,
     607,  2827,  2828,  1092,  3667,  3668,  1909,  1098,   924,  2850,
    1099,  2825,  1100,  2269,  2858,  3577,  1190,  3671,  2479,  2887,
    2861,  2862,  1157,   124,  3674,   984,  1101,   985,  2857,  1102,
    2913,  1157,  1103,  3312,  1106,  1928,  3569,  1157, -1439,  1107,
    1929,  2383,  1930, -1101,  1931,  3637, -1101,  3593,  3594,  3696,
   -1439,  3879,  3698,  1108,  1932,  1933, -1104, -1104, -1099,  1241,
    2015, -1099,  1157,   607,  2479,  1109,  2914,  2015, -1439,  1110,
   -1439,  1111, -1103, -1097,  1112, -1103,  1478,  4298,  4299,  1203,
    1479,  3708,  2393,  1113,  3339,  1934,  2015,  1549,  1203,  1935,
    1936,  1480,  1644, -1439, -1439,  1937, -1095, -1439, -1439,   924,
    3744,  2860,  1114,  1938,  1115,  2384,  3723,  3724,  1390,  1243,
    2922,  1939,  3727,  3724,  4356,  3790,  3367,  1157,  1116,  2396,
    1940,  3793,  3724,  3800,  3801,  1117,  1180,  1181,  1182,  1183,
    1184,  1185,  1118,  2385,  1119,  1941,  1178,  1179,  1180,  1181,
    1182,  1183,  1184,  1185,  3893,  3894, -1717,  2347,  1249,  1437,
     924,  3922,  3112,  1942,  1120,   125,  3929,  3724,  3930,  3724,
    1121,  1943,  1944,  -617,  2939, -1717, -1100,  1125,  1945,  3932,
    3724,  3523,  2868,  2404,  3938,  3939,  1946,  3940,  3939,  1203,
    -880,  1251,  1947,  1126,  1391,  1129,  2405,  2383,  1553,  1130,
    2854,  1252,  1240,  1948,  2212,  1160,  1161,  1267,   617,   617,
     617,  4113,  3112,  1134,  2386,  2690,  4114,  3112, -1098,  3745,
    3746,  -617,  3778,  1949,  3747,  3748,  1896,  4120,  3367,  4163,
    4164,  2404,   607,  1896,  1138,  1481,   126,  4205,  4206,  1139,
    1203,  4259,  3260,  1162,  2405,  4345,  4346, -1102,  3737,  3738,
     617,  1140,  1896,  1622,  1163,  1611,  1612,  4095,  4095,  1392,
    1260,  2384,  1950,  3795,  3796,  3384,  3385,  1951,  1097,  3809,
    1141,   617,   617,   617,  1952,  3809,  3348,  3349,  3591,  3592,
    1169,  3548,  1013,  1014,  3128,  1739,  4080,  1142,  1645,  2385,
    1143,  1953,  1192,  2348,  1288,  2387,  3630,  -617,  1277,   127,
   -1101,  -954,  1261,   506,   123,  1290,  1554,  1165,  1291,  1307,
    1557,  1319,  2349,  1321,  1954, -1099,  1338,  1558,  3127,  1521,
    1522,  1523,  1339,  2350,  1621,  1340,  1343,  1346,  3988, -1103,
    1533,  1355,  1482,  3084,  1166,  1356,  1360,  1372,  1153,  1154,
    2004,  1381,  1382,  1383,  1398,  -617,  1401,   128,  2016,  1405,
    1955,   506,  1406,  1415,  1202,  2016,  1416,  1419,  1420,  1586,
    2386,  1202,  1590,  2479,  1422,  2005,  2479,  1427,  1956,  1432,
    2825,  1393,  1957,  1437,  2016,  1443,  1445,   666,  1604,  1605,
    1202,  1276,  1609,   617,  1447,  1170,  2479,  1450,  2004,  1451,
    2383,  1455,  1456,  2870,  1457,  1460,   522,  1559,  1167,  1461,
    1623,  1624,  1013,  1014,  2825,  1464,  2351,  1465,  1645,  1466,
    1958,  1394,  2825,  2005,  1486,  1959,  2825,  1487,  3180,  1491,
    1488,  1493,  1513,  2017,  1960, -1104,  1494,  3184, -1104,  1961,
    2017,  1188,  1962,  1545,  1546,  1547,  1548,  1549,  1511,  1517,
    1524,  2387,  3198,  1535,  1538,   607,  1573,  1582,  1583,  2017,
    3245,  1602,  3642,  1561,  2384,   523,   495,  1584,  1619,   686,
    3255,  1630,  2825,  1963,  1639,  1684,  1661,  1655,  1686,  1681,
    2383,  1690,  1687,  2872,  3262,  1693,  1262,  1964,  1965,  1966,
    1967,  1694,  2385,  1170,  1695,   524,  1696,  3273,  1697,  1698,
    1171,  1699,  1700,  3251,   607,  1646,  1711,  1713,  1712,  1714,
    1731,  1753,  1968,  1749,  3285,  1756,  2388,  1761,  1764,  1772,
    3754,  1647,  1780,  3265,  1172,  1621,   690,  1782,  -617,  3988,
    2352,   525,   924,   691,  1170,  2222,  1781,  1783,  1787,   924,
    1790,  1793,  1794,  1795,  2384,  1550,  1551,  1552,  1553,  1804,
    1812,  1816,  4029,  1345,   505,  1844,  3199,  1845,   924,  2223,
    2406,   695, -1439,  2386,  3781,  1345,  1846,  1847,  1969,  1970,
    1971,  1849,  2385,  2224,  1858,  1972,  -617,  1872,  1881,   526,
    1927,  2008,  1992,  2018,  2225,  2383,  3474,  1475,  2874,  3389,
    2018,  1973,  2009,  1173,  1974,  2011,  2029,  2030,  3337,  2353,
    1562,  2035,  2045,  2046,  2047,  3275,  2733,  3766,  2053,  2018,
    2059,  2078,  1203,  1013,  1014,  2086,  1564,  1975, -1439,  1203,
    2061,  2062,  1263,  2063,  2077,  3779,  2079,  4210,  1170,  3475,
    1976,  2084,   701,  3476,  2085,  3477,  2226,  2227,  1203,  2110,
    2732,  3780,   506,  2386,  2387,  2088,  2094,  2097,  2158,  2384,
    2492, -1439,  2101, -1439,  2688,  2105,  1554,  4352,  1555,  1556,
    1557,  1170,  2388,  2118,  2228,  2127,  4056,  1558,  2128, -1439,
    1217,  2119,  2710,  3377, -1439,  2124,  3379,  2385,   617,  -812,
    2139,  3478, -1104,  2140,  2141,  2165, -1155,   617, -1439,  1174,
    -880,  1173,  2171,  2640,  1185, -1268,  1078,   709, -1439,  2181,
    2201,  1123,  1127,  2215,  -617, -1439,   -66,  1155,   712,  2233,
    1156,   527,   713,   714,  2236,  1170,  2256, -1439,  2262,  1622,
    4210,  2273,  2276,  2297,  2387,   666,  2300,   507, -1439,  2301,
    2479,  2229,  1173, -1439,  2316,  2329,  2326,  2355,  2331,  2479,
    2336,  2825, -1439,  1175,  1176,  2356,  2359,  1559,  2386,  2360,
    2362,  1622,  -617,  2368,  2366,  3907,  1177,  2825,  2373,   607,
    2403,  2479,  2369,  2370,  1739,  1218,  2991,  2371,   782,  2404,
    2372,  2426,  2416,  1621,  2421,  2422,  2429,  4340,  2428,  2425,
    4215,  4216,   528,  4218,  2435,  2230,  2437,  1621,  2438,  2058,
    1219,  4349,  1621,  2439,  1220,  2446,  4340,  1621,  2447,   782,
    3642,  4349,  1560,  1561,  2451,  2452,  2457,   686,  2458,  2347,
    2467, -1439,  2486,  2347,  -781,   786,   787,  2482,  2495,   790,
     791,  2517,  3963,   793,  2913,   795,  1173,  2538,  2542,  2387,
    4255,  1221,  4256,  4257, -1439,  2534,  2547,  4186,  2562,  2563,
    2564,  1175,  1176, -1439,  2189,   529,  2637,  3536,  3536,  1222,
     530,  3505,  3612,  2648,  2647,  2388,  2100,  2575,  2654,  1173,
    2104,  2576,   617,  2587,   690,  2609,  2616,  2655,   531,  2618,
    2681,   691,  3528,  2627,  2619, -1439,  2620,  2636,  2656,  2123,
    2678,  2652,  1175,  1176,  2683,  1178,  1179,  1180,  1181,  1182,
    1183,  1184,  1185,   532,  2653,  4071,  2666,  2667,  2684,   695,
    3907,  2691,   733,  2692,  4069,  2696,  3643,  4310,   533,  3644,
    1767,  2700,   782,  1173,  1223,  1013,  1014,   782,  2714,   739,
    2715,  3479,  2717,  2718,   741, -1439,  2719,   742,  3480,  3601,
     508,  2308,  2307,  1622,  2736,  2388,  2739,  2740,  2756,  2764,
    1562,  2664,  4264,  2766,  4266,  2348,   782,  2765, -1439,  2348,
     617,  2786,  2782,  2787,  1157,  1563,  1564,  2800,   782,  1277,
    2832,  2834,  2896,  2902,  2349,  2906,  2908,  3481,  2349,  2919,
     701,  4283,  2920,  2924,  2925,  2350,  1175,  1176,  2926,  2350,
    3645,  3646,  2927,  1178,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  3536,  2950,   509, -1439,  -538,  1961,  2959,   510,   607,
     782,   782,   782,   782,  2054,  2963,  4313,  4314,  3657,  1175,
    1176,  2965,  2970,   782,  1739,  2972,  3028,  3081,  3034,  2973,
    3652,  3069,  2974,  1323,  1178,  1179,  1180,  1181,  1182,  1183,
    1184,  1185,  1324,   511,  3018,   709,  2975,  2976,  3482,   617,
    2388,   512,  1325,  3029,  1224,  3077,  3032,  3078, -1439,  3086,
     713,   714,  3074,  1225,  1326,  1327,  1328,  3036,  2351, -1439,
   -1439,  3041,  2351,  1175,  1176,  3044,  3699,  3089,  1226,  3090,
    1329,  1299,  3093,  3703,  3096,  3679,  3103,  3766, -1439,  3389,
   -1439,  3617,  3106,  3109,  3114,  3621,  1227,  3483,  1214,  3125,
    3273,  3126,  3137,  1160,  1161,  2317,  2318,  3152,  3155,  3147,
    3650,  3151,  1835, -1439, -1439,  3165,  3166, -1439, -1439,  3167,
    3177,  3183,   617,  3709,  3187,  3195,  3197,  3051,  3844,  1179,
    1180,  1181,  1182,  1183,  1184,  1185,  3052,  3196,  3246,  1228,
    3253,  1162,  3249,  3252,  3257,  3259,  3053,  4069,  3260,  3261,
    3274,  3268,  1163,  3484,  3269,  2289,  3277,  3283,  3054,  3055,
    3056,  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1229,
    1874,  3302,  3316,  3758,  3057,  3284,  3308,  3304,  3315,  2145,
    3328,  3023,  2352,  1954,  1929,  3344,  2352,   617,   499,  3345,
    3354,   500,  3357,  1883,  1164,  3359,  3355,  3362,  3382,  2713,
    3369,  3401,  3390,  3394,  3402,  1165,  3419,  1884,  3429,  3427,
    3430,  3435,  3536,  3536,  3444,  3536,  3907,  1180,  1181,  1182,
    1183,  1184,  1185,  3451,  3502,  3499,  2480,  3504,  3512,  3506,
    3525,  3515,  1166,  3524,  3526,  3529,  3530,  3532,  3538,  3541,
    3542,  3543,  1739,  3545,  3544,  3844,  3844,  4322,  4066,  3549,
     733,  2353,  3561,  3551,  3643,  2353,  3553,  3644,   782,  3554,
    3557,  3562,  3563,  3571,  3578,  3572,  3579,   739,  3580,  3596,
    3589,  3606,   741,  4322,  3597,   742,  3599,  3594,  3608,  3609,
    3613,  3129, -1351,  3614, -1356,  4354,  3854,   607,  4325,  3655,
    3625,  3658,  3683,  3638,  3639,  3684,  1167,  3641,  3536,  3666,
    3672,  3490,  1330,  3691,  3688,  3670,  3690,  3493,  3697,  3710,
    3726,   782,   782,  3711,  3731,  3733,  3735,  3734,  3739,  1331,
     782,   782,   782,   782,   782,   782,  3759,   607,  3645,  3646,
    3752,  3740,  3753,   782,   782,  3741,   782,   782,  3771,  3773,
     617,   782,  3799,  3805,   782,   782,   782,   782,   712,   782,
    3812,  3813,  3552,  3858,  3849,  3872,   782,   782,  3878,   782,
     782,  3882,  3880,   782,   782,   782,   782,   782,   782,   782,
     782,   782,  3891,   782,  1885,  3935,   782,   782,  3888,  3942,
    -313,   782,  3844,  3844,  3919,   782,   782,   782,  3855,  3921,
    3946,  3934,  3960,  3965,  3962,  3953,  3058,  3972,   782,   782,
     782,  3983,  3975,  3982,  3995,  4006,  3997,   782,  3998,  4003,
    1217,  4008,  4010,  3059,   782,   782,   782,  4015,   782,  2891,
    -331,  4033,  4036,  4099,  4063,   782,   782,   782,  3889,   782,
     782,   782,   782,   782,  4064,   782,   782,   782,   782,   782,
     782,   782,   782,  4061,  4065,  4079,   782,   782,  1332,  4082,
    4084,  1886,  4104,  4111,  4121,  4131,  4124,  4132,  4136,  4125,
    4142,  4144,  1622,  4147,  1932,  1933,  4143,  3844,  3758,  4167,
    4153,  4168,  3977,  1013,  1014,  4169,  1887,  4170,  4098,  4176,
    4177,  4180,  3844,  4178,  4179,  4181,  4182,  4187,  4189,  4191,
     845,  4192,  4195,  2713,  4201,  2713,  3844,  -746,  -746,  1935,
   -2243,  4217,  4214,  4135,  4219,  1218,  4220,  -746,  1333,  4230,
    4233,  4243,  4235,  1938,  4246,  1932,  1933,  4249,  4135,  4244,
    4252,  1939,  4258,  4037,  4261,  1334,  3060,  4262,  4263,  4267,
    1219,  4275,  4145,  4268,  1220,  4282,  4278,  4279,  1888,  4272,
    4280,  4286,  3061,  4288,  4291,  1941,  4294,  4292,  -746,  -746,
    1935,  4297,  4301,  4302,  3844,  4304,  4311,  4326,  -746,  1437,
    4327,  4341,  3955,  1942,  1938,  4351,  3844,  3844,  4331,  2645,
    2794,  1221,  1939,  3514,  3714,  1036,   617,  3973,  2643,  4072,
    1449,  1545,  1546,  1547,  1548,  1549,  4202,  3712,  4203,  1222,
    3716,  3853,  1947,  4343,  4306,   582,  1941,   934,  2208,  2298,
    3065,  4315,  3062,  3824,  4088,  3825,   782,  3827,  1061,  4200,
    1437,  3828,  3844,  4227,  1942,   782,  3830,  3831,  3832,  3063,
    3833,  4129,  3844,  3834,  3835,  4228,  3838,  3839,  3840,  4141,
    4140,  1925,  1889,  1490,  2471,  3191,  1977,  1091,  4212,  2695,
    3861,  3361,  3092,  1947,  1770,  3890,  3993,  4083,  4135,  1104,
    3602,  4277,  4213,  1622,  1223,  4251,  2014,   654,  4242,  3844,
    2469,  3844,  3531,  4005,  3266,  2944,  3443,  1951,  2893,  3431,
    2476,  3844,  3458,  3500,  1952,  3459,   617,  3807,  3651,  3689,
    4152,  3675,  3020,  1550,  1551,  1552,  1553,  3331,  3844,  3333,
    3844,  1953,  3844,  2784,  1147,  3329,  4018,  4160,  4161,  3844,
     519,  3980,  3168,  4020,  2044,  2529,  3985,  4274,  3871,  3844,
    3810,  2473,  2881,  1859,  3654,  3432,  2697,  3083,  1951,  2281,
    2679,  3358,   955,  3844,  3844,  1952,  4135,  2012,  4135,  2615,
    2000,  2720,  2306,  1350,  3340,  4293,   617,  3414,  3629,  3844,
    3844,  2560,  1953,  3043,  3844,  4135,  2777,  3398,  4017,  2614,
    1955,  3928,  2913,  2913,  1581,  2519,  4222,  3513,  4223,  1534,
    3438,  2634,  4232,  3775,  4096,  3768,  4296,  2727,  1956,  4240,
    2532,   960,   961,  1758,  1683,  4135,  4135,  1785,  2703,  3604,
    4330,   782,  2677,  3373,  1224,  3372,   962,  3408,   943,  4150,
    2052,   963,  1053,  1225,  1554,  2338,  1555,  1556,  1557,  1287,
     855,  1955,  1828,  1285,   546,  1558,  2339,  2202,  1226,  3442,
    4276,  1850,  1792,  4344,  3360,  4295,  4171,  4221,  4350,  1956,
    4353,  3682,  3376,  1807,  1960,  3136,  1227,  1353,  2244,  2325,
    1354,  2741,  1962,  3135,  3134,  3076,  2261,  4284,  1799,   877,
    1337,  1724,  4289,  3881,  2034,  3887,  3066,   879,  1342,   648,
     649,  3964,  3707,  1040,  1041,  1042,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1228,
       0,   782,   782,   782,     0,  1960,     0,  4323,     0,     0,
       0,     0,     0,  1962,     0,  1559,   782,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1229,
       0,  1622,  1968,  4323,     0,     0,     0,     0,     0,     0,
       0,   617,   782,     0,     0,  1622,     0,     0,   782,     0,
    1622,   782,     0,   782,     0,  1622,     0,     0,     0,   782,
       0,   782,   782,     0,     0,     0,     0,     0,     0,  1472,
    1560,  1561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1968,     0,     0,     0,     0,  1969,  1970,
    1971,     0,     0,     0,     0,  1972,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1973,     0,     0,  1974,     0,     0,     0,     0,     0,
       0,     0,  1515,  1516,     0,   782,     0,     0,     0,     0,
       0,  1526,  1527,     0,     0,  1530,  1531,     0,     0,  1969,
    1970,  1971,     0,     0,  1539,  1540,  1972,  1541,  1542,     0,
    1976,     0,  1567,     0,     0,  1575,  1576,  1577,  1578,     0,
    1580,     0,  1973,     0,   782,  1974,     0,  1587,  1588,     0,
    1591,  1592,     0,     0,  1593,  1594,     0,  1596,  1597,  1598,
    1599,  1600,  1601,     0,  1603,     0,     0,  1606,  1607,     0,
       0,     0,  1610,     0,     0,     0,  1613,  1617,  1618,     0,
       1,  1976,     2,     0,     0,     0,  2946,     0,  1562,  1625,
    1626,  1627,     0,     0,     0,     0,     0,     3,  1635,     0,
       0,     4,     0,  1563,  1564,  1640,  1641,  1642,   800,   801,
       0,     0,     0,     0,     0,     5,     6,     0,     0,     0,
       0,     0,     0,     7,     0,     0,     0,     8,     9,     0,
       0,     0,     0,     0,     0,  2520,     0,     0,  1678,     0,
       0,     0,     0,    10,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,     0,     0,     0,     0,
     802,     0,    13,    14,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,   803,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,     0,   804,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      20,     0,     0,     0,     0,     0,     0,     0,   805,     0,
       0,   806,     0,     0,     0,    21,     0,    22,     0,     0,
       0,     0,    23,     0,   807,    24,   782,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,    27,     0,     0,   808,  1806,     0,     0,
       0,    28,     0,    29,     0,     0,  1815,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    30,     0,   782,   809,     0,     0,   782,     0,     0,
     810,     0,   782,   782,     0,     0,     0,     0,    31,     0,
       0,     0,    32,   782,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   782,   782,   782,   782,     0,   782,   782,
     782,   782,   782,     0,   782,     0,     0,     0,     0,     0,
       0,   811,     0,   782,     0,     0,     0,   782,     0,   782,
     782,     0,   782,   782,     0,     0,     0,   782,   782,   782,
       0,     0,     0,   782,   782,   782,     0,   782,     0,   782,
       0,   782,     0,   782,     0,   782,     0,     0,     0,     0,
     782,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   782,     0,     0,     0,     0,     0,    33,   782,
       0,     0,   782,     0,     0,     0,     0,     0,   782,     0,
       0,   782,     0,     0,     0,   782,     0,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      35,     0,  2064,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,   812,    38,     0,    39,   813,
       0,    40,   782,     0,    41,    42,   782,     0,     0,     0,
       0,     0,     0,     0,    43,   814,    44,     0,     0,     0,
     782,     0,     0,   815,    45,     0,     0,     0,     0,     0,
      46,   816,     0,     0,     0,     0,     0,     0,    47,     0,
       0,     0,     1,    48,     2,    49,     0,     0,     0,     0,
       0,     0,  2131,  2133,  2135,     0,     0,     0,     0,   817,
    3200,  3201,     0,     4,     0,     0,  3202,     0,  3203,     0,
    3204,  3205,   818,   819,     0,    50,     0,     5,     6,     0,
       0,     0,     0,     0,     0,     7,     0,  3206,     0,     8,
       9,     0,     0,  2173,     0,     0,     0,     0,     0,     0,
       0,     0,  2178,     0,  2179,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   820,    11,     0,    51,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3207,     0,    52,  3208,     0,
       0,    53,     0,     0,    54,    12,  3209,     0,     0,    55,
       0,   821,     0,     0,    13,    14,    15,     0,     0,     0,
       0,     0,     0,     0,     0,  3210,     0,    16,    17,     0,
       0,     0,     0,   822,     0,   823,  2238,    56,     0,     0,
       0,     0,  3211,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    57,     0,    19,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3212,     0,
    3213,     0,    20,     0,     0,  2277,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    21,     0,    22,
       0,     0,     0,     0,    23,     0,     0,    24,     0,     0,
       0,     0,     0,     0,     0,   874,   801,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,     0,    29,     0,  3214,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   782,     0,     0,
      31,   782,     0,     0,    32,     0,  3215,  3216,     0,  3217,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     782,   782,     0,     0,     0,     0,     0,   802,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     782,     0,     0,     0,     0,  3218,  3219,  3220,     0,   782,
       0,   782,     0,   782,     0,     0,     0,     0,   803,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3221,   804,     0,  3222,     0,     0,     0,     0,     0,
       0,     0,     0,   782,     0,     0,     0,     0,   782,     0,
       0,  3223,  3224,     0,     0,   805,     0,     0,   806,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   807,     0,     0,     0,   782,     0,     0,     0,    34,
       0,     0,     0,     0,     0,     0,     0,   782,     0,   782,
       0,     0,    35,   808,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,  2487,     0,     0,
       0,  3225,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   809,     0,     0,     0,    37,     0,   810,    38,     0,
      39,     0,     0,    40,     0,     0,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,    44,     0,
       0,     0,     0,     0,  2541,     0,    45,     0,  2543,     0,
       0,     0,    46,  2545,  2546,  3226,     0,     0,   811,  3227,
      47,     0,     0,     0,   801,    48,     0,    49,     0,     0,
       0,  3228,     0,     0,  2565,  2566,  2567,     0,     0,  2569,
    2570,  2571,  2572,  2573,     0,     0,     0,     0,     0,     0,
     782,     0,     0,     0,  2577,     0,     0,    50,  2578,     0,
    2579,  2580,     0,  2581,     0,     0,     0,     0,  2584,  2585,
    2586,     0,     0,     0,  2588,  2589,  2590,     0,  2591,     0,
    2593,     0,  2595,     0,  2597,     0,  2598,     0,     0,  3229,
       0,  2599,  3230,     0,     0,  3231,  3232,  3233,  3234,     0,
       0,     0,     0,     0,     0,   802,     0,    51,     0,     0,
       0,     0,     0,  2622,     0,     0,     0,     0,     0,    52,
       0,     0,     0,    53,     0,     0,    54,     0,     0,  2632,
       0,    55,  2635,     0,     0,     0,   803,  3235,  3236,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     804,     0,   812,     0,     0,     0,   875,     0,     0,    56,
       0,     0,  3237,     0,     0,     0,   782,   782,     0,     0,
       0,     0,   814,   805,    57,     0,   806,     0,     0,     0,
     815,     0,     0,     0,     0,     0,     0,     0,   816,   807,
       0,     0,     0,  2669,     0,     0,     0,  2675,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   808,     0,     0,     0,     0,   817,     0,     0,     0,
       0,     0,     0,     0,     0,   782,     0,     0,     0,   818,
     819,     0,     0,     0,     0,     0,     0,     0,     0,   809,
       0,     0,     0,     0,     0,   810,     0,     0,     0,   782,
       0,   853,   896,   782,   782,     0,   782,     0,     0,     0,
       0,     0,     0,     0,   782,     0,     0,     0,     0,   782,
       0,     0,   782,     0,   782,   782,   897,   898,     0,   820,
       0,     0,     0,     0,     0,     0,   811,   899,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2879,     0,     0,
       0,     0,  1929,     0,  1930,     0,     0,   782,   821,     0,
     900,     0,   901,     0,     0,     0,  1932,  1933,     0,     0,
       0,     0,   902,     0,     0,     0,     0,     0,     0,     0,
     822,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,   782,     0,     0,     0,     0,   782,  1934,     0,     0,
       0,  1935,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1938,     0,     0,     0,   782,
   -1717,   903,     0,  1939,     0,     0,   904,     0,     0,   905,
       0,     0,  1940,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1941,     0,     0,
       0,     0,     0,     0,     0,     0,  1932,  1933,   906,     0,
     907,  1437,     0,     0,     0,  1942,     0,   908,     0,   909,
     812,     0,     0,  1943,   782,     0,     0,     0,     0,     0,
    2880,     0,   782,     0,     0,     0,     0,     0,  1946,     0,
     814,  1935,     0,     0,  1947,   910,   911,     0,   815,     0,
       0,     0,     0,     0,     0,  1938,   816,     0,     0,     0,
       0,     0,     0,  1939,     0,     0,     0,     0,     0,   912,
       0,     0,     0,     0,     0,  1949,     0,     0,     0,     0,
       0,     0,     0,     0,   817,     0,     0,  1941,  2955,     0,
     913,     0,  2957,     0,     0,     0,     0,   818,   819,     0,
       0,  1437,     0,     0,     0,  1942,     0,     0,     0,     0,
       0,  2978,  2979,     0,     0,     0,     0,     0,     0,  1951,
       0,     0,     0,   914,     0,     0,  1952,     0,     0,     0,
       0,  3000,     0,     0,  1947,     0,     0,     0,     0,     0,
    3010,     0,  3012,  1953,  3014,     0,     0,   820,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1954,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   915,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   822,     0,
     823,     0,  1955,     0,     0,     0,  3075,     0,     0,  1951,
       0,     0,     0,  1932,  1933,   916,  1952,     0,  2675,     0,
    1956,     0,     0,     0,  1957,   917,   918,     0,     0,   919,
     920,     0,     0,  1953,     0,     0,     0,   782,     0,     0,
       0,     0,     0,     0,     0,     0,  -746,  -746,  1935,     0,
     921,     0,     0,     0,     0,     0,  -746,     0,     0,     0,
       0,     0,  1938,     0,     0,     0,     0,  1959,     0,     0,
    1939,     0,   782,   782,     0,     0,  1960,     0,   782,     0,
       0,     0,     0,     0,  1962,     0,   782,     0,     0,     0,
       0,     0,  1955,     0,  1941,     0,   922,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1437,   923,
    1956,     0,  1942,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1965,  3160,     0,     0,     0,     0,     0,     0,     0,     0,
   -2282,  1947,     0,     0,   924,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1968,     0,     0,     0,     0,     0,
       0,     0,   925,     0,     0,     0,  1960,     0,     0,     0,
       0,     0,     0,     0,  1962,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1969,  1970,  1971,     0,     0,     0,  1951,  1972,     0, -2282,
       0,     0,     0,  1952,     0,   926,   782,     0,     0,     0,
       0,     0,     0,  1973,     0,     0,  1974,     0,     0,     0,
    1953,     0,     0,     0,  1968,     0,     0,  3247,  3248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   782,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1976,     0,     0,   782,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   782,   782,     0,     0,  1955,
    1969,  1970,  1971,     0,     0,     0,  3289,  1972,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1956,     0,     0,
       0,     0,     0,  1973,     0,     0,  1974,     0,     0,     0,
    3307,     0,     0,     0,  3310,  3311,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3318,     0,     0,     0,     0,
    3320,     0,     0,  3321,     0,  3322,  3323,     0,     0,     0,
       0,     0,  1976,     0,     0,     0,     0,     0,     0,  3842,
       0,     0,     0,  1960,     0,     0,     0,     0,     0,     0,
       0,  1962,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   782,  3351,     0,     0,     0,     0,  2675,     0,     0,
       0,   782,     0,     0,     0,     0,     0,   782,     0,   782,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3351,  1968,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     782,     0,     0,     0,     0,     0,  3842,  3842,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3413,     0,  1969,  1970,  1971,
       0,     0,     0,  3424,  1972,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1973,     0,     0,  1974,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1976,
       0,     0,     0,     0,     0,     0,     0,   782,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   782,
       0,   782,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   782,     0,  3842,  3842,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4077,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   782,     0,  3842,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3351,     0,
       0,     0,     0,  3842,   782,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3842,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   782,     0,     0,
       0,     0,     0,  3623,  3624,     0,     0,     0,     0,  3627,
       0,     0,     0,     0,     0,     0,     0,  3160,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   782,  3842,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3842,  3842,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   782,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3842,     0,     0,     0,     0,     0,     0,
     782,     0,     0,  3842,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   782,     0,     0,     0,     0,     0,     0,
    3842,     0,  3842,     0,     0,     0,     0,  3732,     0,     0,
       0,     0,  3842,     0,     0,     0,   782,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3842,
       0,  3842,     0,  3842,     0,     0,     0,     0,     0,     0,
    3842,     0,  3351,     0,     0,     0,     0,     0,     0,     0,
    3842,     0,     0,     0,     0,     0,  3160,     0,     0,     0,
       0,     0,     0,     0,  3842,  3842,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3776,  3777,     0,     0,
    3842,  3842,     0,     0,     0,  3842,     0,     0,     0,     0,
       0,   782,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   782,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3913,     0,     0,     0,     0,     0,  3918,     0,
    3920,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3941,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3160,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4031,     0,  4032,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4040,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4133,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3351,     0,
       0,     0,     0,     0,   141,     0,   662,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     663,     0,   150,   151,   152,   153,   664,   155,     0,   156,
       0,     0,   665,   157,   666,   667,   668,   158,   669,     0,
     159,   160,   161,  1614,   162,  4185,   163,   164,     0,     0,
     165,   670,   671,   166,   167,     0,   168,   672,   673,   170,
       0,   171,   172,   173,   174,   674,   176,     0,   675,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
     676,   677,   195,     0,     0,   196,   678,   197,   679,     0,
     198,   680,   681,     0,   199,   200,   201,   682,   683,   684,
       0,  4234,     0,     0,   685,   204,   686,     0,     0,   687,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,  4260,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   688,     0,   232,   233,   234,
     235,   236,   689,   690,   237,   238,     0,   239,   240,   241,
     691,     0,   242,     0,     0,     0,   692,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   693,     0,   251,     0,
     252,     0,   694,     0,   253,   254,     0,   255,   695,     0,
     256,   257,     0,     0,     0,   696,   259,   260,   261,   697,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,   698,   266,   267,   699,     0,     0,   268,
       0,     0,  4332,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,  1615,   276,     0,
     700,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,  3351,   282,     0,   283,   284,     0,     0,   701,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   702,   306,   307,
     308,   309,   703,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   704,   317,     0,     0,   705,   319,   706,
     320,     0,   321,   707,   708,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   709,   331,   332,     0,     0,   333,
     334,   335,   336,   710,   711,   712,   337,   338,     0,   713,
     714,   339,     0,   340,   341,   715,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,   716,   350,   351,     0,
     352,   353,   717,   355,   356,   357,   358,   359,   360,   361,
     718,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   719,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,   720,   721,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   722,     0,   723,   398,   399,
     400,   401,   402,   724,   725,   405,   406,   407,   408,     0,
     726,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   727,   728,   439,   440,     0,   441,   442,   729,
     444,   445,   446,   730,   731,   447,   448,   449,   450,   732,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   733,
     457,   458,     0,   734,   735,   736,   737,     0,     0,     0,
       0,  1616,   463,   464,     0,   738,   739,   740,   466,   467,
     468,   741,   469,   470,   742,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   743,
     479,     0,     0,   744,   745,   746,   747,   480,     0,     0,
     481,   748,     0,   749,   482,   483,   484,   750,   751,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   752,     0,     0,     0,   753,   754,     0,
       0,     0,     0,   755,   756,     0,     0,   757,   758,     0,
       0,   759,   760,   141,     0,   662,   143,   144,   145,   146,
    2671,     0,   147,     0,     0,     0,   148,     0,     0,   663,
       0,   150,   151,   152,   153,   664,   155,     0,   156,     0,
       0,  2672,   157,   666,   667,   668,   158,   669,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     670,   671,   166,   167,     0,   168,   672,   673,   170,     0,
     171,   172,   173,   174,   674,   176,     0,   675,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,   676,
     677,   195,     0,     0,   196,   678,   197,   679,     0,   198,
     680,   681,     0,   199,   200,   201,   682,   683,   684,     0,
       0,     0,     0,   685,   204,   686,     0,     0,  2673,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   688,     0,   232,   233,   234,   235,
     236,   689,   690,   237,   238,     0,   239,   240,   241,   691,
       0,   242,     0,     0,     0,   692,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   693,     0,   251,     0,   252,
       0,   694,     0,   253,   254,     0,   255,   695,     0,   256,
     257,     0,     0,     0,   696,   259,   260,   261,   697,     0,
     262,   263,     0,     0,     0,   264,     0,     0,   265,     0,
       0,     0,   698,   266,   267,   699,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   700,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   701,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   702,   306,   307,   308,
     309,   703,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   704,   317,     0,     0,   705,   319,   706,   320,
       0,   321,   707,   708,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   709,   331,   332,     0,     0,   333,   334,
     335,   336,   710,   711,   712,   337,   338,     0,   713,   714,
     339,     0,   340,   341,   715,  2674,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,   716,   350,   351,     0,   352,
     353,   717,   355,   356,   357,   358,   359,   360,   361,   718,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   719,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,   720,   721,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   722,     0,   723,   398,   399,   400,
     401,   402,   724,   725,   405,   406,   407,   408,     0,   726,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   727,   728,   439,   440,     0,   441,   442,   729,   444,
     445,   446,   730,   731,   447,   448,   449,   450,   732,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   733,   457,
     458,     0,   734,   735,   736,   737,     0,     0,     0,     0,
       0,   463,   464,     0,   738,   739,   740,   466,   467,   468,
     741,   469,   470,   742,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   743,   479,
       0,     0,   744,   745,   746,   747,   480,     0,     0,   481,
     748,     0,   749,   482,   483,   484,   750,   751,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   752,     0,     0,     0,   753,   754,     0,     0,
       0,     0,   755,   756,     0,     0,   757,   758,     0,     0,
     759,   760,   141,     0,   662,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   663,     0,
     150,   151,   152,   153,   664,   155,     0,   156,     0,     0,
     665,   157,   666,   667,   668,   158,   669,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,   670,
     671,   166,   167,     0,   168,   672,   673,   170,     0,   171,
     172,   173,   174,   674,   176,     0,   675,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,   676,   677,
     195,     0,     0,   196,   678,   197,   679,     0,   198,   680,
     681,     0,   199,   200,   201,   682,   683,   684,     0,     0,
       0,     0,   685,   204,   686,     0,     0,   687,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   688,     0,   232,   233,   234,   235,   236,
     689,   690,   237,   238,     0,   239,   240,   241,   691,     0,
     242,     0,     0,     0,   692,   244,  2130,   245,     0,   246,
       0,   247,   248,   249,   693,     0,   251,     0,   252,     0,
     694,     0,   253,   254,     0,   255,   695,     0,   256,   257,
       0,     0,     0,   696,   259,   260,   261,   697,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,   698,   266,   267,   699,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,   700,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,   701,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   702,   306,   307,   308,   309,
     703,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   704,   317,     0,     0,   705,   319,   706,   320,     0,
     321,   707,   708,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   709,   331,   332,     0,     0,   333,   334,   335,
     336,   710,   711,   712,   337,   338,     0,   713,   714,   339,
       0,   340,   341,   715,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,   716,   350,   351,     0,   352,   353,
     717,   355,   356,   357,   358,   359,   360,   361,   718,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   719,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     720,   721,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   722,     0,   723,   398,   399,   400,   401,
     402,   724,   725,   405,   406,   407,   408,     0,   726,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     727,   728,   439,   440,     0,   441,   442,   729,   444,   445,
     446,   730,   731,   447,   448,   449,   450,   732,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   733,   457,   458,
       0,   734,   735,   736,   737,     0,     0,     0,     0,     0,
     463,   464,     0,   738,   739,   740,   466,   467,   468,   741,
     469,   470,   742,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   743,   479,     0,
       0,   744,   745,   746,   747,   480,     0,     0,   481,   748,
       0,   749,   482,   483,   484,   750,   751,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   752,     0,     0,     0,   753,   754,     0,     0,     0,
       0,   755,   756,     0,     0,   757,   758,     0,     0,   759,
     760,   141,     0,   662,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   663,     0,   150,
     151,   152,   153,   664,   155,     0,   156,     0,     0,   665,
     157,   666,   667,   668,   158,   669,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,   670,   671,
     166,   167,     0,   168,   672,   673,   170,     0,   171,   172,
     173,   174,   674,   176,     0,   675,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,   676,   677,   195,
       0,     0,   196,   678,   197,   679,     0,   198,   680,   681,
       0,   199,   200,   201,   682,   683,   684,     0,     0,     0,
       0,   685,   204,   686,     0,     0,   687,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   688,     0,   232,   233,   234,   235,   236,   689,
     690,   237,   238,     0,   239,   240,   241,   691,     0,   242,
       0,     0,     0,   692,   244,  2132,   245,     0,   246,     0,
     247,   248,   249,   693,     0,   251,     0,   252,     0,   694,
       0,   253,   254,     0,   255,   695,     0,   256,   257,     0,
       0,     0,   696,   259,   260,   261,   697,     0,   262,   263,
       0,     0,     0,   264,     0,     0,   265,     0,     0,     0,
     698,   266,   267,   699,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   700,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   701,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   702,   306,   307,   308,   309,   703,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     704,   317,     0,     0,   705,   319,   706,   320,     0,   321,
     707,   708,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   709,   331,   332,     0,     0,   333,   334,   335,   336,
     710,   711,   712,   337,   338,     0,   713,   714,   339,     0,
     340,   341,   715,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,   716,   350,   351,     0,   352,   353,   717,
     355,   356,   357,   358,   359,   360,   361,   718,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   719,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,   720,
     721,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   722,     0,   723,   398,   399,   400,   401,   402,
     724,   725,   405,   406,   407,   408,     0,   726,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   727,
     728,   439,   440,     0,   441,   442,   729,   444,   445,   446,
     730,   731,   447,   448,   449,   450,   732,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   733,   457,   458,     0,
     734,   735,   736,   737,     0,     0,     0,     0,     0,   463,
     464,     0,   738,   739,   740,   466,   467,   468,   741,   469,
     470,   742,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   743,   479,     0,     0,
     744,   745,   746,   747,   480,     0,     0,   481,   748,     0,
     749,   482,   483,   484,   750,   751,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     752,     0,     0,     0,   753,   754,     0,     0,     0,     0,
     755,   756,     0,     0,   757,   758,     0,     0,   759,   760,
     141,     0,   662,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   663,     0,   150,   151,
     152,   153,   664,   155,     0,   156,     0,     0,   665,   157,
     666,   667,   668,   158,   669,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,   670,   671,   166,
     167,     0,   168,   672,   673,   170,     0,   171,   172,   173,
     174,   674,   176,     0,   675,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,   676,   677,   195,     0,
       0,   196,   678,   197,   679,     0,   198,   680,   681,     0,
     199,   200,   201,   682,   683,   684,     0,     0,     0,     0,
     685,   204,   686,     0,     0,   687,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   688,     0,   232,   233,   234,   235,   236,   689,   690,
     237,   238,     0,   239,   240,   241,   691,     0,   242,     0,
       0,     0,   692,   244,  2134,   245,     0,   246,     0,   247,
     248,   249,   693,     0,   251,     0,   252,     0,   694,     0,
     253,   254,     0,   255,   695,     0,   256,   257,     0,     0,
       0,   696,   259,   260,   261,   697,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,   698,
     266,   267,   699,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,   700,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,   701,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   702,   306,   307,   308,   309,   703,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   704,
     317,     0,     0,   705,   319,   706,   320,     0,   321,   707,
     708,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     709,   331,   332,     0,     0,   333,   334,   335,   336,   710,
     711,   712,   337,   338,     0,   713,   714,   339,     0,   340,
     341,   715,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,   716,   350,   351,     0,   352,   353,   717,   355,
     356,   357,   358,   359,   360,   361,   718,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     719,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,   720,   721,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   722,     0,   723,   398,   399,   400,   401,   402,   724,
     725,   405,   406,   407,   408,     0,   726,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   727,   728,
     439,   440,     0,   441,   442,   729,   444,   445,   446,   730,
     731,   447,   448,   449,   450,   732,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   733,   457,   458,     0,   734,
     735,   736,   737,     0,     0,     0,     0,     0,   463,   464,
       0,   738,   739,   740,   466,   467,   468,   741,   469,   470,
     742,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   743,   479,     0,     0,   744,
     745,   746,   747,   480,     0,     0,   481,   748,     0,   749,
     482,   483,   484,   750,   751,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   752,
       0,     0,     0,   753,   754,     0,     0,     0,     0,   755,
     756,     0,     0,   757,   758,     0,     0,   759,   760,   141,
       0,   662,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,   663,     0,   150,   151,   152,
     153,   664,   155,     0,   156,     0,     0,   665,   157,   666,
     667,   668,   158,   669,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,   670,   671,   166,   167,
       0,   168,   672,   673,   170,     0,   171,   172,   173,   174,
     674,   176,     0,   675,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,   676,   677,   195,     0,     0,
     196,   678,   197,   679,     0,   198,   680,   681,     0,   199,
     200,   201,   682,   683,   684,     0,     0,     0,     0,   685,
     204,   686,     0,     0,   687,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     688,     0,   232,   233,   234,   235,   236,   689,   690,   237,
     238,     0,   239,   240,   241,   691,     0,   242,     0,     0,
       0,   692,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   693,     0,   251,     0,   252,     0,   694,     0,   253,
     254,     0,   255,   695,     0,   256,   257,     0,     0,     0,
     696,   259,   260,   261,   697,     0,   262,   263,     0,     0,
       0,   264,     0,     0,   265,     0,     0,     0,   698,   266,
     267,   699,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   700,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   701,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   702,   306,   307,   308,   309,   703,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   704,   317,
       0,     0,   705,   319,   706,   320,     0,   321,   707,   708,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   709,
     331,   332,     0,     0,   333,   334,   335,   336,   710,   711,
     712,   337,   338,     0,   713,   714,   339,     0,   340,   341,
     715,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,   716,   350,   351,     0,   352,   353,   717,   355,   356,
     357,   358,   359,   360,   361,   718,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   719,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,   720,   721,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     722,     0,   723,   398,   399,   400,   401,   402,   724,   725,
     405,   406,   407,   408,     0,   726,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   727,   728,   439,
     440,     0,   441,   442,   729,   444,   445,   446,   730,   731,
     447,   448,   449,   450,   732,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   733,   457,   458,     0,   734,   735,
     736,   737,     0,     0,     0,     0,     0,   463,   464,     0,
     738,   739,   740,   466,   467,   468,   741,   469,   470,   742,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   743,   479,     0,     0,   744,   745,
     746,   747,   480,     0,     0,   481,   748,     0,   749,   482,
     483,   484,   750,   751,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   752,     0,
       0,     0,   753,   754,     0,     0,     0,     0,   755,   756,
       0,     0,   757,   758,     0,     0,   759,   760,   141,     0,
     662,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   663,     0,   150,   151,   152,   153,
     664,   155,     0,   156,     0,     0,   665,   157,   666,   667,
     668,   158,   669,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   670,   671,   166,   167,     0,
     168,   672,   673,   170,     0,   171,   172,   173,   174,   674,
     176,     0,   675,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,   676,   677,   195,     0,     0,   196,
     678,   197,   679,     0,   198,   680,   681,     0,   199,   200,
     201,   682,   683,   684,     0,     0,     0,     0,   685,   204,
     686,     0,     0,   687,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   688,
       0,   232,   233,   234,   235,   236,   689,   690,   237,   238,
       0,   239,   240,   241,   691,     0,   242,     0,     0,     0,
     692,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     693,     0,   251,     0,   252,     0,   694,     0,   253,   254,
       0,   255,   695,     0,   256,   257,     0,     0,     0,   696,
     259,   260,   261,   697,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,   698,   266,   267,
     699,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,   700,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,   701,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,   702,   306,   307,   308,   309,   703,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   704,   317,     0,
       0,   705,   319,   706,   320,     0,   321,   707,   708,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   709,   331,
     332,     0,     0,   333,   334,   335,   336,   710,   711,   712,
     337,   338,     0,   713,   714,   339,     0,   340,   341,   715,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
     716,   350,   351,     0,   352,   353,   717,   355,   356,   357,
     358,   359,   360,   361,   718,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   719,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,   720,   721,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   722,
       0,   723,   398,   399,   400,   401,   402,   724,   725,   405,
     406,   407,   408,     0,   726,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   727,   728,   439,   440,
       0,   441,   442,   729,   444,   445,   446,   730,   731,   447,
     448,   449,   450,   732,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   733,   457,   458,     0,   734,   735,   736,
     737,     0,     0,     0,     0,     0,   463,   464,     0,   738,
     739,   740,   466,   467,   468,   741,   469,   470,   742,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   743,   479,     0,     0,   744,   745,   746,
     747,   480,     0,     0,   481,   748,     0,   749,   482,   483,
     484,   750,   751,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   752,     0,     0,
       0,   753,   754,     0,     0,     0,     0,   755,  1090,     0,
       0,   757,   758,     0,     0,   759,   760,   141,     0,   662,
     143,   144,   145,   146,  1649,     0,   147,     0,     0,     0,
    1650,     0,     0,   663,     0,   150,   151,   152,   153,   664,
     155,     0,   156,     0,     0,   665,   157,   666,   667,   668,
     158,   669,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,   670,   671,   166,   167,     0,   168,
     672,   673,   170,     0,   171,   172,   173,   174,   674,   176,
       0,   675,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,   676,   677,   195,     0,     0,   196,   678,
     197,   679,     0,   198,   680,   681,     0,   199,   200,   201,
     682,   683,   684,     0,     0,     0,     0,   685,   204,   686,
       0,     0,   687,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,   688,     0,
     232,   233,   234,   235,   236,   689,   690,   237,   238,     0,
     239,   240,   241,   691,     0,   242,     0,     0,     0,   692,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   693,
       0,   251,     0,   252,     0,   694,     0,   253,   254,     0,
     255,   695,     0,   256,   257,     0,     0,     0,   696,   259,
     260,   261,   697,     0,   262,   263,     0,     0,     0,   264,
       0,     0,   265,     0,     0,     0,   698,   266,   267,   699,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   700,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   701,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     702,   306,   307,   308,   309,   703,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   704,   317,     0,     0,
     705,   319,   706,   320,     0,   321,   707,   708,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   709,   331,   332,
       0,     0,   333,   334,   335,   336,   710,     0,   712,   337,
     338,     0,   713,   714,   339,     0,   340,   341,   715,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,   716,
     350,   351,     0,   352,   353,   717,   355,   356,   357,   358,
     359,   360,   361,   718,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   719,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,   720,   721,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   722,     0,
     723,   398,   399,   400,   401,   402,   724,   725,   405,   406,
     407,   408,     0,   726,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   727,   728,   439,   440,     0,
     441,   442,   729,   444,   445,   446,   730,   731,   447,   448,
     449,   450,   732,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   733,   457,   458,     0,   734,   735,   736,   737,
       0,     0,     0,     0,     0,   463,   464,     0,   738,   739,
     740,   466,   467,   468,   741,   469,   470,   742,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   743,   479,     0,     0,   744,   745,   746,   747,
     480,     0,     0,   481,   748,     0,   749,   482,   483,   484,
     750,   751,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   752,     0,     0,     0,
     753,   754,     0,     0,     0,     0,   755,   756,     0,     0,
     757,   758,     0,     0,   759,   760,   141,     0,   662,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   663,     0,   150,   151,   152,   153,   664,   155,
       0,   156,     0,     0,   665,   157,   666,   667,   668,   158,
     669,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,   670,   671,   166,   167,     0,   168,   672,
     673,   170,     0,   171,   172,   173,   174,   674,   176,     0,
     675,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,   676,   677,   195,     0,     0,   196,   678,   197,
     679,     0,   198,   680,   681,     0,   199,   200,   201,   682,
     683,   684,     0,     0,     0,     0,   685,   204,   686,     0,
       0,   687,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,   688,     0,   232,
     233,   234,   235,   236,   689,   690,   237,   238,     0,   239,
     240,   241,   691,     0,   242,     0,     0,     0,   692,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   693,     0,
     251,     0,   252,     0,   694,     0,   253,   254,     0,   255,
     695,     0,   256,   257,     0,     0,     0,   696,   259,   260,
     261,   697,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,   698,   266,   267,  2540,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,   700,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,   701,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,   702,
     306,   307,   308,   309,   703,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   704,   317,     0,     0,   705,
     319,   706,   320,     0,   321,   707,   708,   323,   324,   325,
     326,   327,   328,   329,   330,     0,   709,   331,   332,     0,
       0,   333,   334,   335,   336,   710,   711,   712,   337,   338,
       0,   713,   714,   339,     0,   340,   341,   715,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,   716,   350,
     351,     0,   352,   353,   717,   355,   356,   357,   358,   359,
     360,   361,   718,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   719,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,   720,   721,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   722,     0,   723,
     398,   399,   400,   401,   402,   724,   725,   405,   406,   407,
     408,     0,   726,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   727,   728,   439,   440,     0,   441,
     442,   729,   444,   445,   446,   730,   731,   447,   448,   449,
     450,   732,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   733,   457,   458,     0,   734,   735,   736,   737,     0,
       0,     0,     0,     0,   463,   464,     0,   738,   739,   740,
     466,   467,   468,   741,   469,   470,   742,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   743,   479,     0,     0,   744,   745,   746,   747,   480,
       0,     0,   481,   748,     0,   749,   482,   483,   484,   750,
     751,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   752,     0,     0,     0,   753,
     754,     0,     0,     0,     0,   755,   756,     0,     0,   757,
     758,     0,     0,   759,   760,   141,     0,   662,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   663,     0,   150,   151,   152,   153,   664,   155,     0,
     156,     0,     0,   665,   157,   666,   667,   668,   158,   669,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,   670,   671,   166,   167,     0,   168,   672,   673,
     170,     0,   171,   172,   173,   174,   674,   176,     0,   675,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,   193,   194,
       0,   676,   677,   195,     0,     0,   196,   678,   197,   679,
       0,   198,   680,   681,     0,   199,   200,   201,   682,   683,
     684,     0,     0,     0,     0,   685,   204,   686,     0,     0,
     687,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,   214,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,   219,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,   688,     0,   232,   233,
     234,   235,   236,   689,   690,   237,   238,     0,   239,   240,
     241,   691,     0,   242,     0,     0,     0,   692,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   693,     0,   251,
       0,   252,     0,   694,     0,   253,   254,     0,   255,   695,
       0,   256,   257,     0,     0,     0,   696,   259,   260,   261,
     697,     0,   262,   263,     0,     0,     0,   264,     0,     0,
     265,     0,     0,     0,   698,   266,   267,  2583,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,   700,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     701,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   702,   306,
     307,   308,   309,   703,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   704,   317,     0,     0,   705,   319,
     706,   320,     0,   321,   707,   708,   323,   324,   325,   326,
     327,   328,   329,   330,     0,   709,   331,   332,     0,     0,
     333,   334,   335,   336,   710,   711,   712,   337,   338,     0,
     713,   714,   339,     0,   340,   341,   715,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,   716,   350,   351,
       0,   352,   353,   717,   355,   356,   357,   358,   359,   360,
     361,   718,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   719,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,   720,   721,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   722,     0,   723,   398,
     399,   400,   401,   402,   724,   725,   405,   406,   407,   408,
       0,   726,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   727,   728,   439,   440,     0,   441,   442,
     729,   444,   445,   446,   730,   731,   447,   448,   449,   450,
     732,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     733,   457,   458,     0,   734,   735,   736,   737,     0,     0,
       0,     0,     0,   463,   464,     0,   738,   739,   740,   466,
     467,   468,   741,   469,   470,   742,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     743,   479,     0,     0,   744,   745,   746,   747,   480,     0,
       0,   481,   748,     0,   749,   482,   483,   484,   750,   751,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   752,     0,     0,     0,   753,   754,
       0,     0,     0,     0,   755,   756,     0,     0,   757,   758,
       0,     0,   759,   760,   141,     0,   662,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     663,     0,   150,   151,   152,   153,   664,   155,     0,   156,
       0,     0,   665,   157,   666,   667,   668,   158,   669,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,   670,   671,   166,   167,     0,   168,   672,   673,   170,
       0,   171,   172,   173,   174,   674,   176,     0,   675,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
     676,   677,   195,     0,     0,   196,   678,   197,   679,     0,
     198,   680,   681,     0,   199,   200,   201,   682,   683,   684,
       0,     0,     0,     0,   685,   204,   686,     0,     0,  3350,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,   688,     0,   232,   233,   234,
     235,   236,   689,   690,   237,   238,     0,   239,   240,   241,
     691,     0,   242,     0,     0,     0,   692,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   693,     0,   251,     0,
     252,     0,   694,     0,   253,   254,     0,   255,   695,     0,
     256,   257,     0,     0,     0,   696,   259,   260,   261,   697,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,   698,   266,   267,   699,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
     700,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,   701,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,   702,   306,   307,
     308,   309,   703,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   704,   317,     0,     0,   705,   319,   706,
     320,     0,   321,   707,   708,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   709,   331,   332,     0,     0,   333,
     334,   335,   336,   710,   711,   712,   337,   338,     0,   713,
     714,   339,     0,   340,   341,   715,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,   716,   350,   351,     0,
     352,   353,   717,   355,   356,   357,   358,   359,   360,   361,
     718,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   719,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,   720,   721,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   722,     0,   723,   398,   399,
     400,   401,   402,   724,   725,   405,   406,   407,   408,     0,
     726,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   727,   728,   439,   440,     0,   441,   442,   729,
     444,   445,   446,   730,   731,   447,   448,   449,   450,   732,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   733,
     457,   458,     0,   734,   735,   736,   737,     0,     0,     0,
       0,     0,   463,   464,     0,   738,   739,   740,   466,   467,
     468,   741,   469,   470,   742,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   743,
     479,     0,     0,   744,   745,   746,   747,   480,     0,     0,
     481,   748,     0,   749,   482,   483,   484,   750,   751,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   752,     0,     0,     0,   753,   754,     0,
       0,     0,     0,   755,   756,     0,     0,   757,   758,     0,
       0,   759,   760,   141,     0,   662,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   663,
       0,   150,   151,   152,   153,   664,   155,     0,   156,     0,
       0,   665,   157,   666,   667,   668,   158,   669,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     670,   671,   166,   167,     0,   168,   672,   673,   170,     0,
     171,   172,   173,   174,   674,   176,     0,   675,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,   676,
     677,   195,     0,     0,   196,   678,   197,   679,     0,   198,
     680,   681,     0,   199,   200,   201,   682,   683,   684,     0,
       0,     0,     0,   685,   204,   686,     0,     0,  3410,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,   688,     0,   232,   233,   234,   235,
     236,   689,   690,   237,   238,     0,   239,   240,   241,   691,
       0,   242,     0,     0,     0,   692,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   693,     0,   251,     0,   252,
       0,   694,     0,   253,   254,     0,   255,   695,     0,   256,
     257,     0,     0,     0,   696,   259,   260,   261,   697,     0,
     262,   263,     0,     0,     0,   264,     0,     0,   265,     0,
       0,     0,   698,   266,   267,   699,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   700,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   701,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   702,   306,   307,   308,
     309,   703,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   704,   317,     0,     0,   705,   319,   706,   320,
       0,   321,   707,   708,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   709,   331,   332,     0,     0,   333,   334,
     335,   336,   710,  3411,   712,   337,   338,     0,   713,   714,
     339,     0,   340,   341,   715,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,   716,   350,   351,     0,   352,
     353,   717,   355,   356,   357,   358,   359,   360,   361,   718,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   719,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,   720,   721,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   722,     0,   723,   398,   399,   400,
     401,   402,   724,   725,   405,   406,   407,   408,     0,   726,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   727,   728,   439,   440,     0,   441,   442,   729,   444,
     445,   446,   730,   731,   447,   448,   449,   450,   732,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   733,   457,
     458,     0,   734,   735,   736,   737,     0,     0,     0,     0,
       0,   463,   464,     0,   738,   739,   740,   466,   467,   468,
     741,   469,   470,   742,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   743,   479,
       0,     0,   744,   745,   746,   747,   480,     0,     0,   481,
     748,     0,   749,   482,   483,   484,   750,   751,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   752,     0,     0,     0,   753,   754,     0,     0,
       0,     0,   755,   756,     0,     0,   757,   758,     0,     0,
     759,   760,   141,     0,   662,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   663,     0,
     150,   151,   152,   153,   664,   155,     0,   156,     0,     0,
     665,   157,   666,   667,   668,   158,   669,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,   670,
     671,   166,   167,     0,   168,   672,   673,   170,     0,   171,
     172,   173,   174,   674,   176,     0,   675,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,   676,   677,
     195,     0,     0,   196,   678,   197,   679,     0,   198,   680,
     681,     0,   199,   200,   201,   682,   683,   684,     0,     0,
       0,     0,   685,   204,   686,     0,     0,   687,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,   688,     0,   232,   233,   234,   235,   236,
     689,   690,   237,   238,     0,   239,   240,   241,   691,     0,
     242,     0,     0,     0,   692,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   693,     0,   251,     0,   252,     0,
     694,     0,   253,   254,     0,   255,   695,     0,   256,   257,
       0,     0,     0,   696,   259,   260,   261,   697,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,   698,   266,   267,   699,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,   700,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,   701,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,   702,   306,   307,   308,   309,
     703,   310,   311,  4207,     0,     0,     0,   312,   313,   314,
     315,   704,   317,     0,     0,   705,   319,   706,   320,     0,
     321,   707,   708,   323,   324,   325,   326,   327,   328,   329,
     330,     0,   709,   331,   332,     0,     0,   333,   334,   335,
     336,   710,     0,   712,   337,   338,     0,   713,   714,   339,
       0,   340,   341,   715,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,   716,   350,   351,     0,   352,   353,
     717,   355,   356,   357,   358,   359,   360,   361,   718,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   719,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
     720,   721,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   722,     0,   723,   398,   399,   400,   401,
     402,   724,   725,   405,   406,   407,   408,     0,   726,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     727,   728,   439,   440,     0,   441,   442,   729,   444,   445,
     446,   730,   731,   447,   448,   449,   450,   732,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   733,   457,   458,
       0,   734,   735,   736,   737,     0,     0,     0,     0,     0,
     463,   464,     0,   738,   739,   740,   466,   467,   468,   741,
     469,   470,   742,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   743,   479,     0,
       0,   744,   745,   746,   747,   480,     0,     0,   481,   748,
       0,   749,   482,   483,   484,   750,   751,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   752,     0,     0,     0,   753,   754,     0,     0,     0,
       0,   755,   756,     0,     0,   757,   758,     0,     0,   759,
     760,   141,     0,   662,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   663,     0,   150,
     151,   152,   153,   664,   155,     0,   156,     0,     0,   665,
     157,   666,   667,   668,   158,   669,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,   670,   671,
     166,   167,     0,   168,   672,   673,   170,     0,   171,   172,
     173,   174,   674,   176,     0,   675,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,   676,   677,   195,
       0,     0,   196,   678,   197,   679,     0,   198,   680,   681,
       0,   199,   200,   201,   682,   683,   684,     0,     0,     0,
       0,   685,   204,   686,     0,     0,   687,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,   688,     0,   232,   233,   234,   235,   236,   689,
     690,   237,   238,     0,   239,   240,   241,   691,     0,   242,
       0,     0,     0,   692,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   693,     0,   251,     0,   252,     0,   694,
       0,   253,   254,     0,   255,   695,     0,   256,   257,     0,
       0,     0,   696,   259,   260,   261,   697,     0,   262,   263,
       0,     0,     0,   264,     0,     0,   265,     0,     0,     0,
     698,   266,   267,   699,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   700,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   701,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   702,   306,   307,   308,   309,   703,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     704,   317,     0,     0,   705,   319,   706,   320,     0,   321,
     707,   708,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   709,   331,   332,     0,     0,   333,   334,   335,   336,
     710,     0,   712,   337,   338,     0,   713,   714,   339,     0,
     340,   341,   715,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,   716,   350,   351,     0,   352,   353,   717,
     355,   356,   357,   358,   359,   360,   361,   718,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   719,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,   720,
     721,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   722,     0,   723,   398,   399,   400,   401,   402,
     724,   725,   405,   406,   407,   408,     0,   726,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   727,
     728,   439,   440,     0,   441,   442,   729,   444,   445,   446,
     730,   731,   447,   448,   449,   450,   732,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   733,   457,   458,     0,
     734,   735,   736,   737,     0,     0,     0,     0,     0,   463,
     464,     0,   738,   739,   740,   466,   467,   468,   741,   469,
     470,   742,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   743,   479,     0,     0,
     744,   745,   746,   747,   480,     0,     0,   481,   748,     0,
     749,   482,   483,   484,   750,   751,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     752,     0,     0,     0,   753,   754,     0,     0,     0,     0,
     755,   756,     0,     0,   757,   758,     0,     0,   759,   760,
     141,     0,   662,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   663,     0,   150,   151,
     152,   153,   664,   155,     0,   156,     0,     0,   665,   157,
     666,   667,   668,   158,   669,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,   670,   671,   166,
     167,     0,   168,   672,   673,   170,     0,   171,   172,   173,
     174,   674,   176,     0,   675,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,   676,   677,   195,     0,
       0,   196,   678,   197,   679,     0,   198,   680,   681,     0,
     199,   200,   201,   682,   683,   684,     0,     0,     0,     0,
     685,   204,   686,     0,     0,   687,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,   688,     0,   232,   233,   234,   235,   236,   689,   690,
     237,   238,     0,   239,   240,   241,   691,     0,   242,     0,
       0,     0,   692,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   693,     0,   251,     0,   252,     0,   694,     0,
     253,   254,     0,   255,   695,     0,   256,   257,     0,     0,
       0,   696,   259,   260,   261,   697,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,   698,
     266,   267,  1664,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,   700,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,   701,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,   702,   306,   307,   308,   309,   703,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   704,
     317,     0,     0,   705,   319,   706,   320,     0,   321,   707,
     708,   323,   324,   325,   326,   327,   328,   329,   330,     0,
     709,   331,   332,     0,     0,   333,   334,   335,   336,   710,
       0,   712,   337,   338,     0,   713,   714,   339,     0,   340,
     341,   715,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,   716,   350,   351,     0,   352,   353,   717,   355,
     356,   357,   358,   359,   360,   361,   718,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     719,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,   720,   721,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   722,     0,   723,   398,   399,   400,   401,   402,   724,
     725,   405,   406,   407,   408,     0,   726,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   727,   728,
     439,   440,     0,   441,   442,   729,   444,   445,   446,   730,
     731,   447,   448,   449,   450,   732,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   733,   457,   458,     0,   734,
     735,   736,   737,     0,     0,     0,     0,     0,   463,   464,
       0,   738,   739,   740,   466,   467,   468,   741,   469,   470,
     742,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   743,   479,     0,     0,   744,
     745,   746,   747,   480,     0,     0,   481,   748,     0,   749,
     482,   483,   484,   750,   751,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   752,
       0,     0,     0,   753,   754,     0,     0,     0,     0,   755,
     756,     0,     0,   757,   758,     0,     0,   759,   760,   141,
       0,   662,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,   663,     0,   150,   151,   152,
     153,   664,   155,     0,   156,     0,     0,   665,   157,   666,
     667,   668,   158,   669,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,   670,   671,   166,   167,
       0,   168,   672,   673,   170,     0,   171,   172,   173,   174,
     674,   176,     0,   675,   178,     0,   179,   180,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,     0,   190,
     191,   192,   193,   194,     0,   676,   677,   195,     0,     0,
     196,   678,   197,   679,     0,   198,   680,   681,     0,   199,
     200,   201,   682,   683,   684,     0,     0,     0,     0,   685,
     204,   686,     0,     0,   687,   205,   206,     0,   207,     0,
       0,     0,   208,     0,   209,   210,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   215,   216,   217,     0,     0,
       0,   218,     0,   219,   220,     0,   221,   222,   223,     0,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
     688,     0,   232,   233,   234,   235,   236,   689,   690,   237,
     238,     0,   239,   240,   241,   691,     0,   242,     0,     0,
       0,   692,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   693,     0,   251,     0,   252,     0,   694,     0,   253,
     254,     0,   255,   695,     0,   256,   257,     0,     0,     0,
     696,   259,   260,   261,   697,     0,   262,   263,     0,     0,
       0,   264,     0,     0,   265,     0,     0,     0,   698,   266,
     267,  1666,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   700,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   701,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   702,   306,   307,   308,   309,   703,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   704,   317,
       0,     0,   705,   319,   706,   320,     0,   321,   707,   708,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   709,
     331,   332,     0,     0,   333,   334,   335,   336,   710,     0,
     712,   337,   338,     0,   713,   714,   339,     0,   340,   341,
     715,     0,   343,   344,   345,     0,   346,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   347,   348,
     349,   716,   350,   351,     0,   352,   353,   717,   355,   356,
     357,   358,   359,   360,   361,   718,     0,   362,   363,   364,
       0,   365,     0,   366,   367,   368,   369,   370,     0,   719,
     372,   373,     0,     0,   374,     0,     0,     0,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,   383,   384,
       0,   385,   386,     0,   387,   388,   389,   720,   721,   390,
       0,   391,     0,   392,   393,     0,   394,   395,   396,     0,
     722,     0,   723,   398,   399,   400,   401,   402,   724,   725,
     405,   406,   407,   408,     0,   726,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,     0,     0,     0,     0,     0,   426,   427,
     428,     0,   429,   430,     0,   431,     0,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   727,   728,   439,
     440,     0,   441,   442,   729,   444,   445,   446,   730,   731,
     447,   448,   449,   450,   732,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   733,   457,   458,     0,   734,   735,
     736,   737,     0,     0,     0,     0,     0,   463,   464,     0,
     738,   739,   740,   466,   467,   468,   741,   469,   470,   742,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   743,   479,     0,     0,   744,   745,
     746,   747,   480,     0,     0,   481,   748,     0,   749,   482,
     483,   484,   750,   751,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   752,     0,
       0,     0,   753,   754,     0,     0,     0,     0,   755,   756,
       0,     0,   757,   758,     0,     0,   759,   760,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,   666,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,  1702,     0,     0,     0,     0,   203,   204,
     686,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,   690,   237,   238,
       0,   239,   240,   241,   691,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,   695,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,   701,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,   709,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,   713,   714,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   733,   457,   458,     0,  1703,   460,   461,
    1704,     0,     0,     0,     0,     0,   463,   464,     0,     0,
     739,   465,   466,   467,   468,   741,   469,   470,   742,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,     0,
       0,   141,     0,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,   759,   760,   149,     0,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,     0,   171,   172,
     173,   174,   175,   176,     0,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
    2405,   190,   191,   192,   193,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,   506,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
       0,     0,     0,   264,  2004,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,  2005,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,  2940,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,  1961,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,  -445,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,     0,   141,     0,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,  2475,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,  2405,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,   506,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,  2004,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
    2005,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,     0,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   492,     0,   141,     0,   142,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   149,
    2475,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,     0,
     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,   204,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,     0,
       0,   242,     0,     0,     0,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,   253,   254,     0,   255,     0,     0,   256,
     257,     0,     0,     0,   258,   259,   260,   261,     0,     0,
     262,   263,     0,     0,     0,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,  2289,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,  2704,     0,     0,   148,     0,     0,
     149,   760,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,     0,     0,   141,     0,   142,
     143,   144,   145,   146,     0,  4336,   147,     0,     0,     0,
     148,  4337,   760,   149,     0,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,     0,   171,   172,   173,   174,   175,   176,
       0,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,     0,   190,   191,   192,
     193,   194,     0,     0,     0,   195,     0,     0,   196,     0,
     197,     0,     0,   198,     0,     0,     0,   199,   200,   201,
       0,     0,   202,     0,     0,     0,     0,   203,   204,     0,
       0,     0,     0,   205,   206,     0,   207,     0,     0,     0,
     208,     0,   209,   210,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   215,   216,   217,     0,     0,     0,   218,
       0,   219,   220,     0,   221,   222,   223,     0,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,     0,
     232,   233,   234,   235,   236,     0,     0,   237,   238,     0,
     239,   240,   241,     0,     0,   242,     0,     0,     0,   243,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,     0,   253,   254,     0,
     255,     0,     0,   256,   257,     0,     0,     0,   258,   259,
     260,   261,     0,     0,   262,   263,     0,     0,     0,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,     0,   320,     0,   321,     0,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,     0,   331,   332,
       0,     0,   333,   334,   335,   336,     0,     0,     0,   337,
     338,     0,     0,     0,   339,     0,   340,   341,   342,     0,
     343,   344,   345,     0,   346,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,   348,   349,     0,
     350,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,     0,   365,
       0,   366,   367,   368,   369,   370,     0,   371,   372,   373,
       0,     0,   374,     0,     0,     0,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   387,   388,   389,     0,     0,   390,     0,   391,
       0,   392,   393,     0,   394,   395,   396,     0,   397,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,     0,     0,     0,     0,     0,   426,   427,   428,     0,
     429,   430,     0,   431,     0,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,     0,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,     0,     0,   447,   448,
     449,   450,     0,   451,   452,     0,     0,   453,   454,   455,
     456,     0,     0,   457,   458,     0,   459,   460,   461,   462,
       0,     0,     0,     0,     0,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,     0,     0,     0,     0,     0,     0,
     480,     0,     0,   481,     0,     0,     0,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,     0,     0,     0,
     141,     0,   142,   143,   144,   145,   146,  1093,     0,   147,
       0,     0,     0,   148,     0,   760,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,  1314,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   492,
       0,   141,     0,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   149,   540,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,     0,   171,   172,
     173,   174,   175,   176,     0,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
       0,     0,     0,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,     0,     0,     0,     0,   141,  2216,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,   540,
       0,   149,     0,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,     0,   171,   172,   173,   174,   175,   176,     0,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,     0,   190,   191,   192,   193,   194,
       0,     0,     0,   195,     0,     0,   196,     0,   197,     0,
       0,   198,     0,     0,     0,   199,   200,   201,     0,     0,
     202,     0,     0,     0,     0,   203,   204,     0,     0,     0,
       0,   205,   206,     0,   207,     0,     0,     0,   208,     0,
     209,   210,   211,   212,   213,     0,     0,     0,   214,     0,
       0,   215,   216,   217,     0,     0,     0,   218,     0,   219,
     220,     0,   221,   222,   223,     0,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,     0,   232,   233,
     234,   235,   236,     0,     0,   237,   238,     0,   239,   240,
     241,     0,     0,   242,     0,     0,     0,   243,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,     0,   253,   254,     0,   255,     0,
       0,   256,   257,     0,     0,     0,   258,   259,   260,   261,
       0,     0,   262,   263,     0,     0,     0,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
       0,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
       0,   320,     0,   321,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,     0,     0,   331,   332,     0,     0,
     333,   334,   335,   336,     0,     0,     0,   337,   338,     0,
       0,     0,   339,     0,   340,   341,   342,     0,   343,   344,
     345,     0,   346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,   348,   349,     0,   350,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   364,     0,   365,     0,   366,
     367,   368,   369,   370,     0,   371,   372,   373,     0,     0,
     374,     0,     0,     0,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     387,   388,   389,     0,     0,   390,     0,   391,     0,   392,
     393,     0,   394,   395,   396,     0,   397,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,     0,
       0,     0,     0,     0,   426,   427,   428,     0,   429,   430,
       0,   431,     0,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,     0,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,     0,     0,   447,   448,   449,   450,
       0,   451,   452,     0,     0,   453,   454,   455,   456,     0,
       0,   457,   458,     0,   459,   460,   461,   462,     0,     0,
       0,     0,     0,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,     0,     0,     0,     0,     0,     0,   480,     0,
       0,   481,     0,     0,     0,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,     0,     0,   141,     0,
     142,   143,   144,   145,   146,  2474,     0,   147,     0,     0,
       0,   148,     0,  2475,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,     0,
       0,   141,     0,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,  4337,   760,   149,     0,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,     0,   171,   172,
     173,   174,   175,   176,     0,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
       0,   190,   191,   192,   193,   194,     0,     0,     0,   195,
       0,     0,   196,     0,   197,     0,     0,   198,     0,     0,
       0,   199,   200,   201,     0,     0,   202,     0,     0,     0,
       0,   203,   204,     0,     0,     0,     0,   205,   206,     0,
     207,     0,     0,     0,   208,     0,   209,   210,   211,   212,
     213,     0,     0,     0,   214,     0,     0,   215,   216,   217,
       0,     0,     0,   218,     0,   219,   220,     0,   221,   222,
     223,     0,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,     0,   232,   233,   234,   235,   236,     0,
       0,   237,   238,     0,   239,   240,   241,     0,     0,   242,
       0,     0,     0,   243,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
       0,   253,   254,     0,   255,     0,     0,   256,   257,     0,
       0,     0,   258,   259,   260,   261,     0,     0,   262,   263,
       0,     0,     0,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,     0,   320,     0,   321,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,     0,   331,   332,     0,     0,   333,   334,   335,   336,
       0,     0,     0,   337,   338,     0,     0,     0,   339,     0,
     340,   341,   342,     0,   343,   344,   345,     0,   346,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,   348,   349,     0,   350,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   364,     0,   365,     0,   366,   367,   368,   369,   370,
       0,   371,   372,   373,     0,     0,   374,     0,     0,     0,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   387,   388,   389,     0,
       0,   390,     0,   391,     0,   392,   393,     0,   394,   395,
     396,     0,   397,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,     0,     0,     0,     0,     0,
     426,   427,   428,     0,   429,   430,     0,   431,     0,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,     0,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
       0,     0,   447,   448,   449,   450,     0,   451,   452,     0,
       0,   453,   454,   455,   456,     0,     0,   457,   458,     0,
     459,   460,   461,   462,     0,     0,     0,     0,     0,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,     0,     0,
       0,     0,     0,     0,   480,     0,     0,   481,     0,     0,
       0,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,     0,   141,     0,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,   540,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,     0,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   492,     0,   141,     0,   142,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   149,
     760,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,     0,
     171,   172,   173,   174,   175,   176,     0,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,     0,   190,   191,   192,   193,   194,     0,     0,
       0,   195,     0,     0,   196,     0,   197,     0,     0,   198,
       0,     0,     0,   199,   200,   201,     0,     0,   202,     0,
       0,     0,     0,   203,   204,     0,     0,     0,     0,   205,
     206,     0,   207,     0,     0,     0,   208,     0,   209,   210,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   215,
     216,   217,     0,     0,     0,   218,     0,   219,   220,     0,
     221,   222,   223,     0,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,     0,   232,   233,   234,   235,
     236,     0,     0,   237,   238,     0,   239,   240,   241,     0,
       0,   242,     0,     0,     0,   243,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,     0,   253,   254,     0,   255,     0,     0,   256,
     257,     0,     0,     0,   258,   259,   260,   261,     0,     0,
     262,   263,     0,     0,     0,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,     0,   320,
       0,   321,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,     0,   331,   332,     0,     0,   333,   334,
     335,   336,     0,     0,     0,   337,   338,     0,     0,     0,
     339,     0,   340,   341,   342,     0,   343,   344,   345,     0,
     346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   348,   349,     0,   350,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   364,     0,   365,     0,   366,   367,   368,
     369,   370,     0,   371,   372,   373,     0,     0,   374,     0,
       0,     0,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   387,   388,
     389,     0,     0,   390,     0,   391,     0,   392,   393,     0,
     394,   395,   396,     0,   397,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,     0,     0,     0,
       0,     0,   426,   427,   428,     0,   429,   430,     0,   431,
       0,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,     0,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,     0,     0,   447,   448,   449,   450,     0,   451,
     452,     0,     0,   453,   454,   455,   456,     0,     0,   457,
     458,     0,   459,   460,   461,   462,     0,     0,     0,     0,
       0,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
       0,     0,     0,     0,     0,     0,   480,     0,     0,   481,
       0,     0,     0,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  2475,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,  1268,   898,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,  1269,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,  1270,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,  1271,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
    1272,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,  1273,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,  1274,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  1275,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,  1268,   898,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,  1269,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,  1270,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,  1271,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
    1272,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,  1273,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,  1274,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,  1351,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  1275,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,   615,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   138,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  1636,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,   615,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   138,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  1742,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,   615,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   138,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  3386,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
    1234,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,  1235,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
       0,  1235,   150,   151,   152,   153,   154,     0,     0,  -333,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,     0,     0,     0,     0,
     165,  3815,     0,   166,   167,     0,   168,     0,     0,     0,
       0,   171,   172,   173,  3816,   175,   176,     0,   177,   178,
       0,   179,   180,     0,   182,     0,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,     0,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,     0,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,     0,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,  3817,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,   257,     0,     0,     0,   258,   259,   260,   261,  3818,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,     0,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,  3819,     0,
       0,   273,     0,     0,     0,   275,     0,     0,   276,  3820,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,  -288,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,     0,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,  3821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
       0,     0,     0,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,     0,     0,   387,
       0,   389,  -288,     0,   390,     0,     0,     0,   392,     0,
       0,   394,   395,   396,  3822,   397,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,   420,     0,   421,     0,     0,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,     0,   435,   436,
     437,   438,     0,     0,     0,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,     0,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,     0,
       0,     0,   475,     0,     0,   476,     0,     0,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,  -288,     0,     0,     0,   487,     0,     0,   489,     0,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,  4329,     0,   149,     0,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,     0,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     141,   492,   142,   143,   144,   145,   146,  2054,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   141,   492,
     142,   143,   144,   145,   146,  2734,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   141,   492,   142,   143,
     144,   145,   146,  3070,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,     0,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   141,   492,   142,   143,   144,   145,
     146,  3391,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,  2383,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
    2384,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,  2385,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,  2386,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,  1013,  1014,     0,   337,   338,     0,     0,
    2387,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
    4316,   568,  4317,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,  2388,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
    1732,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,  1733,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,  1734,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,   615,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,  1735,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   138,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,  1744,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,  1745,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,   615,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   138,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   141,   492,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,  1829,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,  1830,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
     716,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,  1831,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,  1732,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,     0,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,  1733,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,   615,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   138,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   141,   492,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,   971,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,   615,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   138,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   141,   492,   142,   143,   144,   145,   146,  1369,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,   615,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   138,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
     944,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,   945,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   946,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   141,   492,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,  1732,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,   615,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   138,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,     0,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,  2661,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,   615,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   138,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   141,   492,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,   615,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   138,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,  2730,     0,   149,     0,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   138,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,  4236,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,  4237,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   141,   492,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,   568,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,     0,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
    1048,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   141,   492,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,  1269,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,  1269,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,     0,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
    2323,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,  2813,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   141,   492,
     142,   143,   144,   145,   146,  2821,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,   240,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,     0,   171,   172,   173,   174,   175,   176,     0,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,   193,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,   204,     0,     0,
       0,  2845,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,   214,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
     219,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,   242,     0,     0,     0,   243,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,   253,   254,     0,   255,
       0,     0,   256,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,   337,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,   345,     0,   346,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   348,   349,     0,   350,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   387,   388,   389,     0,     0,   390,     0,   391,     0,
     392,   393,     0,   394,   395,   396,     0,   397,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,     0,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   141,   492,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
       0,   171,   172,   173,   174,   175,   176,     0,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,   193,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,   204,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,   214,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,   219,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,     0,   239,   240,   241,
       0,     0,   242,     0,     0,     0,   243,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,   253,   254,     0,   255,     0,     0,
     256,   257,     0,     0,     0,   258,   259,   260,   261,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,   337,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,   345,
       0,   346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   347,   348,   349,     0,   350,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,  2909,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,   386,     0,   387,
     388,   389,     0,     0,   390,     0,   391,     0,   392,   393,
       0,   394,   395,   396,     0,   397,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,     0,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,     0,   171,
     172,   173,   174,   175,   176,     0,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,   193,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,   204,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,   214,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,   219,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,     0,   239,   240,   241,     0,     0,
     242,     0,     0,     0,   243,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,   253,   254,     0,   255,     0,     0,   256,   257,
       0,     0,     0,   258,   259,   260,   261,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,   337,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,   345,     0,   346,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   347,   348,   349,     0,   350,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   387,   388,   389,
       0,     0,   390,     0,   391,     0,   392,   393,     0,   394,
     395,   396,     0,   397,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
       0,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   138,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,     0,   171,   172,   173,
     174,   175,   176,     0,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,   193,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,   204,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,   214,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,   219,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,     0,   239,   240,   241,     0,     0,   242,     0,
       0,     0,   243,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
     253,   254,     0,   255,     0,     0,   256,   257,     0,     0,
       0,   258,   259,   260,   261,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,   337,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,   345,     0,   346,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     348,   349,     0,   350,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   387,   388,   389,     0,     0,
     390,     0,   391,     0,   392,   393,     0,   394,   395,   396,
       0,   397,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,     0,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   141,   492,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,     0,   171,   172,   173,   174,   175,
     176,     0,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,   193,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,   204,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,   214,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,   219,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
       0,   239,  1726,   241,     0,     0,   242,     0,     0,     0,
     243,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,   253,   254,
       0,   255,     0,     0,   256,   257,     0,     0,     0,   258,
     259,   260,   261,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,  1727,   335,   336,     0,     0,     0,
     337,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,   345,     0,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,   348,   349,
       0,   350,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   387,   388,   389,     0,     0,   390,     0,
     391,     0,   392,   393,     0,   394,   395,   396,     0,   397,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,     0,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,     0,     0,   150,   151,   152,   153,   154,     0,
       0,  -333,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,     0,     0,
       0,     0,   165,  3815,     0,   166,   167,     0,   168,     0,
       0,     0,     0,   171,   172,   173,  3816,   175,   176,     0,
     177,   178,     0,   179,   180,     0,   182,     0,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,     0,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,  -303,  -303,   218,     0,
    -303,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,  3817,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,  3818,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,     0,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
    3819,     0,     0,   273,     0,     0,     0,   275,     0,     0,
     276,  3820,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,  -288,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,     0,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,  3821,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -288,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  3822,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,     0,     0,     0,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,     0,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,     0,     0,     0,   475,     0,     0,   476,     0,     0,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,  -288,     0,     0,     0,   487,     0,     0,
     489,     0,   491,     0,   141,   492,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
       0,     0,   150,   151,   152,   153,   154,     0,     0,  -333,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,     0,     0,     0,     0,
     165,  3815,     0,   166,   167,     0,   168,     0,     0,     0,
       0,   171,   172,   173,  3816,   175,   176,     0,   177,   178,
       0,   179,   180,     0,   182,     0,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,     0,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,     0,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
     215,   216,   217,     0,  -324,     0,   218,     0,  -324,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,     0,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,  3817,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,   257,     0,     0,     0,   258,   259,   260,   261,  3818,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,     0,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,  3819,     0,
       0,   273,     0,     0,     0,   275,     0,     0,   276,  3820,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,  -288,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,     0,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,  3821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
       0,     0,     0,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,     0,     0,   387,
       0,   389,  -288,     0,   390,     0,     0,     0,   392,     0,
       0,   394,   395,   396,  3822,   397,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,   420,     0,   421,     0,     0,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,     0,   435,   436,
     437,   438,     0,     0,     0,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,     0,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,     0,
       0,     0,   475,     0,     0,   476,     0,     0,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,  -324,
       0,  -288,     0,     0,     0,   487,     0,     0,   489,     0,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,     0,     0,
     150,   151,   152,   153,   154,     0,     0,  -333,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,     0,     0,     0,     0,   165,  3815,
       0,   166,   167,     0,   168,     0,     0,     0,     0,   171,
     172,   173,  3816,   175,   176,     0,   177,   178,     0,   179,
     180,     0,   182,     0,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,     0,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,     0,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,     0,     0,     0,   215,   216,
     217,     0,  -321,     0,   218,     0,  -321,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,     0,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,  3817,   239,   240,   241,     0,     0,
       0,     0,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,     0,   254,     0,     0,     0,     0,     0,   257,
       0,     0,     0,   258,   259,   260,   261,  3818,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,     0,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,  3819,     0,     0,   273,
       0,     0,     0,   275,     0,     0,   276,  3820,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,  -288,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,     0,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,  3821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,     0,     0,
       0,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,     0,     0,   387,     0,   389,
    -288,     0,   390,     0,     0,     0,   392,     0,     0,   394,
     395,   396,  3822,   397,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   407,   408,     0,   409,     0,
       0,     0,     0,   411,   412,   413,     0,     0,     0,     0,
     415,     0,     0,     0,   416,     0,     0,   418,     0,   420,
       0,   421,     0,     0,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,     0,   435,   436,   437,   438,
       0,     0,     0,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,     0,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,     0,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,     0,     0,     0,
     475,     0,     0,   476,     0,     0,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,  -321,     0,  -288,
       0,     0,     0,   487,     0,     0,   489,     0,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,     0,     0,   150,   151,
     152,   153,   154,     0,     0,  -333,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,     0,     0,     0,     0,   165,  3815,     0,   166,
     167,     0,   168,     0,     0,     0,     0,   171,   172,   173,
    3816,   175,   176,     0,   177,   178,     0,   179,   180,     0,
     182,     0,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,     0,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,     0,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,  4134,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
       0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,  3817,   239,   240,   241,     0,     0,     0,     0,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,   257,     0,     0,
       0,   258,   259,   260,   261,  3818,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,     0,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,  3819,     0,     0,   273,     0,     0,
       0,   275,     0,     0,   276,  3820,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,  -288,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,     0,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,  3821,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,     0,     0,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,     0,     0,     0,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,     0,     0,   387,     0,   389,  -288,     0,
     390,     0,     0,     0,   392,     0,     0,   394,   395,   396,
    3822,   397,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   407,   408,     0,   409,     0,     0,     0,
       0,   411,   412,   413,     0,     0,     0,     0,   415,     0,
       0,     0,   416,     0,     0,   418,     0,   420,     0,   421,
       0,     0,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,     0,   435,   436,   437,   438,     0,     0,
       0,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,     0,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,     0,     0,     0,   475,     0,
       0,   476,     0,     0,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,  -288,     0,     0,
       0,   487,     0,     0,   489,     0,   491,     0,   141,   492,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,     0,     0,   150,   151,   152,   153,
     154,     0,     0,  -333,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
       0,     0,     0,     0,   165,  3815,     0,   166,   167,     0,
     168,     0,     0,     0,     0,   171,   172,   173,  3816,   175,
     176,     0,   177,   178,     0,   179,   180,     0,   182,     0,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,     0,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,     0,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,  -326,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,     0,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
    3817,   239,   240,   241,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,     0,   254,
       0,     0,     0,     0,     0,   257,     0,     0,     0,   258,
     259,   260,   261,  3818,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  3819,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  3820,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -288,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  3821,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,     0,     0,     0,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,     0,     0,   387,     0,   389,  -288,     0,   390,     0,
       0,     0,   392,     0,     0,   394,   395,   396,  3822,   397,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,   420,     0,   421,     0,     0,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,     0,   435,   436,   437,   438,     0,     0,     0,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,     0,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,     0,     0,     0,   475,     0,     0,   476,
       0,     0,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,  -288,     0,     0,     0,   487,
       0,     0,   489,     0,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,     0,     0,   150,   151,   152,   153,   154,     0,
       0,  -333,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,     0,     0,
       0,     0,   165,  3815,     0,   166,   167,     0,   168,     0,
       0,     0,     0,   171,   172,   173,  3816,   175,   176,     0,
     177,   178,     0,   179,   180,     0,   182,     0,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,     0,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
    4241,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,  3817,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,  3818,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,     0,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
    3819,     0,     0,   273,     0,     0,     0,   275,     0,     0,
     276,  3820,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,  -288,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,     0,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,  3821,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,  -288,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,  3822,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,     0,     0,     0,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,     0,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,     0,     0,     0,   475,     0,     0,   476,     0,     0,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,  -288,     0,     0,     0,   487,     0,     0,
     489,     0,   491,     0,   141,   492,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
       0,     0,   150,   151,   152,   153,   154,     0,     0,  -333,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,     0,     0,     0,     0,
     165,  3815,     0,   166,   167,     0,   168,     0,     0,     0,
       0,   171,   172,   173,  3816,   175,   176,     0,   177,   178,
       0,   179,   180,     0,   182,     0,   184,   185,   186,   187,
       0,   188,   189,     0,   190,   191,   192,     0,   194,     0,
       0,     0,   195,     0,     0,   196,     0,   197,     0,     0,
     198,     0,     0,     0,   199,   200,   201,     0,     0,   202,
       0,     0,     0,     0,   203,     0,     0,     0,     0,     0,
     205,   206,     0,   207,     0,     0,     0,   208,     0,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
     215,   216,   217,     0,     0,     0,   218,     0,  4287,   220,
       0,   221,   222,   223,     0,     0,   224,   225,     0,   226,
     227,   228,   229,   230,     0,     0,     0,   232,   233,   234,
     235,   236,     0,     0,   237,   238,  3817,   239,   240,   241,
       0,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,   257,     0,     0,     0,   258,   259,   260,   261,  3818,
       0,   262,   263,     0,     0,     0,   264,     0,     0,   265,
       0,     0,     0,     0,   266,     0,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,  3819,     0,
       0,   273,     0,     0,     0,   275,     0,     0,   276,  3820,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,  -288,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,     0,
     320,     0,   321,     0,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,     0,   331,   332,     0,     0,   333,
     334,   335,   336,     0,     0,     0,     0,   338,     0,     0,
       0,   339,     0,   340,   341,   342,     0,   343,   344,  3821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
       0,     0,     0,   363,   364,     0,   365,     0,   366,   367,
     368,   369,   370,     0,   371,   372,   373,     0,     0,   374,
       0,     0,     0,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,   383,   384,     0,   385,     0,     0,   387,
       0,   389,  -288,     0,   390,     0,     0,     0,   392,     0,
       0,   394,   395,   396,  3822,   397,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,   420,     0,   421,     0,     0,   424,   425,     0,     0,
       0,     0,     0,   426,   427,   428,     0,   429,   430,     0,
     431,     0,     0,   432,     0,     0,   433,     0,   435,   436,
     437,   438,     0,     0,     0,   440,     0,   441,   442,   443,
     444,   445,   446,     0,     0,   447,   448,   449,   450,     0,
     451,   452,     0,     0,   453,   454,   455,   456,     0,     0,
     457,   458,     0,   459,   460,   461,   462,     0,     0,     0,
       0,     0,   463,   464,     0,     0,     0,     0,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,     0,
       0,     0,   475,     0,     0,   476,     0,     0,     0,   478,
     479,     0,     0,     0,     0,     0,     0,   480,     0,     0,
     481,     0,     0,     0,   482,   483,   484,   485,   486,     0,
       0,  -288,     0,     0,     0,   487,     0,     0,   489,     0,
     491,     0,   141,   492,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,     0,     0,
     150,   151,   152,   153,   154,     0,     0,  -333,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,     0,     0,     0,     0,   165,  3815,
       0,   166,   167,     0,   168,     0,     0,     0,     0,   171,
     172,   173,  3816,   175,   176,     0,   177,   178,     0,   179,
     180,     0,   182,     0,   184,   185,   186,   187,     0,   188,
     189,     0,   190,   191,   192,     0,   194,     0,     0,     0,
     195,     0,     0,   196,     0,   197,     0,     0,   198,     0,
       0,     0,   199,   200,   201,     0,     0,   202,     0,     0,
       0,     0,   203,     0,     0,     0,     0,     0,   205,   206,
       0,   207,     0,     0,     0,   208,     0,   209,   210,   211,
     212,   213,     0,     0,     0,     0,     0,     0,   215,   216,
     217,     0,     0,     0,   218,     0,  -307,   220,     0,   221,
     222,   223,     0,     0,   224,   225,     0,   226,   227,   228,
     229,   230,     0,     0,     0,   232,   233,   234,   235,   236,
       0,     0,   237,   238,  3817,   239,   240,   241,     0,     0,
       0,     0,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,     0,     0,   254,     0,     0,     0,     0,     0,   257,
       0,     0,     0,   258,   259,   260,   261,  3818,     0,   262,
     263,     0,     0,     0,   264,     0,     0,   265,     0,     0,
       0,     0,   266,     0,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,  3819,     0,     0,   273,
       0,     0,     0,   275,     0,     0,   276,  3820,     0,   277,
     278,     0,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,  -288,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,     0,   320,     0,
     321,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,     0,     0,   331,   332,     0,     0,   333,   334,   335,
     336,     0,     0,     0,     0,   338,     0,     0,     0,   339,
       0,   340,   341,   342,     0,   343,   344,  3821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,     0,     0,     0,
       0,   363,   364,     0,   365,     0,   366,   367,   368,   369,
     370,     0,   371,   372,   373,     0,     0,   374,     0,     0,
       0,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,   383,   384,     0,   385,     0,     0,   387,     0,   389,
    -288,     0,   390,     0,     0,     0,   392,     0,     0,   394,
     395,   396,  3822,   397,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   407,   408,     0,   409,     0,
       0,     0,     0,   411,   412,   413,     0,     0,     0,     0,
     415,     0,     0,     0,   416,     0,     0,   418,     0,   420,
       0,   421,     0,     0,   424,   425,     0,     0,     0,     0,
       0,   426,   427,   428,     0,   429,   430,     0,   431,     0,
       0,   432,     0,     0,   433,     0,   435,   436,   437,   438,
       0,     0,     0,   440,     0,   441,   442,   443,   444,   445,
     446,     0,     0,   447,   448,   449,   450,     0,   451,   452,
       0,     0,   453,   454,   455,   456,     0,     0,   457,   458,
       0,   459,   460,   461,   462,     0,     0,     0,     0,     0,
     463,   464,     0,     0,     0,     0,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,     0,     0,     0,
     475,     0,     0,   476,     0,     0,     0,   478,   479,     0,
       0,     0,     0,     0,     0,   480,     0,     0,   481,     0,
       0,     0,   482,   483,   484,   485,   486,     0,     0,  -288,
       0,     0,     0,   487,     0,     0,   489,     0,   491,     0,
     141,   492,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,     0,     0,   150,   151,
     152,   153,   154,     0,     0,  -333,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,     0,     0,     0,     0,   165,  3815,     0,   166,
     167,     0,   168,     0,     0,     0,     0,   171,   172,   173,
    3816,   175,   176,     0,   177,   178,     0,   179,   180,     0,
     182,     0,   184,   185,   186,   187,     0,   188,   189,     0,
     190,   191,   192,     0,   194,     0,     0,     0,   195,     0,
       0,   196,     0,   197,     0,     0,   198,     0,     0,     0,
     199,   200,   201,     0,     0,   202,     0,     0,     0,     0,
     203,     0,     0,     0,     0,     0,   205,   206,     0,   207,
       0,     0,     0,   208,     0,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   220,     0,   221,   222,   223,
       0,     0,   224,   225,     0,   226,   227,   228,   229,   230,
       0,     0,     0,   232,   233,   234,   235,   236,     0,     0,
     237,   238,  3817,   239,   240,   241,     0,     0,     0,     0,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,   257,     0,     0,
       0,   258,   259,   260,   261,  3818,     0,   262,   263,     0,
       0,     0,   264,     0,     0,   265,     0,     0,     0,     0,
     266,     0,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,  3819,     0,     0,   273,     0,     0,
       0,   275,     0,     0,   276,  3820,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,  -288,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,     0,   320,     0,   321,     0,
     322,   323,   324,   325,   326,   327,   328,   329,   330,     0,
       0,   331,   332,     0,     0,   333,   334,   335,   336,     0,
       0,     0,     0,   338,     0,     0,     0,   339,     0,   340,
     341,   342,     0,   343,   344,  3821,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,     0,     0,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,     0,     0,     0,     0,   363,
     364,     0,   365,     0,   366,   367,   368,   369,   370,     0,
     371,   372,   373,     0,     0,   374,     0,     0,     0,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,   383,
     384,     0,   385,     0,     0,   387,     0,   389,  -288,     0,
     390,     0,     0,     0,   392,     0,     0,   394,   395,   396,
    3822,   397,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   407,   408,     0,   409,     0,     0,     0,
       0,   411,   412,   413,     0,     0,     0,     0,   415,     0,
       0,     0,   416,     0,     0,   418,     0,   420,     0,   421,
       0,     0,   424,   425,     0,     0,     0,     0,     0,   426,
     427,   428,     0,   429,   430,     0,   431,     0,     0,   432,
       0,     0,   433,     0,   435,   436,   437,   438,     0,     0,
       0,   440,     0,   441,   442,   443,   444,   445,   446,     0,
       0,   447,   448,   449,   450,     0,   451,   452,     0,     0,
     453,   454,   455,   456,     0,     0,   457,   458,     0,   459,
     460,   461,   462,     0,     0,     0,     0,     0,   463,   464,
       0,     0,     0,     0,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,     0,     0,     0,   475,     0,
       0,   476,     0,     0,     0,   478,   479,     0,     0,     0,
       0,     0,     0,   480,     0,     0,   481,     0,     0,     0,
     482,   483,   484,   485,   486,     0,     0,  -288,     0,     0,
       0,   487,     0,     0,   489,     0,   491,     0,   141,   492,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,     0,     0,   150,   151,   152,   153,
     154,     0,     0,  -333,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
       0,     0,     0,     0,   165,  3815,     0,   166,   167,     0,
     168,     0,     0,     0,     0,   171,   172,   173,  3816,   175,
     176,     0,   177,   178,     0,   179,   180,     0,   182,     0,
     184,   185,   186,   187,     0,   188,   189,     0,   190,   191,
     192,     0,   194,     0,     0,     0,   195,     0,     0,   196,
       0,   197,     0,     0,   198,     0,     0,     0,   199,   200,
     201,     0,     0,   202,     0,     0,     0,     0,   203,     0,
       0,     0,     0,     0,   205,   206,     0,   207,     0,     0,
       0,   208,     0,   209,   210,   211,   212,   213,     0,     0,
       0,     0,     0,     0,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   220,     0,   221,   222,   223,     0,     0,
     224,   225,     0,   226,   227,   228,   229,   230,     0,     0,
       0,   232,   233,   234,   235,   236,     0,     0,   237,   238,
    3817,   239,   240,   241,     0,     0,     0,     0,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,     0,     0,   254,
       0,     0,     0,     0,     0,   257,     0,     0,     0,   258,
     259,   260,   261,  3818,     0,   262,   263,     0,     0,     0,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  3819,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  3820,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -288,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,     0,   320,     0,   321,     0,   322,   323,
     324,   325,   326,   327,   328,   329,   330,     0,     0,   331,
     332,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,   338,     0,     0,     0,   339,     0,   340,   341,   342,
       0,   343,   344,  3821,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,     0,     0,     0,   363,   364,     0,
     365,     0,   366,   367,   368,   369,   370,     0,   371,   372,
     373,     0,     0,   374,     0,     0,     0,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,   383,   384,     0,
     385,     0,     0,   387,     0,   389,  -288,     0,   390,     0,
       0,     0,   392,     0,     0,   394,   395,   396,  3822,   397,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,   420,     0,   421,     0,     0,
     424,   425,     0,     0,     0,     0,     0,   426,   427,   428,
       0,   429,   430,     0,   431,     0,     0,   432,     0,     0,
     433,     0,   435,   436,   437,   438,     0,     0,     0,   440,
       0,   441,   442,   443,   444,   445,   446,     0,     0,   447,
     448,   449,   450,     0,   451,   452,     0,     0,   453,   454,
     455,   456,     0,     0,   457,   458,     0,   459,   460,   461,
     462,     0,     0,     0,     0,     0,   463,   464,     0,     0,
       0,     0,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,     0,     0,     0,   475,     0,     0,  4137,
       0,     0,     0,   478,   479,     0,     0,     0,     0,     0,
       0,   480,     0,     0,   481,     0,     0,     0,   482,   483,
     484,   485,   486,     0,     0,  -288,     0,     0,     0,   487,
       0,     0,   489,     0,   491,     0,   141,   492,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,     0,     0,   150,   151,   152,   153,   154,     0,
       0,     0,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,     0,     0,
       0,     0,   165,     0,     0,   166,   167,     0,   168,     0,
       0,     0,     0,   171,   172,   173,     0,   175,   176,     0,
     177,   178,     0,   179,   180,     0,   182,     0,   184,   185,
     186,   187,     0,   188,   189,     0,   190,   191,   192,     0,
     194,     0,     0,     0,   195,     0,     0,   196,     0,   197,
       0,     0,   198,     0,     0,     0,   199,   200,   201,     0,
       0,   202,     0,     0,     0,     0,   203,     0,     0,     0,
       0,     0,   205,   206,     0,   207,     0,     0,     0,   208,
       0,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   220,     0,   221,   222,   223,     0,     0,   224,   225,
       0,   226,   227,   228,   229,   230,     0,     0,     0,   232,
     233,   234,   235,   236,     0,     0,   237,   238,     0,   239,
     240,   241,     0,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,   257,     0,     0,     0,   258,   259,   260,
     261,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,   265,     0,     0,     0,     0,   266,     0,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,     0,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,     0,   320,     0,   321,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,     0,     0,   331,   332,     0,
       0,   333,   334,   335,   336,     0,     0,     0,     0,   338,
       0,     0,     0,   339,     0,   340,   341,   342,     0,   343,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,     0,     0,     0,     0,   363,   364,     0,   365,     0,
     366,   367,   368,   369,   370,     0,   371,   372,   373,     0,
       0,   374,     0,     0,     0,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,   383,   384,     0,   385,     0,
       0,   387,     0,   389,     0,     0,   390,     0,     0,     0,
     392,     0,     0,   394,   395,   396,     0,   397,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,   420,     0,   421,     0,     0,   424,   425,
       0,     0,     0,     0,     0,   426,   427,   428,     0,   429,
     430,     0,   431,     0,     0,   432,     0,     0,   433,     0,
     435,   436,   437,   438,     0,     0,     0,   440,     0,   441,
     442,   443,   444,   445,   446,     0,     0,   447,   448,   449,
     450,     0,   451,   452,     0,     0,   453,   454,   455,   456,
       0,     0,   457,   458,     0,   459,   460,   461,   462,     0,
       0,     0,     0,     0,   463,   464,     0,     0,     0,     0,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,     0,     0,     0,   475,     0,     0,   476,     0,     0,
       0,   478,   479,     0,     0,     0,     0,     0,     0,   480,
       0,     0,   481,     0,     0,     0,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,     0,     0,
     489,     0,   491,     0,     0,   492
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-3656))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       6,   648,   649,   639,   605,   598,   581,   581,   965,  1108,
    1272,  1273,   880,    19,  1138,   521,  1807,    23,  1138,  1281,
    1508,  1633,   126,  1234,  1469,  1052,  1372,  1047,  1772,    35,
    1961,  1907,     4,    20,   611,  1295,    42,     6,   702,    45,
    1091,  2436,   665,    49,  1467,  1458,    33,   624,   926,    55,
     904,  1458,    39,  1234,  2070,  1161,  2234,  2761,  2074,  2293,
    2365,  1431,  1168,  2333,  2334,  2711,  3370,   969,   635,   636,
    1169,  1170,   926,  1458,  1173,  1174,  1175,  1176,  1082,  1178,
    1179,  1180,  1181,  1182,  1183,  1184,  1185,  2522,  2158,    95,
    2353,  1301,   969,  1928,  1924,  1706,  1794,   653,  2901,  2341,
    1924,  2431,  2031,  2437,  2031,  1879,  1880,  1448,  2410,  1383,
    3374,  1452,  2744,  1454,   120,  2346,   122,    19,    23,   125,
     126,   127,  1896,  2354,  3162,  2555,    33,  1401,     9,   765,
     753,   754,   755,  2311,  2199,  1409,  1410,    46,    17,  1913,
    1914,  1448,  2549,   766,  3033,  1452,  2553,  1454,  3422,  1490,
     155,    32,  3419,   122,  2952,  1929,   125,    38,  1932,  1933,
    2215,  1935,   902,    50,  1938,  1939,  1448,    20,  1942,    24,
      70,    57,  1438,  1947,   133,    17,   940,    61,  1952,  1953,
    1954,  1955,  1956,  1490,    16,    17,  1960,   927,  1962,  2611,
      95,    16,    17,  1916,  1968,  1969,  1970,  1971,  3179,  1750,
    1974,  2031,  1976,    74,    19,  1930,    64,  2031,  1490,  1934,
      21,  3216,  3217,  2670,    21,  3220,  2552,   794,    59,   155,
    1945,  1805,    33,  1207,  1870,    75,    11,    78,    19,  3234,
      50,  2053,  1957,    29,  3239,   265,    47,  3431,  2810,   230,
    2405,  2015,  2016,  2017,  2018,  2410,  2301,    58,    59,   151,
    2415,    58,    59,   155,  2419,   136,    61,   120,  2020,  1810,
     834,   155,   837,   837,  1898,  2394,  2395,  2704,  2433,  2434,
    2146,   106,   151,   126,   120,   370,    82,   266,   282,   212,
    2445,   858,  3937,    33,   158,   171,   120,   277,   151,   175,
    3594,    35,   186,  2535,   928,  2537,    16,    17,   369,    19,
     186,   185,   376,    11,   316,   151,    74,    16,    17,    51,
      19,   134,   104,  3727,    24,   250,   247,   151,   446,    61,
      35,   895,   421,   179,    16,    17,    16,    17,     8,    43,
      16,    17,   247,   151,  3478,    16,    17,   122,   461,   361,
     155,  3608,   189,    16,    17,   267,   362,   125,   270,   339,
    3793,   155,   122,    20,   393,    16,    17,   186,   843,    16,
      17,  2490,  2491,   550,   155,   125,   513,   358,   155,  2152,
     775,  3494,    20,    24,  3497,   230,   145,   355,  1025,  1026,
    1027,   252,   171,  2417,   125,    16,    17,   376,   550,   145,
     145,   238,  2698,   228,    16,    17,    16,    17,    16,    17,
     256,  2145,   516,   221,   508,    16,    17,    16,    17,  2443,
    2444,   162,  3603,   186,   128,   162,   581,  1081,   151,   542,
     613,  2498,   151,   305,   547,    33,   404,  3550,   995,  1093,
      67,    67,    16,    17,   320,   549,  2524,   570,    21,   443,
     544,   192,  3633,   153,   637,   192,   275,   228,   635,   465,
      33,    59,    16,    17,  3459,  3719,   234,   312,   943,   126,
     593,  3875,  1419,  3468,    47,   209,   871,   590,   283,    10,
     240,   636,    16,    17,  2780,    58,    59,   482,   126,  2721,
    2722,  1743,   605,  2359,   252,  2307,  3491,  3930,    16,    17,
     421,  3496,  2352,   234,   209,  2398,   418,  3535,   321,   179,
    1945,   357,   508,   509,   651,  2768,   421,  2809,   189,   637,
    2812,   550,    16,    17,   613,   184,  3854,   452,  3932,   525,
     230,  2452,   406,   529,  2829,  4180,  4181,    65,  1164,   376,
     272,   417,   522,   266,   540,   526,  1438,   266,   544,  3683,
     546,    70,  2418,   549,  2420,   155,   482,   618,   643,  1172,
     375,  2427,   221,   378,   263,   305,   562,  1898,   184,  1065,
    1066,  1438,  1661,   637,   451,  2441,  1189,   275,  2398,  2498,
    1234,  2498,  2448,  1672,  2398,  1916,  1675,  1431,  1852,   230,
     586,   611,   139,  1794,  2460,  2461,  2462,  1489,   482,   522,
    2466,  1898,   581,   378,  1979,   221,  3634,  3169,   604,  2654,
    2655,  2656,   312,   456,  3798,   611,   421,   613,   612,  1916,
     416,  3409,  1489,  1794,   636,   606,  1898,   468,   624,   625,
     626,   103,  3079,   635,   429,   631,   444,   633,   417,   635,
     636,   451,  3336,   491,   640,   641,  3974,  1377,   643,   645,
    1380,   546,  1924,  3910,  2809,  1385,  1213,  2812,   358,   655,
     656,  1655,  2426,   534,   660,   375,   107,   626,   378,   110,
    3934,   312,  2717,  2718,  2719,  2439,   375,  2832,  2498,   378,
    3107,  1411,  1412,  2396,  2498,  1252,  3098,   558,   482,  2020,
     162,    16,    17,   375,   565,   375,   378,   791,   378,   375,
    2031,   650,   378,  2244,   375,   482,   702,   378,   582,  2345,
    1684,  3965,   375,   444,   613,   378,   587,   358,  2942,  2951,
     192,  1475,  2534,  2020,   375,    16,    17,   378,   375,   561,
     625,   378,  2496,   573,  2031,  3763,   631,  3616,   635,  2313,
    2492,  1298,   473,   607,   613,   635,  3717,  3159,  2020,   641,
      16,    17,   613,  2377,   375,  2489,  1313,   378,  2014,  2031,
     637,   637,   758,   375,   760,   375,   378,   375,   378,   600,
     378,  1338,   641,  3395,   375,   561,   375,   378,   579,   378,
     561,  2836,   579,  1407,    62,   628,  4080,  3207,   641,   785,
     786,   787,   637,   789,   790,   791,   621,   793,   794,   456,
     622,   375,  2921,   799,   378,   641,  3203,   622,   512,   903,
    3230,  3231,   570,   618,  1381,  1361,   550,   641,    17,   587,
    4074,   375,  3610,   605,   378,   640,   526,   786,   532,    16,
      17,   790,  3229,   641,   793,   593,   832,   587,   834,  2612,
    3237,   375,  2255,  3871,   378,   550,  3243,    16,    17,   643,
     613,   610,   848,  3177,  2635,  2922,   587,   375,   637,   563,
     378,   171,   858,   859,   610,   610,   643,   863,  2946,    16,
      17,    16,    17,  3193,  3166,  3201,  3202,   408,  1442,  2357,
    3104,   375,   482,  3209,   378,   526,  3212,  3213,   611,  1456,
     852,   410,   611,   421,  3147,   522,   522,  3223,  3151,   895,
      16,    17,    16,    17,   635,  2798,   606,   903,  2689,  3235,
      16,    17,   622,  3239,  3240,  3241,  3242,   593,   641,  2769,
    2770,  3714,   641,   622,  3156,    68,  3147,   798,    24,  1583,
    3151,    62,   283,   592,   481,   344,   408,   136,   637,  2895,
     622,  4269,   622,  3938,   940,  3940,   622,   136,    16,    17,
    3118,   622,  1498,   848,   636,   637,   636,   637,   367,   622,
     365,   637,    16,    17,   859,   606,   637,   454,   863,   965,
     248,   622,   369,   636,   637,   622,   592,  2412,  2798,  4007,
    1848,   117,   513,   141,  2798,   636,   637,  2239,   641,   636,
     637,    95,   140,    16,    17,   268,  2248,  2333,  2334,   995,
     473,   622,   153,  2922,  1848,  2922,   579,  1875,  2097,    55,
     622,  3166,   622,  3970,   622,   636,   637,   160,    16,    17,
     189,   622,   541,   622,   636,   637,  2714,   637,   636,   637,
     603,  1875,    23,   550,   565,   636,   637,   636,  2055,    16,
      17,   266,  1679,   643,   266,   564,  2377,  2648,   622,  1045,
     375,    68,  1048,   378,  2879,    16,    17,  1151,   120,   221,
    4354,  1674,   635,   637,   174,  2396,   616,  2470,   622,  3114,
     421,    42,   544,  2470,   605,  2275,  2172,    12,  2342,   230,
    2377,    31,  3142,   637,   375,  1081,    45,   378,   622,    16,
      17,   550,  2826,   565,  1188,  2470,    80,  1093,    98,  2396,
     648,   649,  2922,   637,   622,  2377,  3531,   417,  2922,   375,
     199,  1841,   378,   554,   232,   396,   557,   248,   635,   637,
    1687,  1851,  2014,   241,  1854,  1855,  2398,   231,   622,   467,
    1767,     8,  1689,   605,   230,   334,   789,  2178,  2179,   373,
    1794,  1235,  1138,   637,   280,   334,   250,  2014,  3401,  3402,
    1045,   376,    29,  1048,   376,  1151,   643,   261,   192,  2761,
    3625,  2492,   635,  3029,   563,  2880,   117,  2498,    16,    17,
      16,    17,   163,  1740,  2263,   190,   635,  2171,  1272,  2293,
     117,  1275,  1276,   272,   593,    16,    17,  2181,   375,   462,
    3111,   378,  1188,    16,    17,  2492,   221,  1193,    16,    17,
     135,  2498,  1198,   391,  3284,   122,   375,   358,  2568,   378,
    1304,    30,   629,  1780,  1781,  3851,   312,  1213,   171,   636,
    2492,   618,   353,  3917,   382,   361,  2498,  3863,   375,  3185,
     375,   378,   637,   378,   377,   153,    16,    17,  1234,  1235,
     344,  2355,    16,    17,   181,  2355,  4203,   206,    16,    17,
     360,    21,   117,   531,    16,    17,  1252,    76,   283,   375,
     118,   375,   378,    33,   378,   383,  2679,   618,  1264,   375,
    1266,   426,   378,   126,   127,   210,  1272,    47,  3538,  1275,
    1276,   591,   444,   544,  3018,   484,   485,   553,    58,    59,
    3024,   241,  3298,  1289,  3028,    16,    17,   622,   360,   283,
      16,    17,  1298,  1198,    16,    17,   192,   375,  1304,  3533,
     378,   357,   637,    16,    17,   265,   181,  1313,  1314,   174,
    1282,   375,  1284,   240,   378,   473,  1288,    74,  1290,   280,
     149,   622,   189,  2447,  3819,  3820,    12,  2447,   186,    16,
      17,   153,  1338,   280,   209,  1341,   637,  3427,  2467,    16,
      17,  1445,   375,  1349,   458,   378,   622,    16,    17,   106,
     377,    16,    17,   198,   379,   380,  1362,  1363,  1364,  1365,
    1366,  1367,  2807,   344,   408,   526,  1372,   375,    16,    17,
     378,   239,  1378,  1379,   515,  1381,    16,    17,  1384,   478,
      16,    17,   417,   396,  1289,  1357,    16,    17,   375,   357,
     531,   378,   509,  1362,  1363,  1364,   153,  1366,  1404,   266,
     361,    16,    17,     0,   375,   280,  2668,   378,   230,  1314,
    1379,   576,   529,   527,   361,  1384,   250,   626,   627,   628,
     629,   630,   631,   632,   633,   622,   572,   261,    16,    17,
     358,   630,   631,   632,   633,  2880,   994,   635,   375,  1445,
     637,   378,   206,   622,  3919,   606,  3921,   567,   151,   135,
    1456,    16,    17,   148,   417,  1461,   390,   636,  1464,  1465,
    1365,  3766,  1367,   583,   159,   622,   155,   622,   436,  1475,
     430,   228,    16,    17,    16,    17,   637,   635,   619,  1451,
     637,   639,   637,    16,    17,  1043,   361,  3721,  1494,   253,
    1496,  1497,   189,  1499,  1500,   360,   622,   466,   622,  1404,
     544,   358,   189,  2714,   438,  1511,   622,  1513,   636,  2536,
     123,   637,   408,   637,  2776,   120,  2798,   375,  2778,   375,
     378,   637,   378,   190,   210,  2631,   640,  1496,  1497,   134,
      44,   132,  3548,  2714,   375,    33,   358,   378,   189,   550,
      16,    17,   375,   679,   622,   378,   147,   375,  3638,  3639,
     378,  3641,  2175,   403,   311,   423,  1461,   202,   622,   637,
    1465,    59,   507,   508,   509,   510,   511,   512,   155,   593,
    2076,   408,   329,   637,   403,  2699,   601,  1583,  1584,  2699,
      71,  2922,   527,  2089,   202,   375,  1690,  3765,   378,   622,
     241,   375,    16,    17,   378,   352,   425,   375,   526,   366,
     378,    16,    17,   375,   637,   250,   378,   228,   744,   107,
    2116,   572,   110,   637,   622,  2922,    16,    17,   481,   643,
     118,    16,    17,   137,   458,   572,   393,   502,   591,   637,
     459,   642,   253,  1639,  3047,   622,    16,    17,   473,  3046,
    2922,   486,    16,    17,   375,  4140,  4141,   378,   544,   375,
     637,   622,   378,   375,   351,   473,   378,   162,    16,    17,
     528,  3084,   375,    16,    17,   378,   637,   473,   473,   526,
     283,    16,    17,   544,   637,  1681,   513,  3421,   606,   374,
     525,  1687,  2188,  1689,  1690,   622,   272,  2816,   375,   518,
     322,   378,    16,    17,   185,  1701,  3572,   572,   375,   636,
    1706,   378,   567,   637,   526,  1711,   375,  4102,  1714,   378,
     375,    16,    17,   378,  1720,  1721,   321,  1723,   583,  3650,
     206,  2850,   389,   473,  3336,  1731,   305,   375,   565,  2858,
     378,   376,   117,  2862,  1740,   375,    50,   228,   378,   375,
      81,    74,   378,  1749,  1750,   375,    16,    17,   378,   606,
     117,    16,    17,   122,  1760,    88,    16,    17,  1764,   100,
     375,   117,   253,   378,   622,    12,   622,   253,   605,   526,
     643,    16,    17,   359,  1780,  1781,  1782,  1783,   636,  2908,
     636,   622,   473,   550,   606,   542,   522,   375,  1794,   622,
     378,  1797,  1798,  1799,   622,   636,   181,    16,    17,   579,
     635,   354,   355,   636,  1810,   629,  1778,    12,   636,   189,
     375,  1817,   636,   378,   181,  1720,  1721,   635,  1723,   599,
     600,   507,   508,   490,   510,   181,   512,    16,    17,   635,
     635,   375,   622,   375,   378,   971,   378,   416,   622,  3101,
    1812,   527,   375,  2711,   622,   378,   636,  1853,   346,    12,
     622,  2425,   636,   209,   549,  1760,  1862,  4084,   636,  1764,
    4087,   217,   561,  1869,   636,   601,    16,    17,   123,  3745,
    3746,  3747,  3748,  2751,   473,    16,    17,  1782,  1783,  2757,
     473,    16,    17,  3143,   553,   635,    12,   241,   135,   639,
      12,   622,  1797,  1798,  1799,   280,   622,  2751,   541,   375,
     622,   544,   378,  2757,  2955,   636,    16,    17,   262,   622,
     636,  1883,   491,   280,   636,   406,   548,    16,    17,   489,
    1892,  1893,   255,   636,   280,  2029,    19,  2978,  2979,  2033,
     135,  1903,  1904,  1905,  1906,   622,  1908,  1909,    17,    42,
      16,    17,   574,    12,   635,   622,    49,    24,  1853,  3000,
     473,   375,   220,   622,   378,   210,    24,   622,   481,   636,
     375,    16,    17,   378,  1869,   541,  2070,  1973,   544,   103,
    2074,   636,   135,   544,   622,   375,   361,    17,   378,  4206,
     375,  1987,   622,   378,  3108,   635,   622,    71,   636,   202,
    2637,   489,   622,   643,   361,   375,   636,    74,   378,   332,
     636,   375,    95,   232,   378,   361,   636,   622,   117,   135,
      16,    17,   241,   135,   590,   585,   547,   375,   635,  2759,
     378,   636,   375,  2029,   357,   378,   643,  2033,   283,  2035,
     375,  3155,  2038,   378,   622,  3155,   635,    16,    17,  2045,
    2046,  2047,   635,   357,  2050,   636,   637,    24,   636,  2672,
    2714,   375,    16,    17,   378,   625,   228,   622,   151,   557,
    2164,     6,   155,  3187,  2070,   220,   135,  3187,  2074,  2038,
     375,   636,   181,   378,   597,   598,   153,   211,   622,   189,
     622,    16,    17,   120,   136,   153,   419,   585,   228,   622,
    2194,  3865,   636,   186,   636,   172,   136,    74,    24,  3890,
     209,   185,  3978,   636,   600,   375,   143,   603,   378,   202,
     375,    56,   635,   378,   207,   375,  3979,   202,   378,  2696,
    2626,  3984,   593,  3897,   636,   637,  3900,  3901,  3902,  3903,
     375,   593,  2236,   378,    16,    17,   130,   451,   231,   370,
    2045,  2046,   238,   180,   228,   238,   622,  3891,    74,    16,
      17,  3171,    46,   230,   383,   189,   375,   250,  2164,   378,
     636,   598,   230,    16,    17,   636,   637,   481,   261,   253,
    2744,   280,   473,   266,   481,   637,   153,   283,   421,   636,
     513,   643,   275,  2189,   712,   641,   375,   572,  2194,   378,
     981,   982,  3538,   643,   139,   172,   588,  3248,   622,   442,
      58,    59,  3024,   372,   732,   572,  3028,   622,    11,  2215,
      68,   513,   636,   217,   635,   219,   572,   745,   746,  3430,
     185,   636,   622,  3997,  3998,   375,     6,   622,   378,  1020,
    2236,   635,  4006,   476,   375,   312,   636,   378,  2244,    11,
     375,   636,   622,   378,   312,  3369,   172,   444,   622,  3369,
     384,   344,   361,   230,   636,   637,  2262,  4001,  3285,   393,
    2364,  2365,   636,   635,   622,   375,   400,  3478,   378,   622,
    2276,    77,   635,    79,   367,   352,   375,   622,   636,   378,
     635,   358,   334,   376,   636,   637,   635,  2293,   614,   615,
     358,  2297,   636,   637,   334,  2301,   597,   598,   622,   375,
     103,   635,   378,   635,   230,  3917,   390,  1721,  2314,  1723,
    2316,   637,   636,   635,   120,   408,   635,   622,  1253,   122,
     375,  1256,   406,   378,  1259,    12,   635,  2333,  2334,    58,
      59,   636,  2436,   637,   635,   312,   166,   143,   635,  3784,
    3785,   635,  2314,   592,   593,   635,   595,   635,   597,  2355,
     635,  3308,   622,   635,    41,   636,   637,   622,  2364,  2365,
     635,   495,   622,   635,  3209,   458,   636,  3212,  3213,   375,
     550,   636,   378,   635,   180,   352,   636,   622,  3223,   636,
     637,   358,   635,  1797,  1798,  1799,   312,   635,   481,   192,
     593,   636,   636,   637,   636,   637,   636,   637,   635,  2405,
     635,  3889,    89,   622,  2410,   635,    93,   635,  2414,  2415,
     355,   375,    57,  2419,   378,  2421,   643,   636,   221,  2406,
     636,   637,   636,   637,   635,  2431,   352,  2433,  2434,  2416,
    2436,  2437,   358,   622,   527,  2422,  2442,   636,   637,  2445,
     375,  2447,   635,   378,   484,   485,   367,   636,   635,   526,
    2456,  2423,  2424,   635,  3453,  3454,   590,   635,   526,  2446,
     635,  2467,   635,   572,  2451,   636,   637,  3466,  2474,  2475,
    2457,  2458,   622,   276,  3473,   420,   635,   422,  2450,   635,
    2486,   622,   635,  2989,   635,     6,   636,   622,   581,   635,
      11,   117,    13,   375,    15,   636,   378,   636,   637,  3498,
     593,   636,  3501,   635,    25,    26,    16,    17,   375,   407,
      74,   378,   622,  2519,  2520,   635,  2488,    74,   611,   635,
     613,   635,   375,   622,   635,   378,   171,   145,   146,   606,
     175,   636,   637,   635,  3040,    56,    74,   115,   606,    60,
      61,   186,   174,   636,   637,    66,   622,   640,   641,   526,
     200,  2456,   635,    74,   635,   181,   636,   637,   245,   461,
     637,    82,   636,   637,  4355,   636,   637,   622,   635,   637,
      91,   636,   637,   636,   637,   635,   628,   629,   630,   631,
     632,   633,   635,   209,   635,   106,   626,   627,   628,   629,
     630,   631,   632,   633,   636,   637,   153,    95,   373,   120,
     526,   636,   637,   124,   635,   408,   636,   637,   636,   637,
     635,   132,   133,    61,  2519,   153,   622,   635,   139,   636,
     637,  3268,   428,    71,   636,   637,   147,   636,   637,   606,
     151,   541,   153,   635,   321,   635,    84,   117,   216,   635,
     120,   367,  2648,   164,  2650,   155,   156,  2653,  2654,  2655,
    2656,   636,   637,   635,   280,  3754,   636,   637,   622,   309,
     310,    61,   174,   184,   314,   315,   230,   636,   637,   636,
     637,    71,  2678,   230,   635,   320,   479,   636,   637,   635,
     606,   636,   637,   193,    84,   636,   637,   622,  3573,  3574,
    2696,   635,   230,  2699,   204,  1125,  1126,  3999,  4000,   386,
     367,   181,   223,  3645,  3646,  3120,  3121,   228,  2714,  3666,
     635,  2717,  2718,  2719,   235,  3672,  3072,  3073,  3348,  3349,
      31,  3295,   354,   355,  2730,  2829,  3988,   635,   360,   209,
     635,   252,   635,   231,    13,   361,   246,   185,  2744,   542,
     622,   544,   637,   191,   221,   496,   324,   257,    48,   277,
     328,    48,   250,   637,   275,   622,   367,   335,  2730,  1058,
    1059,  1060,   367,   261,  3888,   467,   581,   630,  3888,   622,
    1069,   161,   417,  2678,   284,   481,   635,   266,    16,    17,
     228,   186,   522,   541,   161,   185,   522,   590,   352,   277,
     311,   191,   152,    83,   358,   352,   637,   637,   368,  1098,
     280,   358,  1101,  2809,   537,   253,  2812,   636,   329,   151,
    2816,   498,   333,   120,   352,   106,   642,    35,  1117,  1118,
     358,  3395,  1121,  2829,     6,   136,  2832,   635,   228,   105,
     117,     4,   637,   120,   393,   472,   103,   415,   348,   605,
    1139,  1140,   354,   355,  2850,   241,   344,   637,   360,   390,
     371,   538,  2858,   253,    55,   376,  2862,   436,  2830,   106,
     166,   218,   643,   427,   385,   375,   637,  2839,   378,   390,
     427,    68,   393,   111,   112,   113,   114,   115,   637,    12,
     610,   361,  2888,   636,   636,  2891,   135,     9,   637,   427,
    2896,   636,   110,   471,   181,   162,  2902,   643,   636,   117,
    2906,   636,  2908,   424,   643,   637,   265,   635,   153,   643,
     117,   642,   637,   120,  2920,   277,    19,   438,   439,   440,
     441,   277,   209,   136,   277,   192,   277,  2933,    48,   277,
     241,   277,   637,  2902,  2940,   567,   637,   541,   155,   635,
     643,   410,   463,   643,  2950,   410,   572,   272,   637,   391,
    3597,   583,   637,  2925,   265,  4079,   174,   637,   406,  4079,
     458,   228,   526,   181,   136,   155,   561,   561,   390,   526,
      12,   637,   155,   637,   181,   213,   214,   215,   216,   637,
     241,   630,  3939,  3851,   103,   244,  2891,   539,   526,   179,
     390,   209,    95,   280,  3630,  3863,   176,   186,   519,   520,
     521,   637,   209,   193,   494,   526,   406,   394,   131,   276,
     169,   636,   367,   577,   204,   117,    25,   637,   120,  3123,
     577,   542,   637,   334,   545,   588,   617,   592,  3034,   527,
     608,   192,   367,   367,   637,  2940,  3042,  3611,   189,   577,
     636,   630,   606,   354,   355,   189,   624,   568,   151,   606,
     636,   636,   155,   636,   636,   567,   636,  4156,   136,    68,
     581,   636,   280,    72,   636,    74,   256,   257,   606,   241,
    3042,   583,   191,   280,   361,   637,   629,   635,   581,   181,
     637,   184,   636,   186,  3090,   636,   324,  4349,   326,   327,
     328,   136,   572,   636,   284,   637,  3957,   335,   637,   202,
      33,   636,  3108,  3109,   207,   636,  3112,   209,  3114,   228,
     636,   120,   622,   636,   636,   482,   635,  3123,   221,   430,
     641,   334,   635,  3129,   633,   636,   550,   345,   231,   635,
     637,   550,   550,   561,   582,   238,   403,   375,   356,   611,
     378,   408,   360,   361,    68,   136,   229,   250,   635,  3155,
    4249,   533,   635,   635,   361,    35,   200,   276,   261,   189,
    3166,   351,   334,   266,   643,   189,   637,   481,   636,  3175,
     416,  3177,   275,   484,   485,   637,   637,   415,   280,   186,
      46,  3187,   582,   513,   342,  3760,   497,  3193,   472,  3195,
     393,  3197,   513,   513,  3298,   128,   241,   513,   521,    71,
     513,   131,   390,  4327,   390,   390,   542,  4327,   251,   561,
    4167,  4168,   479,  4170,   251,   405,   390,  4341,   542,  1518,
     153,  4341,  4346,   131,   157,   390,  4346,  4351,    46,   552,
     110,  4351,   470,   471,   390,   392,   390,   117,   390,    95,
     390,   344,   635,    95,   253,   523,   524,   439,   276,   527,
     528,   635,  3845,   531,  3260,   533,   334,   643,   636,   361,
    4217,   194,  4219,  4220,   367,   593,   149,  4128,   636,   237,
     237,   484,   485,   376,   643,   542,   637,  3283,  3284,   212,
     547,  3253,  3386,   637,   155,   572,  1585,   636,   561,   334,
    1589,   636,  3298,   636,   174,   636,   636,   561,   565,   643,
     550,   181,  3274,   636,   643,   408,   643,   636,   561,  1608,
     637,   643,   484,   485,   618,   626,   627,   628,   629,   630,
     631,   632,   633,   590,   643,  3972,   635,   635,   272,   209,
    3905,    46,   550,   635,  3970,   561,   554,  4294,   605,   557,
     635,   635,   665,   334,   277,   354,   355,   670,   155,   567,
     373,   360,   189,   189,   572,   458,   189,   575,   367,  3365,
     479,   238,   189,  3369,   263,   572,   637,   637,   361,   250,
     608,  3475,  4233,   381,  4235,   231,   699,   250,   481,   231,
    3386,   106,   325,   106,   622,   623,   624,   169,   711,  3395,
     253,   253,   643,   561,   250,   635,   635,   406,   250,   372,
     280,  4262,   202,   550,    19,   261,   484,   485,   454,   261,
     628,   629,   635,   626,   627,   628,   629,   630,   631,   632,
     633,  3427,   643,   542,   527,   544,   390,   635,   547,  3435,
     753,   754,   755,   756,   630,   635,  4297,  4298,  3444,   484,
     485,   635,   239,   766,  3548,   239,   637,   367,   643,   636,
    3437,   630,   636,    54,   626,   627,   628,   629,   630,   631,
     632,   633,    63,   582,   635,   345,   636,   636,   477,  3475,
     572,   590,    73,   637,   407,   550,   636,   550,   581,   221,
     360,   361,   635,   416,    85,    86,    87,   636,   344,   592,
     593,   636,   344,   484,   485,   636,  3502,   636,   431,   637,
     101,   267,   390,  3509,   636,  3477,   637,  4081,   611,  3613,
     613,   367,   636,   643,   189,   367,   449,   526,   796,   587,
    3526,   241,   637,   155,   156,   247,   421,   367,   637,   250,
    3435,   250,  3538,   636,   637,   635,   253,   640,   641,   253,
     637,   613,  3548,  3515,   637,   635,   637,    54,  3702,   627,
     628,   629,   630,   631,   632,   633,    63,   636,   404,   492,
      74,   193,   367,   367,    19,   636,    73,  4203,   637,   635,
     496,   367,   204,   582,   367,   473,   636,   635,    85,    86,
      87,   626,   627,   628,   629,   630,   631,   632,   633,   522,
     376,   361,   613,  3599,   101,   635,   475,   636,   636,   263,
     636,   456,   458,   275,    11,   421,   458,  3613,   541,   200,
     636,   544,   142,    74,   246,   259,   636,   636,   202,  3625,
     637,   250,   483,   421,   250,   257,   637,    88,   120,   635,
     120,   544,  3638,  3639,   635,  3641,  4211,   628,   629,   630,
     631,   632,   633,   402,   643,   635,    78,   491,   636,   138,
     636,   496,   284,   468,   637,   636,   636,    19,   266,   636,
     636,   636,  3766,    33,   636,  3819,  3820,  4303,   129,    33,
     550,   527,   331,   636,   554,   527,   636,   557,  1001,   636,
     636,   255,   416,   636,   170,   637,   275,   567,   373,   238,
     613,   636,   572,  4329,   635,   575,   635,   637,    46,   207,
     637,   643,   593,   331,   593,  4352,  3712,  3713,  4309,   636,
     635,   308,   587,   635,   635,   120,   348,   635,  3724,   635,
     635,   603,   323,   360,   253,   603,   253,    33,   361,   636,
     635,  1054,  1055,   637,   361,   331,   636,   168,   550,   340,
    1063,  1064,  1065,  1066,  1067,  1068,   597,  3753,   628,   629,
     253,   550,   544,  1076,  1077,   550,  1079,  1080,   593,   593,
    3766,  1084,   238,   367,  1087,  1088,  1089,  1090,   356,  1092,
     598,   517,   637,   454,   613,   361,  1099,  1100,   636,  1102,
    1103,   373,   636,  1106,  1107,  1108,  1109,  1110,  1111,  1112,
    1113,  1114,   532,  1116,   255,  3801,  1119,  1120,   587,   150,
     610,  1124,  3956,  3957,   635,  1128,  1129,  1130,  3713,   635,
    3816,   635,    30,   636,   644,  3821,   323,   186,  1141,  1142,
    1143,   388,   636,   636,   552,   153,   131,  1150,   131,   635,
      33,   408,    70,   340,  1157,  1158,  1159,   186,  1161,   429,
      30,   610,   189,   533,    61,  1168,  1169,  1170,  3753,  1172,
    1173,  1174,  1175,  1176,   373,  1178,  1179,  1180,  1181,  1182,
    1183,  1184,  1185,   636,    61,   637,  1189,  1190,   469,   636,
     635,   332,    14,   268,     5,   238,   367,   149,   641,   367,
     373,   129,  3888,   138,    25,    26,   373,  4041,  3894,    46,
     635,    46,  3864,   354,   355,   148,   357,    46,  4002,    46,
      46,   587,  4056,   635,   635,   125,   610,   149,   220,   282,
     552,   641,   119,  3919,   144,  3921,  4070,    58,    59,    60,
     644,    46,   635,  4041,    46,   128,    46,    68,   529,    52,
     553,   641,   138,    74,   462,    25,    26,   637,  4056,   464,
     361,    82,   636,  3949,   149,   546,   453,   553,   637,   205,
     153,   218,  4070,   637,   157,    52,   636,   636,   419,   641,
     637,   149,   469,   186,   186,   106,    46,   186,    58,    59,
      60,   553,   443,   612,  4128,   120,   221,   361,    68,   120,
     635,   481,  3826,   124,    74,   637,  4140,  4141,   188,  2201,
    2393,   194,    82,  3261,  3524,   649,  4002,  3856,  4102,  3973,
     978,   111,   112,   113,   114,   115,  4147,  3522,  4148,   212,
    3526,  3711,   153,  4329,  4291,    49,   106,   582,  1711,  1793,
    2648,  4299,   529,  3702,  3996,  3702,  1349,  3702,   670,  4141,
     120,  3702,  4186,  4183,   124,  1358,  3702,  3702,  3702,   546,
    3702,  4034,  4196,  3702,  3702,  4183,  3702,  3702,  3702,  4060,
    4059,  1454,   513,  1018,  1986,  2856,  1458,   699,  4162,  2276,
    3720,  3090,  2691,   153,  1301,  3754,  3894,  3992,  4186,   711,
    3367,  4249,  4164,  4079,   277,  4211,  1489,   517,  4196,  4233,
    1979,  4235,  3277,  3905,  2926,  2520,  3197,   228,  2477,  3175,
    1987,  4245,  3217,  3244,   235,  3217,  4102,  3664,  3436,  3486,
    4081,  3475,  2601,   213,   214,   215,   216,  3025,  4262,  3028,
    4264,   252,  4266,  2364,   756,  3020,  3929,  4089,  4090,  4273,
      11,  3867,  2807,  3932,  1503,  2043,  3875,  4245,  3724,  4283,
    3672,  1986,  2470,  1416,  3441,  3176,  2288,  2678,   228,  1782,
    2255,  3085,   599,  4297,  4298,   235,  4264,  1485,  4266,  2154,
    1465,  2305,  1804,   892,  3042,  4273,  4162,  3157,  3413,  4313,
    4314,  2075,   252,  2637,  4318,  4283,  2356,  3145,  3927,  2153,
     311,  3787,  4178,  4179,  1093,   265,  4178,  3260,  4179,  1069,
    3187,  2182,  4188,  3626,  4000,  3613,  4280,  2310,   329,  4195,
    2047,   605,   605,  1289,  1199,  4313,  4314,  1314,  2292,  3369,
    4318,  1524,  2250,  3103,   407,  3102,   605,  3155,   588,  4079,
    1511,   605,   661,   416,   324,  1849,   326,   327,   328,   837,
     561,   311,  1370,   836,    27,   335,  1850,  1700,   431,  3195,
    4247,  1398,  1321,  4337,  3088,  4276,  4109,  4174,  4346,   329,
    4351,  3478,  3108,  1349,   385,  2742,   449,   895,  1742,  1810,
     895,  2323,   393,  2740,  2739,  2665,  1764,  4263,  1339,   573,
     874,  1261,  4268,  3743,  1494,  3749,  2650,   574,   879,   513,
     513,  3846,  3511,   649,   649,   649,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,
      -1,  1614,  1615,  1616,    -1,   385,    -1,  4303,    -1,    -1,
      -1,    -1,    -1,   393,    -1,   415,  1629,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,
      -1,  4327,   463,  4329,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4337,  1655,    -1,    -1,  4341,    -1,    -1,  1661,    -1,
    4346,  1664,    -1,  1666,    -1,  4351,    -1,    -1,    -1,  1672,
      -1,  1674,  1675,    -1,    -1,    -1,    -1,    -1,    -1,  1001,
     470,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,   519,   520,
     521,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   542,    -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1054,  1055,    -1,  1738,    -1,    -1,    -1,    -1,
      -1,  1063,  1064,    -1,    -1,  1067,  1068,    -1,    -1,   519,
     520,   521,    -1,    -1,  1076,  1077,   526,  1079,  1080,    -1,
     581,    -1,  1084,    -1,    -1,  1087,  1088,  1089,  1090,    -1,
    1092,    -1,   542,    -1,  1777,   545,    -1,  1099,  1100,    -1,
    1102,  1103,    -1,    -1,  1106,  1107,    -1,  1109,  1110,  1111,
    1112,  1113,  1114,    -1,  1116,    -1,    -1,  1119,  1120,    -1,
      -1,    -1,  1124,    -1,    -1,    -1,  1128,  1129,  1130,    -1,
      13,   581,    15,    -1,    -1,    -1,   637,    -1,   608,  1141,
    1142,  1143,    -1,    -1,    -1,    -1,    -1,    30,  1150,    -1,
      -1,    34,    -1,   623,   624,  1157,  1158,  1159,    12,    13,
      -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    -1,
      -1,    -1,    -1,    -1,    -1,   635,    -1,    -1,  1190,    -1,
      -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,
      94,    -1,   125,   126,   127,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   165,    -1,    -1,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
      -1,   165,    -1,    -1,    -1,   198,    -1,   200,    -1,    -1,
      -1,    -1,   205,    -1,   178,   208,  2009,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   224,   225,   226,    -1,    -1,   200,  1349,    -1,    -1,
      -1,   234,    -1,   236,    -1,    -1,  1358,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   254,    -1,  2056,   228,    -1,    -1,  2060,    -1,    -1,
     234,    -1,  2065,  2066,    -1,    -1,    -1,    -1,   271,    -1,
      -1,    -1,   275,  2076,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2086,  2087,  2088,  2089,    -1,  2091,  2092,
    2093,  2094,  2095,    -1,  2097,    -1,    -1,    -1,    -1,    -1,
      -1,   275,    -1,  2106,    -1,    -1,    -1,  2110,    -1,  2112,
    2113,    -1,  2115,  2116,    -1,    -1,    -1,  2120,  2121,  2122,
      -1,    -1,    -1,  2126,  2127,  2128,    -1,  2130,    -1,  2132,
      -1,  2134,    -1,  2136,    -1,  2138,    -1,    -1,    -1,    -1,
    2143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2165,    -1,    -1,    -1,    -1,    -1,   371,  2172,
      -1,    -1,  2175,    -1,    -1,    -1,    -1,    -1,  2181,    -1,
      -1,  2184,    -1,    -1,    -1,  2188,    -1,   390,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,  1524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   436,    -1,   409,   439,    -1,   441,   413,
      -1,   444,  2245,    -1,   447,   448,  2249,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   457,   429,   459,    -1,    -1,    -1,
    2263,    -1,    -1,   437,   467,    -1,    -1,    -1,    -1,    -1,
     473,   445,    -1,    -1,    -1,    -1,    -1,    -1,   481,    -1,
      -1,    -1,    13,   486,    15,   488,    -1,    -1,    -1,    -1,
      -1,    -1,  1614,  1615,  1616,    -1,    -1,    -1,    -1,   473,
      32,    33,    -1,    34,    -1,    -1,    38,    -1,    40,    -1,
      42,    43,   486,   487,    -1,   518,    -1,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,    59,    -1,    60,
      61,    -1,    -1,  1655,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1664,    -1,  1666,    76,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   536,    94,    -1,   568,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,   580,   110,    -1,
      -1,   584,    -1,    -1,   587,   116,   118,    -1,    -1,   592,
      -1,   565,    -1,    -1,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   137,    -1,   138,   139,    -1,
      -1,    -1,    -1,   587,    -1,   589,  1738,   620,    -1,    -1,
      -1,    -1,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   635,    -1,   165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,
     182,    -1,   183,    -1,    -1,  1777,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,   200,
      -1,    -1,    -1,    -1,   205,    -1,    -1,   208,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    12,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,   236,    -1,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2540,    -1,    -1,
     271,  2544,    -1,    -1,   275,    -1,   278,   279,    -1,   281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2563,  2564,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2583,    -1,    -1,    -1,    -1,   317,   318,   319,    -1,  2592,
      -1,  2594,    -1,  2596,    -1,    -1,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   343,   139,    -1,   346,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2626,    -1,    -1,    -1,    -1,  2631,    -1,
      -1,   363,   364,    -1,    -1,   162,    -1,    -1,   165,    -1,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   178,    -1,    -1,    -1,  2658,    -1,    -1,    -1,   390,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2670,    -1,  2672,
      -1,    -1,   403,   200,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   414,    -1,    -1,    -1,  2009,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   228,    -1,    -1,    -1,   436,    -1,   234,   439,    -1,
     441,    -1,    -1,   444,    -1,    -1,   447,   448,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,   459,    -1,
      -1,    -1,    -1,    -1,  2056,    -1,   467,    -1,  2060,    -1,
      -1,    -1,   473,  2065,  2066,   477,    -1,    -1,   275,   481,
     481,    -1,    -1,    -1,    13,   486,    -1,   488,    -1,    -1,
      -1,   493,    -1,    -1,  2086,  2087,  2088,    -1,    -1,  2091,
    2092,  2093,  2094,  2095,    -1,    -1,    -1,    -1,    -1,    -1,
    2783,    -1,    -1,    -1,  2106,    -1,    -1,   518,  2110,    -1,
    2112,  2113,    -1,  2115,    -1,    -1,    -1,    -1,  2120,  2121,
    2122,    -1,    -1,    -1,  2126,  2127,  2128,    -1,  2130,    -1,
    2132,    -1,  2134,    -1,  2136,    -1,  2138,    -1,    -1,   551,
      -1,  2143,   554,    -1,    -1,   557,   558,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,    94,    -1,   568,    -1,    -1,
      -1,    -1,    -1,  2165,    -1,    -1,    -1,    -1,    -1,   580,
      -1,    -1,    -1,   584,    -1,    -1,   587,    -1,    -1,  2181,
      -1,   592,  2184,    -1,    -1,    -1,   125,   599,   600,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     139,    -1,   409,    -1,    -1,    -1,   413,    -1,    -1,   620,
      -1,    -1,   624,    -1,    -1,    -1,  2899,  2900,    -1,    -1,
      -1,    -1,   429,   162,   635,    -1,   165,    -1,    -1,    -1,
     437,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,   178,
      -1,    -1,    -1,  2245,    -1,    -1,    -1,  2249,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   200,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2958,    -1,    -1,    -1,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,  2982,
      -1,    33,    34,  2986,  2987,    -1,  2989,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2997,    -1,    -1,    -1,    -1,  3002,
      -1,    -1,  3005,    -1,  3007,  3008,    58,    59,    -1,   536,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    69,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
      -1,    -1,    11,    -1,    13,    -1,    -1,  3040,   565,    -1,
      92,    -1,    94,    -1,    -1,    -1,    25,    26,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     587,    -1,   589,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3074,    -1,    -1,    -1,    -1,  3079,    56,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,  3102,
     152,   153,    -1,    82,    -1,    -1,   158,    -1,    -1,   161,
      -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    26,   190,    -1,
     192,   120,    -1,    -1,    -1,   124,    -1,   199,    -1,   201,
     409,    -1,    -1,   132,  3157,    -1,    -1,    -1,    -1,    -1,
     139,    -1,  3165,    -1,    -1,    -1,    -1,    -1,   147,    -1,
     429,    60,    -1,    -1,   153,   227,   228,    -1,   437,    -1,
      -1,    -1,    -1,    -1,    -1,    74,   445,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,   251,
      -1,    -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   106,  2540,    -1,
     272,    -1,  2544,    -1,    -1,    -1,    -1,   486,   487,    -1,
      -1,   120,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,  2563,  2564,    -1,    -1,    -1,    -1,    -1,    -1,   228,
      -1,    -1,    -1,   305,    -1,    -1,   235,    -1,    -1,    -1,
      -1,  2583,    -1,    -1,   153,    -1,    -1,    -1,    -1,    -1,
    2592,    -1,  2594,   252,  2596,    -1,    -1,   536,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   565,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   587,    -1,
     589,    -1,   311,    -1,    -1,    -1,  2658,    -1,    -1,   228,
      -1,    -1,    -1,    25,    26,   397,   235,    -1,  2670,    -1,
     329,    -1,    -1,    -1,   333,   407,   408,    -1,    -1,   411,
     412,    -1,    -1,   252,    -1,    -1,    -1,  3370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,
     432,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,   376,    -1,    -1,
      82,    -1,  3405,  3406,    -1,    -1,   385,    -1,  3411,    -1,
      -1,    -1,    -1,    -1,   393,    -1,  3419,    -1,    -1,    -1,
      -1,    -1,   311,    -1,   106,    -1,   478,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   491,
     329,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     439,  2783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     522,   153,    -1,    -1,   526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,   228,   526,    -1,   601,
      -1,    -1,    -1,   235,    -1,   607,  3559,    -1,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
     252,    -1,    -1,    -1,   463,    -1,    -1,  2899,  2900,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3594,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   581,    -1,    -1,  3608,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3628,  3629,    -1,    -1,   311,
     519,   520,   521,    -1,    -1,    -1,  2958,   526,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   329,    -1,    -1,
      -1,    -1,    -1,   542,    -1,    -1,   545,    -1,    -1,    -1,
    2982,    -1,    -1,    -1,  2986,  2987,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2997,    -1,    -1,    -1,    -1,
    3002,    -1,    -1,  3005,    -1,  3007,  3008,    -1,    -1,    -1,
      -1,    -1,   581,    -1,    -1,    -1,    -1,    -1,    -1,  3702,
      -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3754,  3074,    -1,    -1,    -1,    -1,  3079,    -1,    -1,
      -1,  3764,    -1,    -1,    -1,    -1,    -1,  3770,    -1,  3772,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3102,   463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3813,    -1,    -1,    -1,    -1,    -1,  3819,  3820,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3157,    -1,   519,   520,   521,
      -1,    -1,    -1,  3165,   526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     542,    -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3910,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3942,
      -1,  3944,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3954,    -1,  3956,  3957,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3983,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4039,    -1,  4041,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3370,    -1,
      -1,    -1,    -1,  4056,  4057,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4070,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4080,    -1,    -1,
      -1,    -1,    -1,  3405,  3406,    -1,    -1,    -1,    -1,  3411,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3419,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4127,  4128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4140,  4141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4156,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4186,    -1,    -1,    -1,    -1,    -1,    -1,
    4193,    -1,    -1,  4196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4226,    -1,    -1,    -1,    -1,    -1,    -1,
    4233,    -1,  4235,    -1,    -1,    -1,    -1,  3559,    -1,    -1,
      -1,    -1,  4245,    -1,    -1,    -1,  4249,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4262,
      -1,  4264,    -1,  4266,    -1,    -1,    -1,    -1,    -1,    -1,
    4273,    -1,  3594,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4283,    -1,    -1,    -1,    -1,    -1,  3608,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4297,  4298,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3628,  3629,    -1,    -1,
    4313,  4314,    -1,    -1,    -1,  4318,    -1,    -1,    -1,    -1,
      -1,  4324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3764,    -1,    -1,    -1,    -1,    -1,  3770,    -1,
    3772,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3813,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3910,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3942,    -1,  3944,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3954,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4039,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4057,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4080,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    44,    45,  4127,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,  4193,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,  4226,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,    -1,   208,   209,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,  4324,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,   258,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,  4354,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,   562,   563,   564,    -1,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,   594,   595,   596,   597,   598,    -1,    -1,
     601,   602,    -1,   604,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,    -1,    -1,    -1,   628,   629,    -1,
      -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,
      -1,   642,   643,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,
     192,    -1,   194,   195,   196,   197,    -1,   199,    -1,   201,
      -1,   203,    -1,   205,   206,    -1,   208,   209,    -1,   211,
     212,    -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,
      -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,    -1,    -1,   545,   546,   547,   548,    -1,   550,   551,
     552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   577,    -1,   579,   580,    -1,
      -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,
      -1,    -1,   594,   595,   596,   597,   598,    -1,    -1,   601,
     602,    -1,   604,   605,   606,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,
      -1,    -1,   624,    -1,    -1,    -1,   628,   629,    -1,    -1,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,
     642,   643,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    -1,    96,    97,    98,    99,    -1,   101,   102,
     103,    -1,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,   174,   175,   176,    -1,   178,   179,   180,   181,    -1,
     183,    -1,    -1,    -1,   187,   188,   189,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
     203,    -1,   205,   206,    -1,   208,   209,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,   594,   595,   596,   597,   598,    -1,    -1,   601,   602,
      -1,   604,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
      -1,   624,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,
      -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,
     643,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    -1,    96,    97,    98,    99,    -1,   101,   102,   103,
      -1,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,    -1,   183,
      -1,    -1,    -1,   187,   188,   189,   190,    -1,   192,    -1,
     194,   195,   196,   197,    -1,   199,    -1,   201,    -1,   203,
      -1,   205,   206,    -1,   208,   209,    -1,   211,   212,    -1,
      -1,    -1,   216,   217,   218,   219,   220,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,
     234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,    -1,
      -1,   545,   546,   547,   548,    -1,   550,   551,   552,    -1,
     554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,    -1,   579,   580,    -1,    -1,   583,
      -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,
     594,   595,   596,   597,   598,    -1,    -1,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,
     624,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,   643,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,   189,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,   550,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,   594,
     595,   596,   597,   598,    -1,    -1,   601,   602,    -1,   604,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,   624,
      -1,    -1,    -1,   628,   629,    -1,    -1,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,    -1,    -1,   642,   643,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,   195,
     196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,    -1,
     216,   217,   218,   219,   220,    -1,   222,   223,    -1,    -1,
      -1,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,   235,
     236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,    -1,    -1,   545,
     546,   547,   548,    -1,   550,   551,   552,    -1,   554,   555,
     556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,
     586,    -1,   588,    -1,   590,   591,    -1,    -1,   594,   595,
     596,   597,   598,    -1,    -1,   601,   602,    -1,   604,   605,
     606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,   617,    -1,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,   629,    -1,    -1,    -1,    -1,   634,   635,
      -1,    -1,   638,   639,    -1,    -1,   642,   643,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    -1,    -1,    96,
      97,    98,    99,    -1,   101,   102,   103,    -1,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,   174,   175,   176,
      -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,   203,    -1,   205,   206,
      -1,   208,   209,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,   234,   235,   236,
     237,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,   330,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,   443,   444,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,   550,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,   594,   595,   596,
     597,   598,    -1,    -1,   601,   602,    -1,   604,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,    -1,   624,    -1,    -1,
      -1,   628,   629,    -1,    -1,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,    -1,    -1,   642,   643,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    -1,    -1,    96,    97,
      98,    99,    -1,   101,   102,   103,    -1,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
     178,   179,   180,   181,    -1,   183,    -1,    -1,    -1,   187,
     188,    -1,   190,    -1,   192,    -1,   194,   195,   196,   197,
      -1,   199,    -1,   201,    -1,   203,    -1,   205,   206,    -1,
     208,   209,    -1,   211,   212,    -1,    -1,    -1,   216,   217,
     218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,
      -1,    -1,   230,    -1,    -1,    -1,   234,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,   330,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,    -1,   356,   357,
     358,    -1,   360,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,   443,   444,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,    -1,    -1,   545,   546,   547,
     548,    -1,   550,   551,   552,    -1,   554,   555,   556,   557,
      -1,    -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,
     568,   569,   570,   571,   572,   573,   574,   575,   576,   577,
      -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,
     588,    -1,   590,   591,    -1,    -1,   594,   595,   596,   597,
     598,    -1,    -1,   601,   602,    -1,   604,   605,   606,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,
      -1,   619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,
     628,   629,    -1,    -1,    -1,    -1,   634,   635,    -1,    -1,
     638,   639,    -1,    -1,   642,   643,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    -1,    -1,    96,    97,    98,
      99,    -1,   101,   102,   103,    -1,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,
     209,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,   234,   235,   236,   237,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,   443,   444,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,   550,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,    -1,
     579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,
      -1,   590,   591,    -1,    -1,   594,   595,   596,   597,   598,
      -1,    -1,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,
     619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,
     629,    -1,    -1,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,    -1,    -1,   642,   643,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,
     230,    -1,    -1,    -1,   234,   235,   236,   237,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
     330,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,   443,   444,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,    -1,    -1,   545,   546,   547,   548,    -1,
     550,   551,   552,    -1,   554,   555,   556,   557,    -1,    -1,
      -1,    -1,    -1,   563,   564,    -1,   566,   567,   568,   569,
     570,   571,   572,   573,   574,   575,   576,   577,    -1,   579,
     580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,
     590,   591,    -1,    -1,   594,   595,   596,   597,   598,    -1,
      -1,   601,   602,    -1,   604,   605,   606,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,
     620,   621,    -1,    -1,   624,    -1,    -1,    -1,   628,   629,
      -1,    -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
      -1,    -1,   642,   643,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    -1,    -1,    96,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,   203,    -1,   205,   206,    -1,   208,   209,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   575,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,   594,   595,   596,   597,   598,    -1,    -1,
     601,   602,    -1,   604,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,    -1,    -1,    -1,   628,   629,    -1,
      -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,
      -1,   642,   643,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    -1,    -1,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,
     192,    -1,   194,   195,   196,   197,    -1,   199,    -1,   201,
      -1,   203,    -1,   205,   206,    -1,   208,   209,    -1,   211,
     212,    -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,
      -1,    -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,   330,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,   443,   444,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,    -1,    -1,   545,   546,   547,   548,    -1,   550,   551,
     552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,   570,   571,
     572,   573,   574,   575,   576,   577,    -1,   579,   580,    -1,
      -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,
      -1,    -1,   594,   595,   596,   597,   598,    -1,    -1,   601,
     602,    -1,   604,   605,   606,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,
      -1,    -1,   624,    -1,    -1,    -1,   628,   629,    -1,    -1,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,
     642,   643,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    -1,    -1,    96,    97,    98,    99,    -1,   101,   102,
     103,    -1,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,   174,   175,   176,    -1,   178,   179,   180,   181,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
     203,    -1,   205,   206,    -1,   208,   209,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,   234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,   330,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,   350,   351,   352,
     353,   354,    -1,   356,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,   594,   595,   596,   597,   598,    -1,    -1,   601,   602,
      -1,   604,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
      -1,   624,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,
      -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,
     643,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      -1,    -1,    96,    97,    98,    99,    -1,   101,   102,   103,
      -1,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,    -1,   183,
      -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,
     194,   195,   196,   197,    -1,   199,    -1,   201,    -1,   203,
      -1,   205,   206,    -1,   208,   209,    -1,   211,   212,    -1,
      -1,    -1,   216,   217,   218,   219,   220,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,
     234,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,    -1,   360,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,   443,
     444,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,    -1,
      -1,   545,   546,   547,   548,    -1,   550,   551,   552,    -1,
     554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,    -1,   579,   580,    -1,    -1,   583,
      -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,
     594,   595,   596,   597,   598,    -1,    -1,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,
     624,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,   643,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,   350,   351,   352,   353,   354,
      -1,   356,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,   443,   444,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,   550,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,   594,
     595,   596,   597,   598,    -1,    -1,   601,   602,    -1,   604,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,   624,
      -1,    -1,    -1,   628,   629,    -1,    -1,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,    -1,    -1,   642,   643,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    -1,    -1,
      96,    97,    98,    99,    -1,   101,   102,   103,    -1,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,
      -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,   195,
     196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,   205,
     206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,    -1,
     216,   217,   218,   219,   220,    -1,   222,   223,    -1,    -1,
      -1,   227,    -1,    -1,   230,    -1,    -1,    -1,   234,   235,
     236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,   330,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,    -1,
     356,   357,   358,    -1,   360,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,
     426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
      -1,   437,   438,    -1,   440,   441,   442,   443,   444,   445,
      -1,   447,    -1,   449,   450,    -1,   452,   453,   454,    -1,
     456,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,
     476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,
      -1,   487,    -1,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,
     506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,
      -1,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,    -1,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,    -1,    -1,   545,
     546,   547,   548,    -1,   550,   551,   552,    -1,   554,   555,
     556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
     576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,
     586,    -1,   588,    -1,   590,   591,    -1,    -1,   594,   595,
     596,   597,   598,    -1,    -1,   601,   602,    -1,   604,   605,
     606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,   617,    -1,   619,   620,   621,    -1,    -1,   624,    -1,
      -1,    -1,   628,   629,    -1,    -1,    -1,    -1,   634,   635,
      -1,    -1,   638,   639,    -1,    -1,   642,   643,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
      -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,   209,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,   550,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
     567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,    -1,   624,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   642,   643,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
     194,   195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,
      -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,   265,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,   473,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,   536,   537,   538,   539,    -1,   541,   542,    -1,
      -1,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,
     564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,
      -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,
      -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,
      -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,
     624,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   643,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
      -1,   624,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     643,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,
     192,    -1,   194,   195,   196,   197,    -1,   199,    -1,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,
     212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,   473,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,   536,   537,   538,   539,    -1,   541,
     542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,
     552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,
      -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,   579,   580,    -1,
      -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,
      -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,
      -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,
      -1,    -1,   624,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,   636,    -1,    -1,    18,    -1,    -1,
      21,   643,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,   636,    14,    -1,    -1,    -1,
      18,   642,   643,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,
     128,    -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,
     138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,    -1,    -1,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,    -1,
     178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,
     188,    -1,   190,    -1,   192,    -1,   194,   195,   196,   197,
      -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,
     208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,
     218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
      -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,   331,    -1,   333,    -1,   335,   336,   337,
     338,   339,   340,   341,   342,   343,    -1,    -1,   346,   347,
      -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,
     358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,    -1,   403,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
      -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,
     428,    -1,    -1,   431,   432,   433,   434,   435,    -1,   437,
     438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,
      -1,   449,   450,    -1,   452,   453,   454,    -1,   456,    -1,
      -1,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,
     478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,
      -1,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,
     508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,    -1,
     528,   529,   530,   531,   532,   533,    -1,    -1,   536,   537,
     538,   539,    -1,   541,   542,    -1,    -1,   545,   546,   547,
     548,    -1,    -1,   551,   552,    -1,   554,   555,   556,   557,
      -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,
     568,   569,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,
     588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,
     598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,
      -1,   619,   620,   621,    -1,    -1,   624,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,   635,    -1,    14,
      -1,    -1,    -1,    18,    -1,   643,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,   624,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   643,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,
     194,   195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,
      -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,   536,   537,   538,   539,    -1,   541,   542,    -1,
      -1,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,
     564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,
      -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,
      -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,
      -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,
     624,    -1,    -1,    -1,    -1,     5,   630,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   643,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,    -1,   178,   179,
     180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,
     230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,   331,    -1,   333,    -1,   335,   336,   337,   338,   339,
     340,   341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,
     350,   351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,
      -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,   417,    -1,    -1,
     420,    -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,
      -1,   431,   432,   433,   434,   435,    -1,   437,   438,    -1,
     440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,
     450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
      -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,   479,
      -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,
      -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,    -1,   528,   529,
     530,   531,   532,   533,    -1,    -1,   536,   537,   538,   539,
      -1,   541,   542,    -1,    -1,   545,   546,   547,   548,    -1,
      -1,   551,   552,    -1,   554,   555,   556,   557,    -1,    -1,
      -1,    -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,   579,
     580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,
     590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,
      -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,
     620,   621,    -1,    -1,   624,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,   635,    -1,    14,    -1,    -1,
      -1,    18,    -1,   643,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,    -1,   624,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   642,   643,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,
     194,   195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,
      -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,
      -1,   335,   336,   337,   338,   339,   340,   341,   342,   343,
      -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,   353,
      -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,   386,    -1,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,   403,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,
     424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
     434,   435,    -1,   437,   438,    -1,   440,   441,   442,    -1,
      -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,   453,
     454,    -1,   456,    -1,    -1,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,    -1,   471,   472,    -1,
      -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
      -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,
     504,   505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,
     514,    -1,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,    -1,   528,   529,   530,   531,   532,   533,
      -1,    -1,   536,   537,   538,   539,    -1,   541,   542,    -1,
      -1,   545,   546,   547,   548,    -1,    -1,   551,   552,    -1,
     554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,
     564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,
      -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,
      -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,
      -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,    -1,
     624,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   643,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
      -1,   624,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     643,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,
     192,    -1,   194,   195,   196,   197,    -1,   199,    -1,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,
     212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,
      -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,   331,
      -1,   333,    -1,   335,   336,   337,   338,   339,   340,   341,
     342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,
     352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,   403,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,
      -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
     432,   433,   434,   435,    -1,   437,   438,    -1,   440,   441,
     442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,
     452,   453,   454,    -1,   456,    -1,    -1,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,    -1,   471,
     472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,
      -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,   511,
      -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,    -1,   528,   529,   530,   531,
     532,   533,    -1,    -1,   536,   537,   538,   539,    -1,   541,
     542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,
     552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,
      -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,   579,   580,    -1,
      -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,
      -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,
      -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,
      -1,    -1,   624,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   643,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   642,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   642,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   642,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   642,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   642,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   642,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,    -1,   624,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,   642,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,    -1,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,    -1,    -1,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
      -1,    -1,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,    -1,    -1,   440,
      -1,   442,   443,    -1,   445,    -1,    -1,    -1,   449,    -1,
      -1,   452,   453,   454,   455,   456,    -1,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,    -1,    -1,    -1,    -1,   476,   477,   478,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,    -1,   490,
      -1,   492,    -1,   494,    -1,    -1,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,    -1,   519,   520,
     521,   522,    -1,    -1,    -1,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,    -1,
      -1,    -1,   583,    -1,    -1,   586,    -1,    -1,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,   612,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,   637,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,   630,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,   630,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,   630,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,   568,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
     579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,
     619,   620,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,   630,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
     181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,   209,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,   354,   355,    -1,   357,   358,    -1,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
     501,   502,   503,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,   572,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,   155,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,   482,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,   550,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,   361,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,   572,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,   550,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,   568,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
     579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,
     619,   620,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    99,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,   550,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,   550,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,   550,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,   568,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
     579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,
     619,   620,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,   550,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    90,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
     189,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,   568,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
     579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,
     619,   620,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    12,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,   357,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,   386,    -1,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,   403,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,   438,
      -1,   440,   441,   442,    -1,    -1,   445,    -1,   447,    -1,
     449,   450,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,    -1,   471,   472,    -1,    -1,    -1,   476,   477,   478,
     479,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,   568,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
     579,   580,    -1,    -1,   583,    -1,    -1,   586,    -1,   588,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,   617,    -1,
     619,   620,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,   357,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,   386,    -1,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,    -1,   440,
     441,   442,    -1,    -1,   445,    -1,   447,    -1,   449,   450,
      -1,   452,   453,   454,    -1,   456,    -1,    -1,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,    -1,
     471,   472,    -1,    -1,    -1,   476,   477,   478,   479,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,   568,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,   579,   580,
      -1,    -1,   583,    -1,    -1,   586,    -1,   588,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,   620,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,   357,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,   372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,   386,    -1,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
     403,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,   438,    -1,   440,   441,   442,
      -1,    -1,   445,    -1,   447,    -1,   449,   450,    -1,   452,
     453,   454,    -1,   456,    -1,    -1,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,    -1,   471,   472,
      -1,    -1,    -1,   476,   477,   478,   479,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,   550,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,   579,   580,    -1,    -1,
     583,    -1,    -1,   586,    -1,   588,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,   617,    -1,   619,   620,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,   357,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,   386,    -1,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,   403,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,   438,    -1,   440,   441,   442,    -1,    -1,
     445,    -1,   447,    -1,   449,   450,    -1,   452,   453,   454,
      -1,   456,    -1,    -1,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,    -1,   471,   472,    -1,    -1,
      -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,   568,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,   579,   580,    -1,    -1,   583,    -1,
      -1,   586,    -1,   588,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,   617,    -1,   619,   620,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
     357,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,   372,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,
      -1,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,   403,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,   438,    -1,   440,   441,   442,    -1,    -1,   445,    -1,
     447,    -1,   449,   450,    -1,   452,   453,   454,    -1,   456,
      -1,    -1,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,    -1,   471,   472,    -1,    -1,    -1,   476,
     477,   478,   479,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,   579,   580,    -1,    -1,   583,    -1,    -1,   586,
      -1,   588,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
     617,    -1,   619,   620,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,   146,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,    -1,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
     219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,    -1,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,    -1,    -1,    -1,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,    -1,    -1,    -1,   583,    -1,    -1,   586,    -1,    -1,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,   612,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
     141,   142,   143,    -1,   145,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,    -1,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,    -1,    -1,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
      -1,    -1,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,    -1,    -1,   440,
      -1,   442,   443,    -1,   445,    -1,    -1,    -1,   449,    -1,
      -1,   452,   453,   454,   455,   456,    -1,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,    -1,    -1,    -1,    -1,   476,   477,   478,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,    -1,   490,
      -1,   492,    -1,   494,    -1,    -1,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,    -1,   519,   520,
     521,   522,    -1,    -1,    -1,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,    -1,
      -1,    -1,   583,    -1,    -1,   586,    -1,    -1,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,   610,
      -1,   612,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,    -1,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,    -1,    -1,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,    -1,    -1,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,    -1,    -1,   440,    -1,   442,
     443,    -1,   445,    -1,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,    -1,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,    -1,
      -1,    -1,    -1,   476,   477,   478,    -1,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,    -1,   490,    -1,   492,
      -1,   494,    -1,    -1,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,    -1,   519,   520,   521,   522,
      -1,    -1,    -1,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,    -1,    -1,    -1,
     583,    -1,    -1,   586,    -1,    -1,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,   610,    -1,   612,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
      -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,    -1,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,   386,    -1,    -1,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,
     445,    -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,
     455,   456,    -1,    -1,    -1,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,
      -1,   476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,
      -1,    -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,    -1,   519,   520,   521,   522,    -1,    -1,
      -1,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,    -1,    -1,    -1,   583,    -1,
      -1,   586,    -1,    -1,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,   612,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,    -1,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
      -1,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,
      -1,    -1,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,    -1,
      -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,   456,
      -1,    -1,    -1,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,   476,
     477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,    -1,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,    -1,   519,   520,   521,   522,    -1,    -1,    -1,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,    -1,    -1,    -1,   583,    -1,    -1,   586,
      -1,    -1,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,   612,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,    -1,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
     219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,    -1,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,   443,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,    -1,    -1,    -1,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,    -1,    -1,    -1,   583,    -1,    -1,   586,    -1,    -1,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,   612,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,   621,    -1,     5,   624,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,    -1,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,    -1,    -1,    -1,   227,    -1,    -1,   230,
      -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   240,
      -1,    -1,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
     331,    -1,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,    -1,    -1,   346,   347,    -1,    -1,   350,
     351,   352,   353,    -1,    -1,    -1,    -1,   358,    -1,    -1,
      -1,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   386,    -1,    -1,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
      -1,    -1,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,   417,    -1,    -1,   420,
      -1,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
     431,   432,   433,   434,   435,    -1,   437,    -1,    -1,   440,
      -1,   442,   443,    -1,   445,    -1,    -1,    -1,   449,    -1,
      -1,   452,   453,   454,   455,   456,    -1,    -1,    -1,   460,
     461,   462,   463,   464,   465,   466,    -1,   468,   469,    -1,
     471,    -1,    -1,    -1,    -1,   476,   477,   478,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,   487,    -1,    -1,   490,
      -1,   492,    -1,   494,    -1,    -1,   497,   498,    -1,    -1,
      -1,    -1,    -1,   504,   505,   506,    -1,   508,   509,    -1,
     511,    -1,    -1,   514,    -1,    -1,   517,    -1,   519,   520,
     521,   522,    -1,    -1,    -1,   526,    -1,   528,   529,   530,
     531,   532,   533,    -1,    -1,   536,   537,   538,   539,    -1,
     541,   542,    -1,    -1,   545,   546,   547,   548,    -1,    -1,
     551,   552,    -1,   554,   555,   556,   557,    -1,    -1,    -1,
      -1,    -1,   563,   564,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,    -1,
      -1,    -1,   583,    -1,    -1,   586,    -1,    -1,    -1,   590,
     591,    -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,
     601,    -1,    -1,    -1,   605,   606,   607,   608,   609,    -1,
      -1,   612,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
     621,    -1,     5,   624,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,    -1,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,    -1,    -1,    -1,   227,    -1,    -1,   230,    -1,    -1,
      -1,    -1,   235,    -1,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,
      -1,    -1,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,    -1,    -1,   328,   329,    -1,   331,    -1,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,    -1,    -1,   346,   347,    -1,    -1,   350,   351,   352,
     353,    -1,    -1,    -1,    -1,   358,    -1,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,   386,    -1,    -1,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,    -1,    -1,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,    -1,    -1,   420,    -1,    -1,
      -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
     433,   434,   435,    -1,   437,    -1,    -1,   440,    -1,   442,
     443,    -1,   445,    -1,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,    -1,    -1,    -1,   460,   461,   462,
     463,   464,   465,   466,    -1,   468,   469,    -1,   471,    -1,
      -1,    -1,    -1,   476,   477,   478,    -1,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   487,    -1,    -1,   490,    -1,   492,
      -1,   494,    -1,    -1,   497,   498,    -1,    -1,    -1,    -1,
      -1,   504,   505,   506,    -1,   508,   509,    -1,   511,    -1,
      -1,   514,    -1,    -1,   517,    -1,   519,   520,   521,   522,
      -1,    -1,    -1,   526,    -1,   528,   529,   530,   531,   532,
     533,    -1,    -1,   536,   537,   538,   539,    -1,   541,   542,
      -1,    -1,   545,   546,   547,   548,    -1,    -1,   551,   552,
      -1,   554,   555,   556,   557,    -1,    -1,    -1,    -1,    -1,
     563,   564,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,    -1,    -1,    -1,
     583,    -1,    -1,   586,    -1,    -1,    -1,   590,   591,    -1,
      -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,   601,    -1,
      -1,    -1,   605,   606,   607,   608,   609,    -1,    -1,   612,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,   621,    -1,
       5,   624,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
      -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,    -1,
      -1,    -1,   227,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,   244,
     245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,   331,    -1,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
      -1,   346,   347,    -1,    -1,   350,   351,   352,   353,    -1,
      -1,    -1,    -1,   358,    -1,    -1,    -1,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,   386,    -1,    -1,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,    -1,    -1,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,   417,    -1,    -1,   420,    -1,    -1,    -1,   424,
     425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
     435,    -1,   437,    -1,    -1,   440,    -1,   442,   443,    -1,
     445,    -1,    -1,    -1,   449,    -1,    -1,   452,   453,   454,
     455,   456,    -1,    -1,    -1,   460,   461,   462,   463,   464,
     465,   466,    -1,   468,   469,    -1,   471,    -1,    -1,    -1,
      -1,   476,   477,   478,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,    -1,    -1,   490,    -1,   492,    -1,   494,
      -1,    -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,
     505,   506,    -1,   508,   509,    -1,   511,    -1,    -1,   514,
      -1,    -1,   517,    -1,   519,   520,   521,   522,    -1,    -1,
      -1,   526,    -1,   528,   529,   530,   531,   532,   533,    -1,
      -1,   536,   537,   538,   539,    -1,   541,   542,    -1,    -1,
     545,   546,   547,   548,    -1,    -1,   551,   552,    -1,   554,
     555,   556,   557,    -1,    -1,    -1,    -1,    -1,   563,   564,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,    -1,    -1,    -1,   583,    -1,
      -1,   586,    -1,    -1,    -1,   590,   591,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,   601,    -1,    -1,    -1,
     605,   606,   607,   608,   609,    -1,    -1,   612,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,   621,    -1,     5,   624,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,    -1,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,
     227,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,   244,   245,    -1,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,   331,    -1,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,    -1,    -1,   346,
     347,    -1,    -1,   350,   351,   352,   353,    -1,    -1,    -1,
      -1,   358,    -1,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,   386,
      -1,    -1,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,    -1,    -1,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,    -1,    -1,   420,    -1,    -1,    -1,   424,   425,   426,
     427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
     437,    -1,    -1,   440,    -1,   442,   443,    -1,   445,    -1,
      -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,   456,
      -1,    -1,    -1,   460,   461,   462,   463,   464,   465,   466,
      -1,   468,   469,    -1,   471,    -1,    -1,    -1,    -1,   476,
     477,   478,    -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,
     487,    -1,    -1,   490,    -1,   492,    -1,   494,    -1,    -1,
     497,   498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,
      -1,   508,   509,    -1,   511,    -1,    -1,   514,    -1,    -1,
     517,    -1,   519,   520,   521,   522,    -1,    -1,    -1,   526,
      -1,   528,   529,   530,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,    -1,   541,   542,    -1,    -1,   545,   546,
     547,   548,    -1,    -1,   551,   552,    -1,   554,   555,   556,
     557,    -1,    -1,    -1,    -1,    -1,   563,   564,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,    -1,    -1,    -1,   583,    -1,    -1,   586,
      -1,    -1,    -1,   590,   591,    -1,    -1,    -1,    -1,    -1,
      -1,   598,    -1,    -1,   601,    -1,    -1,    -1,   605,   606,
     607,   608,   609,    -1,    -1,   612,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,   621,    -1,     5,   624,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    -1,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,    -1,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,    -1,
      -1,   230,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,    -1,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,   331,    -1,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,    -1,    -1,   346,   347,    -1,
      -1,   350,   351,   352,   353,    -1,    -1,    -1,    -1,   358,
      -1,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   386,    -1,    -1,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,    -1,    -1,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,    -1,
      -1,   420,    -1,    -1,    -1,   424,   425,   426,   427,   428,
      -1,    -1,   431,   432,   433,   434,   435,    -1,   437,    -1,
      -1,   440,    -1,   442,    -1,    -1,   445,    -1,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,    -1,   456,    -1,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,    -1,   468,
     469,    -1,   471,    -1,    -1,    -1,    -1,   476,   477,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   487,    -1,
      -1,   490,    -1,   492,    -1,   494,    -1,    -1,   497,   498,
      -1,    -1,    -1,    -1,    -1,   504,   505,   506,    -1,   508,
     509,    -1,   511,    -1,    -1,   514,    -1,    -1,   517,    -1,
     519,   520,   521,   522,    -1,    -1,    -1,   526,    -1,   528,
     529,   530,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,    -1,   541,   542,    -1,    -1,   545,   546,   547,   548,
      -1,    -1,   551,   552,    -1,   554,   555,   556,   557,    -1,
      -1,    -1,    -1,    -1,   563,   564,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,    -1,    -1,    -1,   583,    -1,    -1,   586,    -1,    -1,
      -1,   590,   591,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,   601,    -1,    -1,    -1,   605,   606,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,   621,    -1,    -1,   624
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    30,    34,    48,    49,    56,    60,    61,
      76,    94,   116,   125,   126,   127,   138,   139,   151,   165,
     183,   198,   200,   205,   208,   224,   225,   226,   234,   236,
     254,   271,   275,   371,   390,   403,   414,   436,   439,   441,
     444,   447,   448,   457,   459,   467,   473,   481,   486,   488,
     518,   568,   580,   584,   587,   592,   620,   635,   646,   649,
     650,   651,   652,   653,   655,   660,   662,   663,   694,   721,
     728,   729,   848,  1007,  1049,  1053,  1056,  1061,  1063,  1064,
    1069,  1072,  1077,  1084,  1096,  1097,  1253,  1255,  1270,  1273,
    1299,  1307,  1318,  1325,  1339,  1343,  1345,  1355,  1361,  1365,
    1367,  1368,  1419,  1448,  1454,  1456,  1463,  1465,  1494,  1497,
    1498,  1504,  1505,  1506,  1507,  1508,  1565,  1573,  1574,    11,
     103,   122,   192,   221,   276,   408,   479,   542,   590,  1045,
    1530,  1531,  1532,  1535,   272,   359,  1071,  1499,   550,  1410,
     228,     5,     7,     8,     9,    10,    11,    14,    18,    21,
      23,    24,    25,    26,    27,    28,    30,    34,    38,    41,
      42,    43,    45,    47,    48,    51,    54,    55,    57,    58,
      60,    62,    63,    64,    65,    66,    67,    69,    70,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    82,    83,
      85,    86,    87,    88,    89,    93,    96,    98,   101,   105,
     106,   107,   110,   115,   116,   121,   122,   124,   128,   130,
     131,   132,   133,   134,   138,   141,   142,   143,   147,   149,
     150,   152,   153,   154,   157,   158,   160,   161,   162,   163,
     164,   165,   168,   169,   170,   171,   172,   175,   176,   178,
     179,   180,   183,   187,   188,   190,   192,   194,   195,   196,
     197,   199,   201,   205,   206,   208,   211,   212,   216,   217,
     218,   219,   222,   223,   227,   230,   235,   236,   240,   244,
     245,   247,   248,   252,   255,   256,   259,   262,   263,   269,
     270,   272,   274,   276,   277,   285,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   305,   306,   307,   309,   310,   311,   312,
     314,   315,   320,   321,   322,   323,   324,   325,   328,   329,
     331,   333,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   346,   347,   350,   351,   352,   353,   357,   358,   362,
     364,   365,   366,   368,   369,   370,   372,   384,   385,   386,
     388,   389,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   403,   404,   405,   407,   409,   410,   411,   412,
     413,   415,   416,   417,   420,   424,   425,   426,   427,   428,
     431,   432,   433,   434,   435,   437,   438,   440,   441,   442,
     445,   447,   449,   450,   452,   453,   454,   456,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   471,
     472,   476,   477,   478,   479,   483,   487,   489,   490,   491,
     492,   494,   495,   496,   497,   498,   504,   505,   506,   508,
     509,   511,   514,   517,   518,   519,   520,   521,   522,   525,
     526,   528,   529,   530,   531,   532,   533,   536,   537,   538,
     539,   541,   542,   545,   546,   547,   548,   551,   552,   554,
     555,   556,   557,   563,   564,   568,   569,   570,   571,   573,
     574,   576,   577,   579,   580,   583,   586,   588,   590,   591,
     598,   601,   605,   606,   607,   608,   609,   616,   617,   619,
     620,   621,   624,   688,  1409,  1413,  1417,  1418,   305,   541,
     544,  1450,  1450,   616,  1500,   103,   191,   276,   479,   542,
     547,   582,   590,   670,   671,   899,   900,   901,   989,   990,
    1308,  1254,   103,   162,   192,   228,   276,   408,   479,   542,
     547,   565,   590,   605,  1266,  1413,  1071,    98,   730,   687,
     643,  1406,  1408,  1413,   661,   481,  1343,  1495,  1271,   396,
      82,   416,  1366,   106,   228,   621,  1373,  1450,  1071,   849,
    1413,  1362,   467,   590,  1450,  1071,  1274,  1356,   502,   718,
     722,   723,  1413,   687,  1500,  1413,  1100,  1102,  1103,   373,
    1421,  1326,   722,   563,   544,  1320,   396,  1455,  1300,  1413,
      30,    76,   149,   403,   425,   459,   518,  1567,   473,   635,
    1098,     0,   151,   647,   403,  1341,  1406,  1413,   155,  1019,
    1413,   155,   688,   202,   688,   264,  1410,  1413,  1415,   796,
     797,   800,   823,  1413,   687,   544,   162,  1013,  1530,  1450,
    1500,  1078,   695,   643,   561,  1054,  1065,    17,  1501,   220,
     902,   202,  1415,   798,   823,   687,   378,  1527,  1531,  1532,
    1533,  1534,  1535,   544,   900,   228,   228,   221,   283,   417,
    1316,  1317,     7,    21,    27,    33,    35,    36,    37,    39,
      52,    53,    58,    59,    66,    69,    91,    92,    97,    99,
     102,   103,   108,   109,   110,   115,   117,   120,   166,   173,
     174,   181,   187,   197,   203,   209,   216,   220,   234,   237,
     261,   280,   308,   313,   324,   328,   330,   334,   335,   345,
     354,   355,   356,   360,   361,   366,   387,   393,   401,   415,
     443,   444,   456,   458,   464,   465,   471,   523,   524,   530,
     534,   535,   540,   550,   554,   555,   556,   557,   566,   567,
     568,   572,   575,   590,   594,   595,   596,   597,   602,   604,
     608,   609,   624,   628,   629,   634,   635,   638,   639,   642,
     643,   950,  1118,  1119,  1120,  1121,  1125,  1128,  1129,  1130,
    1131,  1132,  1140,  1144,  1154,  1392,  1394,  1396,  1397,  1398,
    1402,  1404,  1409,  1413,   220,  1265,  1265,  1265,  1413,   202,
    1265,  1265,   823,  1265,   687,  1265,  1450,   656,  1346,   130,
      12,    13,    94,   125,   139,   162,   165,   178,   200,   228,
     234,   275,   409,   413,   429,   437,   445,   473,   486,   487,
     536,   565,   587,   589,  1466,  1468,  1470,  1471,  1413,   370,
      65,   421,   643,  1415,  1496,  1406,   198,   486,   525,  1493,
     123,   210,   283,  1276,  1413,  1118,   238,  1369,  1449,  1450,
      46,   850,   189,    33,   305,  1331,  1363,  1413,   687,  1073,
    1450,   123,   283,  1277,  1306,   305,   416,   491,  1357,  1358,
     598,   719,   481,   724,    12,   413,  1464,  1468,   561,  1501,
    1101,    12,   135,   210,   507,   508,   509,   510,   511,   512,
     527,  1107,  1108,  1109,  1526,  1420,    34,    58,    59,    69,
      92,    94,   104,   153,   158,   161,   190,   192,   199,   201,
     227,   228,   251,   272,   305,   370,   397,   407,   408,   411,
     412,   432,   478,   491,   526,   544,   607,   952,   988,  1327,
    1331,  1332,  1334,  1435,   724,   421,   613,  1050,  1051,  1052,
    1319,  1413,  1450,  1306,    35,   209,   550,  1393,  1411,  1566,
    1566,  1566,  1566,  1566,  1102,  1098,   636,   641,  1413,  1096,
    1270,  1273,  1299,  1307,  1342,  1340,   322,   548,   574,  1009,
     588,    99,  1415,  1416,  1011,   802,   824,  1413,  1010,   372,
       6,    56,   139,   355,   420,   422,   825,  1015,  1416,  1406,
     688,   513,  1536,  1537,  1012,  1062,  1079,  1080,  1081,  1082,
    1406,   635,   696,  1413,  1260,  1261,  1406,  1260,    55,   357,
     357,   436,  1502,   354,   355,  1124,  1413,   801,   824,   185,
       6,  1416,  1481,  1482,   444,    10,   408,   565,   674,  1113,
    1529,  1537,  1549,  1553,  1554,  1560,   674,  1113,  1528,  1537,
    1549,  1554,  1560,  1530,  1535,   902,  1413,  1413,   189,  1309,
    1313,  1314,  1413,  1316,   635,   635,   635,  1128,   635,   635,
     635,  1118,  1157,   635,   635,   635,   635,   635,   635,   635,
     635,  1116,  1116,   635,   939,   635,   635,   635,   550,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,  1118,   635,   635,  1155,  1156,  1402,  1413,   635,   635,
     635,   635,   635,   635,  1118,   939,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   939,   550,   635,   635,   635,   550,   635,   635,
     635,    35,   209,   550,   635,  1116,   939,   939,   635,   635,
     635,   635,   635,   635,  1128,  1128,  1128,  1118,  1521,  1522,
    1413,  1145,  1413,    16,    17,   375,   378,   622,  1122,  1123,
     155,   156,   193,   204,   246,   257,   284,   348,  1126,    31,
     136,   241,   265,   334,   430,   484,   485,   497,   626,   627,
     628,   629,   630,   631,   632,   633,  1124,  1128,    68,   377,
     637,  1411,   635,   643,   166,  1413,   688,  1413,   367,   824,
     688,  1415,   358,   606,   834,   835,  1267,  1268,  1269,  1332,
     688,  1416,  1480,  1259,  1265,   593,   657,    33,   128,   153,
     157,   194,   212,   277,   407,   416,   431,   449,   492,   522,
    1347,  1352,  1353,  1450,    81,   642,   731,   732,   733,   734,
    1413,   407,  1469,   461,   461,   542,   547,   590,   605,   373,
    1473,   541,   367,  1475,    64,   491,  1472,   104,   605,  1474,
     367,   637,    19,   155,  1209,  1210,  1457,  1413,    58,   120,
     199,   272,   341,   393,   478,   642,   952,  1413,  1432,  1434,
    1438,  1440,   379,   380,   601,  1334,  1492,  1327,    13,  1045,
     496,    48,    80,   283,  1375,  1406,  1451,  1452,  1070,   267,
     270,   418,   851,   853,   642,   654,  1410,   277,  1074,  1416,
    1075,  1076,  1406,  1057,   238,  1262,  1278,  1279,  1406,    48,
    1359,   637,  1411,    54,    63,    73,    85,    86,    87,   101,
     323,   340,   469,   529,   546,   725,   727,  1469,   367,   367,
     467,  1503,  1502,   581,  1509,  1510,   630,  1111,  1112,  1113,
    1109,   563,  1422,  1434,  1438,   161,   481,   265,   611,  1338,
     635,   103,   162,   192,   408,   544,   565,   605,  1338,    12,
     911,  1415,   266,  1228,  1230,   189,   241,  1333,  1335,    67,
     522,   186,   522,   541,    67,   522,    12,    41,    89,    93,
     245,   321,   386,   498,   538,  1321,  1322,  1323,   161,   212,
     522,   522,  1228,  1338,  1335,   277,   152,    70,   410,   541,
     564,   522,   601,   369,   618,    83,   637,  1261,  1045,   637,
     368,  1569,   537,  1570,   250,   452,  1568,   636,  1510,  1512,
    1514,  1515,   151,   648,  1344,  1393,  1413,   120,   897,   898,
     908,   909,   961,   106,  1116,   642,   689,     6,   803,   689,
     635,   105,   820,   820,   820,     4,   637,   393,  1008,  1014,
     472,   605,  1537,  1260,   241,   637,   390,  1090,  1092,  1093,
     697,   698,  1118,   171,   417,   637,  1055,    57,   171,   175,
     186,   320,   417,  1066,  1067,  1068,    55,   436,   166,   669,
     803,   106,   820,   218,   637,  1113,  1113,  1113,   162,   192,
     192,  1537,  1406,   991,   992,   991,  1263,  1264,  1406,  1407,
    1413,   637,  1311,   643,  1315,  1118,  1118,    12,   135,  1150,
    1211,  1150,  1150,  1150,   610,  1159,  1118,  1118,  1154,  1154,
    1118,  1118,   135,  1150,  1211,   636,   361,   636,   636,  1118,
    1118,  1118,  1118,  1402,  1521,   111,   112,   113,   114,   115,
     213,   214,   215,   216,   324,   326,   327,   328,   335,   415,
     470,   471,   608,   623,   624,  1206,  1207,  1118,   107,   110,
     554,   557,  1208,   135,  1147,  1118,  1118,  1118,  1118,  1206,
    1118,  1156,     9,   637,   643,   135,  1150,  1118,  1118,   135,
    1150,  1118,  1118,  1118,  1118,  1121,  1118,  1118,  1118,  1118,
    1118,  1118,   636,  1118,  1150,  1150,  1118,  1118,   135,  1150,
    1118,  1207,  1207,  1118,    44,   258,   562,  1118,  1118,   636,
    1403,  1404,  1413,  1150,  1150,  1118,  1118,  1118,   636,   637,
     636,   473,   635,  1518,  1519,  1118,   642,  1146,  1415,   643,
    1118,  1118,  1118,  1120,   174,   360,   567,   583,  1124,    12,
      18,  1120,  1127,  1121,  1121,   635,  1128,  1121,  1121,  1121,
    1121,   265,  1121,  1121,   237,  1121,   237,  1121,  1121,  1121,
    1121,  1121,    31,   241,   265,   430,  1415,  1128,  1118,  1133,
    1413,   643,  1406,  1267,   637,  1269,   153,   637,  1260,  1256,
     642,   658,   659,   277,   277,   277,   277,    48,   277,   277,
     637,  1348,   110,   554,   557,   726,   736,  1144,  1396,  1402,
    1415,   637,   155,   541,   635,  1483,  1416,  1483,  1483,  1483,
     192,   408,   544,  1467,  1471,  1413,   179,   351,  1413,  1458,
    1459,   643,    33,   120,   155,   482,   953,   954,  1289,  1415,
     186,  1289,   642,  1415,    33,   120,   956,   957,  1415,   643,
    1433,  1289,  1410,   410,  1410,  1491,   410,  1410,  1278,  1410,
    1085,   272,  1374,  1210,   637,  1260,    70,   635,   857,   858,
     857,   858,   391,   860,   206,   253,  1415,    29,   561,  1364,
     637,   561,   637,   561,  1260,  1279,  1275,   390,  1173,  1174,
      12,  1360,  1358,   637,   155,   637,  1416,   192,   408,  1467,
    1413,    12,   135,  1517,   637,  1104,  1118,  1400,  1413,  1424,
    1425,  1423,   241,  1336,  1410,  1118,   630,   902,   688,   688,
     688,  1406,   688,  1406,   277,   339,   522,  1330,  1330,   280,
     361,   572,  1231,  1232,  1394,  1413,  1338,  1413,   688,  1338,
    1416,  1333,   688,  1338,   244,   539,   176,   186,  1324,   637,
    1336,  1333,  1406,  1335,  1333,  1333,  1338,  1338,   494,  1052,
     473,   635,   639,  1160,  1161,  1162,  1163,  1164,  1175,  1176,
    1190,  1393,   394,  1571,   376,  1224,  1230,  1516,   898,    68,
     952,   131,  1415,    74,    88,   255,   332,   357,   419,   513,
     691,   693,   426,   576,   821,   822,   230,   817,   818,   819,
     826,   834,   835,   103,   211,   384,   393,   400,   495,   590,
     672,   673,  1410,    24,   312,   811,   812,   813,   826,   827,
     828,   834,   835,   804,   805,   811,  1416,   169,     6,    11,
      13,    15,    25,    26,    56,    60,    61,    66,    74,    82,
      91,   106,   124,   132,   133,   139,   147,   153,   164,   184,
     223,   228,   235,   252,   275,   311,   329,   333,   371,   376,
     385,   390,   393,   424,   438,   439,   440,   441,   463,   519,
     520,   521,   526,   542,   545,   568,   581,   845,   904,   906,
     908,   909,  1020,  1024,  1026,  1029,  1035,  1036,  1037,  1042,
    1043,  1220,   367,   682,  1016,   122,   240,  1406,  1083,  1413,
    1081,  1406,   847,  1092,   228,   253,   986,  1094,   636,   637,
    1261,   588,  1067,   896,   897,    74,   352,   427,   577,   814,
     815,   816,   826,   830,   831,   832,   833,   834,   835,   617,
     592,   799,    46,   613,  1482,   192,   688,   688,   902,   688,
    1413,   664,   570,   593,   997,   367,   367,   637,  1312,  1173,
     643,  1315,  1314,   189,   630,  1413,   637,   636,  1150,   636,
    1151,   636,   636,   636,  1118,   145,   610,  1158,    19,   636,
     593,   636,   636,   636,   593,   637,  1141,   636,   630,   636,
     637,   637,   636,   636,   636,   636,   189,   637,   637,  1143,
     636,   637,   637,   637,   629,   637,   636,   635,  1402,  1413,
    1150,   636,   636,   636,  1150,   636,   637,   636,   636,   636,
     241,   636,   637,   637,   636,   637,   637,   636,   636,   636,
     637,   189,   637,  1150,   636,   636,   637,   637,   637,   636,
     189,  1118,   189,  1118,   189,  1118,   189,   636,   637,   636,
     636,   636,   636,   637,    19,   263,   637,   976,   636,  1154,
    1180,  1181,  1182,   473,   635,  1099,  1513,  1514,   581,  1523,
     640,   199,   272,   478,  1436,   482,  1413,   174,   360,   567,
     583,   635,    17,  1118,  1521,   160,  1216,  1121,  1118,  1118,
    1121,   635,  1128,  1121,  1113,  1137,  1138,  1139,   635,   643,
    1413,  1257,  1269,  1289,  1290,  1416,    50,   451,  1046,  1260,
    1415,   637,  1353,  1260,  1354,   734,   737,   738,   733,   362,
     465,   735,  1413,  1484,  1485,   561,   630,  1406,  1413,  1479,
    1479,  1479,   155,   179,   193,   204,   256,   257,   284,   351,
     405,  1460,  1462,   611,  1212,  1413,    68,   959,  1118,  1416,
     366,   393,   550,  1446,  1436,  1289,  1413,  1437,  1440,  1439,
    1272,  1086,  1087,  1088,  1089,  1406,   229,   283,   421,   618,
    1453,  1452,   635,  1113,   117,   181,   209,   280,   361,   572,
    1235,  1238,  1239,   533,   861,   852,   635,  1118,  1410,  1416,
    1416,  1076,  1406,   171,   417,   591,  1058,  1059,  1060,   473,
     481,   597,   598,   635,   892,  1280,  1283,   635,   727,   726,
     200,   189,  1479,  1479,  1479,  1511,  1112,   189,   238,  1105,
    1106,  1223,  1224,  1248,  1114,  1114,   643,   247,   421,  1441,
    1442,  1443,  1444,   563,  1426,  1437,   637,  1428,  1410,   189,
    1337,   636,  1413,   365,   637,  1338,   416,  1228,  1323,  1337,
    1338,  1333,  1406,  1338,  1338,  1189,  1413,    95,   231,   250,
     261,   344,   458,   527,  1172,   481,   637,  1406,  1189,   637,
     186,  1572,    46,  1228,  1290,  1290,   342,  1410,   513,   513,
     513,   513,   513,   472,  1410,  1410,  1290,   637,   819,  1410,
    1410,  1410,  1410,   117,   181,   209,   280,   361,   572,  1234,
    1410,  1410,   636,   637,  1290,  1290,   637,   813,   806,   807,
     826,   827,   828,   393,    71,    84,   390,   920,   923,   924,
     984,   986,   990,  1044,  1290,  1044,   390,  1290,  1290,  1044,
    1290,   390,   390,  1290,  1290,   561,   131,  1290,   251,   542,
     185,   390,   406,   986,  1044,   251,  1290,   390,   542,   131,
    1290,  1290,  1290,  1290,  1290,  1044,   390,    46,  1290,   847,
    1290,   390,   392,    19,   155,   561,  1048,   390,   390,  1290,
    1290,  1290,  1290,   134,   321,  1413,  1290,   390,  1290,   904,
     637,   844,   845,  1024,   635,   643,   919,   925,  1405,  1413,
      78,   468,   439,  1017,  1538,  1091,   635,  1118,  1290,  1290,
    1290,  1290,   637,   816,  1415,   276,   172,   808,   809,   810,
     826,   827,   828,   829,   832,   833,   834,   835,   393,   550,
    1415,  1413,  1561,     8,    29,   794,   688,   635,   454,   265,
     635,   837,   903,   905,   906,    45,   206,   466,  1001,  1001,
    1406,  1406,  1264,  1413,   593,  1310,  1413,  1161,   643,  1315,
     237,  1118,   636,  1118,   553,  1118,  1118,   149,    33,    59,
     107,   110,   118,   346,   489,   557,   585,  1152,   953,   953,
    1152,  1154,   636,   237,   237,  1118,  1118,  1118,  1154,  1118,
    1118,  1118,  1118,  1118,  1121,   636,   636,  1118,  1118,  1118,
    1118,  1118,  1154,   237,  1118,  1118,  1118,   636,  1118,  1118,
    1118,  1118,   189,  1118,   189,  1118,   189,  1118,  1118,  1118,
      33,    59,   971,   972,   973,   974,   975,  1235,  1234,   636,
     636,  1524,  1525,  1526,  1181,  1099,   636,  1517,   643,   643,
     643,  1415,  1118,  1521,  1120,   636,   637,   636,  1128,  1206,
    1206,    17,  1118,  1521,  1216,  1118,   636,   637,  1153,  1154,
    1413,  1258,   910,  1415,  1046,   659,  1349,   155,   637,   636,
     637,  1481,   643,   643,   561,   561,   561,  1461,  1213,  1229,
    1230,   120,   958,   960,  1415,  1289,   635,   635,  1440,  1118,
    1289,    12,    33,   120,   367,  1118,  1447,  1280,   637,  1090,
    1092,   550,  1412,   618,   272,   854,   855,   856,  1413,   866,
    1121,    46,   635,   868,   858,   854,   561,  1059,   893,  1281,
     635,  1286,  1291,  1286,   636,   892,  1282,  1399,  1400,  1403,
    1413,  1284,  1205,  1413,   155,   373,  1481,   189,   189,   189,
    1097,   140,  1161,  1249,   186,   275,  1110,  1248,  1229,  1106,
      19,  1115,  1410,  1413,   630,  1413,   263,   369,   618,   637,
     637,  1441,  1427,  1429,  1430,   117,   181,   280,   361,   572,
    1236,  1328,   158,   607,  1232,  1232,   361,  1329,  1212,  1333,
    1177,  1184,  1189,  1160,   250,   250,   381,  1191,   250,   261,
     458,  1191,  1175,  1160,  1302,  1303,  1403,  1162,  1173,  1186,
    1187,  1234,   325,  1225,   960,   954,   106,   106,   122,   240,
     217,   836,  1235,   819,   673,   836,   836,   813,   637,   807,
     169,  1004,  1405,  1071,    61,   185,   406,   582,   922,   985,
    1004,   986,   987,   120,  1413,  1405,  1071,  1236,  1234,  1405,
    1234,    12,  1025,  1033,  1034,  1413,  1071,  1410,  1410,   952,
    1290,  1234,   253,  1033,   253,  1405,  1405,   910,  1034,  1290,
     179,   256,   357,   913,  1234,   120,  1413,  1236,  1236,  1405,
    1071,  1221,  1222,  1403,   120,  1234,   846,  1410,  1071,   847,
    1406,  1071,  1071,    77,    79,   120,   143,   180,   428,   912,
     120,  1234,   120,  1234,   120,  1234,  1234,  1025,   907,     6,
     139,  1037,   916,   917,   918,   919,   920,  1413,     8,   179,
    1047,   429,   921,   922,   978,   926,   643,   355,   404,    23,
     163,   676,   561,   132,   147,   678,   635,  1539,   635,   406,
    1202,  1203,  1204,  1413,  1410,  1235,   836,   836,   816,   372,
     202,  1290,   637,   810,   550,    19,   454,   635,   125,   234,
     587,   795,   675,  1555,   118,   239,   423,   528,   915,  1406,
     265,   838,   843,   844,   916,   843,   637,   905,   665,   667,
     643,  1161,  1212,  1315,  1212,  1118,   636,  1118,   553,   635,
     943,   944,   944,   635,   938,   635,   936,   937,   943,   944,
     239,   938,   239,   636,   636,   636,   636,  1142,  1118,  1118,
     636,   636,   637,   636,  1149,  1224,   637,   637,   636,   637,
     636,   241,  1134,  1135,   636,   636,   636,   637,   636,   636,
    1118,   636,   186,   636,   636,   637,   636,   637,   637,   636,
    1118,   636,  1118,   636,  1118,   636,   636,   636,   635,   966,
     966,    20,   126,   456,   628,   968,   969,   970,   637,   637,
    1111,  1526,   636,  1520,   643,  1005,   636,  1154,  1120,   636,
     637,   636,  1114,  1139,   636,  1041,  1042,  1043,   186,   613,
    1350,    54,    63,    73,    85,    86,    87,   101,   323,   340,
     453,   469,   529,   546,   739,   738,  1485,   613,  1488,   630,
     630,  1481,  1481,  1481,   635,  1118,  1446,   550,   550,  1289,
    1447,   367,  1297,  1088,  1406,  1092,   221,  1095,  1370,   636,
     637,  1114,   853,   390,   869,   870,   636,  1416,  1107,  1287,
    1288,  1403,  1292,   637,   635,  1283,   636,   636,   637,   643,
    1509,   636,   637,   726,   189,  1481,  1481,  1481,  1212,  1212,
     141,   382,  1244,  1245,  1250,   587,   241,  1410,  1413,   643,
     421,   442,   476,  1445,  1443,  1442,  1428,   637,  1432,  1228,
    1228,  1338,   581,   636,  1513,  1185,   640,   250,  1175,  1191,
    1191,   250,   367,   367,   593,   637,  1301,  1289,  1210,  1107,
    1118,  1226,  1401,   807,  1027,   635,   253,   253,   987,  1004,
     992,  1004,   139,   481,  1025,  1038,  1022,   637,  1235,   954,
    1410,  1405,  1046,   613,  1410,  1039,  1025,   637,    20,   126,
    1227,   850,  1025,  1030,  1025,   635,   636,   637,  1413,  1406,
      32,    33,    38,    40,    42,    43,    59,   107,   110,   118,
     137,   154,   180,   182,   239,   278,   279,   281,   317,   318,
     319,   343,   346,   363,   364,   423,   477,   481,   493,   551,
     554,   557,   558,   559,   560,   599,   600,   624,   927,   930,
     931,   932,   933,   934,   935,  1413,   404,  1118,  1118,   367,
     682,   688,   367,    74,   683,  1413,  1540,    19,  1025,   636,
     637,   635,  1413,   836,   810,  1410,   915,  1562,   367,   367,
     699,   700,   702,  1413,   496,  1406,   892,   636,   221,   444,
     840,  1376,   905,   635,   635,  1413,  1212,  1223,  1206,  1118,
     117,   280,   361,   572,    21,    33,    47,   579,   952,   962,
     963,   964,   361,   361,   636,  1206,  1206,  1118,   475,  1148,
    1118,  1118,  1154,    42,   344,   636,   613,  1136,  1118,  1206,
    1118,  1118,  1118,  1118,   636,   636,   636,  1235,   636,   976,
     971,   969,   971,   972,  1234,  1183,  1518,  1413,   636,  1154,
    1115,  1043,  1042,  1351,   421,   200,   446,  1486,  1486,  1486,
     120,  1118,  1294,  1295,   636,   636,  1447,   142,  1095,   259,
    1376,   856,   636,   206,   253,   871,   636,   637,  1111,   637,
    1289,  1293,  1294,  1291,  1285,  1283,  1399,  1413,   847,  1413,
    1481,  1229,   202,  1217,  1412,  1412,   642,  1246,  1247,  1415,
     483,   630,    75,   573,   421,  1431,  1517,  1210,  1163,  1160,
    1175,   250,   250,  1160,  1175,  1166,  1165,  1167,  1303,  1212,
     120,   355,  1117,  1118,  1119,  1296,  1200,  1201,  1111,   637,
    1227,   391,   635,  1028,  1118,  1004,   992,   635,   991,   120,
     120,   925,  1066,  1034,   959,   544,   927,  1021,  1222,  1031,
    1033,  1023,  1354,   918,   635,   979,   943,   943,   944,   938,
     936,   402,   928,   936,   936,   964,    59,   599,   930,   932,
     964,   964,    59,   600,   600,   603,   936,   929,   944,   938,
     938,   964,   943,   944,    25,    68,    72,    74,   120,   360,
     367,   406,   477,   526,   582,   946,   947,   948,   977,  1124,
     603,   943,   964,    33,   943,   965,   943,   943,   944,   635,
     937,   945,   643,  1206,   491,  1410,   138,  1018,   636,   637,
    1541,  1542,   636,  1203,   672,   496,   232,   241,   383,   703,
     704,   705,   706,  1113,   468,   636,   637,   701,  1410,   636,
     636,   903,    19,   895,  1002,  1003,  1413,  1002,   266,  1233,
     636,   636,   636,   636,   636,    33,    21,   579,   952,    33,
     953,   636,   637,   636,   636,   636,  1393,   636,   636,   637,
     636,   331,   255,   416,   636,   636,   636,   636,   636,   636,
     967,   636,   637,   914,  1106,  1229,  1513,   636,   170,   275,
     373,    62,   248,   353,   515,   531,   619,  1477,  1478,   613,
    1487,  1487,  1487,   636,   637,  1298,   238,   635,   859,   635,
     872,  1413,   870,   894,  1288,  1295,   636,  1512,    46,   207,
    1214,  1251,  1415,   637,   331,  1432,  1178,   367,  1169,  1175,
    1175,   367,  1171,  1118,  1118,   635,  1223,  1118,   622,  1122,
     246,  1198,  1199,  1188,  1401,  1235,   869,   636,   635,   635,
    1002,   635,   110,   554,   557,   628,   629,  1395,  1396,  1047,
    1406,   946,  1071,  1032,  1058,   636,   980,  1413,   308,   981,
     489,   585,   625,   940,   941,   942,   635,   940,   940,   964,
     603,   940,   635,   964,   940,   958,   120,   143,   180,  1410,
     950,   951,  1395,   587,   120,   120,   134,   321,   253,   948,
     253,   360,   964,   965,   964,   965,   940,   361,   940,  1413,
     677,   684,   685,  1413,   473,   635,  1543,  1546,   636,  1410,
     636,   637,   701,  1550,   676,  1556,   702,   927,   949,   839,
     843,   635,   892,   636,   637,  1227,   635,   636,  1232,   953,
     965,   361,  1118,   331,   168,   636,  1234,  1110,  1110,   550,
     550,   550,    17,  1476,   200,   309,   310,   314,   315,  1489,
    1490,  1295,   253,   544,  1113,   862,   864,   865,  1413,   597,
     873,   914,  1218,  1401,  1215,  1223,   952,   955,  1247,  1518,
    1168,   593,  1170,   593,  1205,  1233,  1118,  1118,   174,   567,
     583,  1124,   184,   221,   592,  1193,  1194,  1197,   914,  1227,
     636,  1002,  1002,   636,  1002,  1397,  1397,   847,  1040,   238,
     636,   637,   190,   389,   490,   367,   982,   942,  1006,  1393,
    1006,   950,   598,   517,   679,    52,    65,   177,   220,   249,
     260,   370,   455,   686,   744,   746,   747,   748,   750,   751,
     752,   753,   754,   755,   757,   765,   766,   769,   780,   783,
     785,   786,  1409,  1414,  1418,  1547,   635,  1545,  1546,   613,
    1548,  1544,  1563,   705,  1413,  1406,   681,   682,   454,   959,
    1512,   840,   892,   841,    74,   252,   993,   995,   997,   998,
     999,  1003,   361,   613,   994,   996,   998,  1000,   636,   636,
     636,  1477,   373,  1234,  1234,  1234,  1234,  1490,   587,  1406,
     866,   532,   867,   636,   637,   241,   262,    74,   106,   228,
     311,   329,   352,   542,   889,   890,   891,  1332,   614,   615,
     637,  1219,  1227,  1118,  1229,   954,  1252,  1179,  1118,   635,
    1118,   635,   636,   174,   567,   583,   986,   986,  1194,   636,
     636,   993,   636,  1047,   635,  1413,   125,   587,   636,   637,
     636,  1118,   150,   680,   767,   770,  1413,   189,   351,   758,
     745,  1414,  1414,  1413,   749,   650,   282,   443,   612,   789,
      30,   787,   644,  1102,  1545,   636,    51,    61,   272,  1509,
     690,   949,   186,   678,  1557,   636,  1509,  1410,  1290,   666,
     999,  1227,   636,   388,   668,  1000,  1304,  1305,  1403,  1173,
    1114,  1235,   863,   865,   875,   552,  1290,   131,   131,  1290,
    1290,  1290,  1290,   635,   884,   891,   153,  1401,   408,  1240,
      70,  1377,  1513,  1205,  1205,   186,  1192,  1192,   978,   993,
     994,   869,    50,   357,   451,   481,   983,   983,   964,  1393,
     964,  1118,  1118,   610,   772,   776,   189,  1413,   760,   761,
    1118,   708,   743,   744,   746,   748,   750,   752,   753,   754,
     755,   757,   765,   780,   783,   785,   708,   790,   788,   781,
     784,   636,  1512,    61,   373,    61,   129,   691,   692,  1124,
    1564,  1113,   683,   949,   842,  1234,  1041,  1409,  1041,   637,
    1289,  1371,   636,   867,   635,   877,   879,   874,  1410,  1290,
    1290,   280,   361,   572,  1237,  1238,  1237,  1235,  1415,   533,
     885,   886,  1290,  1227,    14,   148,   159,   374,   549,  1378,
    1379,   268,  1380,   636,   636,   202,   250,   376,  1196,  1195,
     636,     5,   120,   360,   367,   367,   768,   777,   145,   776,
     779,   238,   149,  1118,   149,   743,   641,   586,  1118,   709,
     789,   787,   373,   373,   129,   743,  1551,   138,  1558,  1512,
    1305,  1295,   955,   635,   878,   879,   880,   316,   876,   879,
    1410,  1410,   887,   636,   637,   910,  1241,    46,    46,   148,
      46,  1379,   516,   549,  1381,  1382,    46,    46,   635,   635,
     587,   125,   610,   771,   773,  1118,   708,   149,   756,   220,
     762,   282,   641,   792,   791,   119,   707,   710,   782,  1414,
     782,   144,   684,   690,  1372,   636,   637,   316,   882,   883,
    1121,   888,  1415,   886,   635,  1393,  1393,    46,  1393,    46,
      46,  1382,  1202,  1204,   983,   983,   774,   773,   779,   778,
      52,   759,  1413,   553,  1118,   138,    90,   167,   714,   740,
    1413,   149,   743,   641,   464,  1559,   462,  1383,   879,   637,
     881,   889,   361,  1242,  1243,  1393,  1393,  1393,   636,   636,
    1118,   149,   553,   637,   708,   793,   708,   205,   637,   711,
      81,   100,   641,  1552,   743,   218,  1377,   883,   636,   636,
     637,   775,    52,   708,  1413,   763,   149,   149,   186,  1413,
     949,   186,   186,   743,    46,  1380,  1243,   553,   145,   146,
     764,   443,   612,   712,   120,   741,   717,   718,  1234,   713,
    1393,   221,  1384,   708,   708,   760,   501,   503,   715,   716,
     717,   720,  1124,  1413,   742,  1096,   361,   635,  1386,   637,
     743,   188,  1118,   268,   462,  1385,   636,   642,  1387,  1388,
    1403,   481,  1389,   716,  1415,   636,   637,  1390,  1391,  1403,
    1388,   637,  1289,  1391,  1113,  1295,  1114
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (YYID (N))                                                     \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (YYID (0))
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])



/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1788 of yacc.c  */
#line 1968 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_INCEPTION_EMPTY_QUERY, ER(ER_INCEPTION_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1788 of yacc.c  */
#line 1980 "/root/inception/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1788 of yacc.c  */
#line 2005 "/root/inception/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 64:

/* Line 1788 of yacc.c  */
#line 2081 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 67:

/* Line 1788 of yacc.c  */
#line 2096 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 68:

/* Line 1788 of yacc.c  */
#line 2106 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 69:

/* Line 1788 of yacc.c  */
#line 2113 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 70:

/* Line 1788 of yacc.c  */
#line 2123 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 71:

/* Line 1788 of yacc.c  */
#line 2130 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 76:

/* Line 1788 of yacc.c  */
#line 2145 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 77:

/* Line 1788 of yacc.c  */
#line 2157 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 78:

/* Line 1788 of yacc.c  */
#line 2165 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 79:

/* Line 1788 of yacc.c  */
#line 2176 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 80:

/* Line 1788 of yacc.c  */
#line 2194 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 81:

/* Line 1788 of yacc.c  */
#line 2219 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 82:

/* Line 1788 of yacc.c  */
#line 2238 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 83:

/* Line 1788 of yacc.c  */
#line 2243 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 84:

/* Line 1788 of yacc.c  */
#line 2247 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 85:

/* Line 1788 of yacc.c  */
#line 2250 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 86:

/* Line 1788 of yacc.c  */
#line 2255 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 87:

/* Line 1788 of yacc.c  */
#line 2259 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 88:

/* Line 1788 of yacc.c  */
#line 2273 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 89:

/* Line 1788 of yacc.c  */
#line 2278 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 90:

/* Line 1788 of yacc.c  */
#line 2285 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 91:

/* Line 1788 of yacc.c  */
#line 2291 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 92:

/* Line 1788 of yacc.c  */
#line 2293 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 93:

/* Line 1788 of yacc.c  */
#line 2297 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 94:

/* Line 1788 of yacc.c  */
#line 2301 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 95:

/* Line 1788 of yacc.c  */
#line 2305 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 96:

/* Line 1788 of yacc.c  */
#line 2316 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 99:

/* Line 1788 of yacc.c  */
#line 2330 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 100:

/* Line 1788 of yacc.c  */
#line 2334 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 101:

/* Line 1788 of yacc.c  */
#line 2338 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 102:

/* Line 1788 of yacc.c  */
#line 2342 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 103:

/* Line 1788 of yacc.c  */
#line 2346 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 104:

/* Line 1788 of yacc.c  */
#line 2351 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 105:

/* Line 1788 of yacc.c  */
#line 2355 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 106:

/* Line 1788 of yacc.c  */
#line 2362 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            /* if (!(lex->event_parse_data= Event_parse_data::new_instance(thd))) */
            /*    MYSQL_YYABORT; */
            /* lex->event_parse_data->identifier= $4; */
            /* lex->event_parse_data->on_completion= */
            /*                       Event_parse_data::ON_COMPLETION_DROP; */

            lex->sql_command= SQLCOM_CREATE_EVENT;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0));
            MYSQL_YYABORT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 107:

/* Line 1788 of yacc.c  */
#line 2384 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 108:

/* Line 1788 of yacc.c  */
#line 2395 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 110:

/* Line 1788 of yacc.c  */
#line 2402 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 111:

/* Line 1788 of yacc.c  */
#line 2408 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 112:

/* Line 1788 of yacc.c  */
#line 2410 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 113:

/* Line 1788 of yacc.c  */
#line 2416 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 114:

/* Line 1788 of yacc.c  */
#line 2422 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 115:

/* Line 1788 of yacc.c  */
#line 2431 "/root/inception/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 116:

/* Line 1788 of yacc.c  */
#line 2438 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 118:

/* Line 1788 of yacc.c  */
#line 2446 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 119:

/* Line 1788 of yacc.c  */
#line 2452 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 121:

/* Line 1788 of yacc.c  */
#line 2458 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 122:

/* Line 1788 of yacc.c  */
#line 2464 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 123:

/* Line 1788 of yacc.c  */
#line 2472 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 124:

/* Line 1788 of yacc.c  */
#line 2474 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 125:

/* Line 1788 of yacc.c  */
#line 2481 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 126:

/* Line 1788 of yacc.c  */
#line 2524 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 140:

/* Line 1788 of yacc.c  */
#line 2553 "/root/inception/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 141:

/* Line 1788 of yacc.c  */
#line 2568 "/root/inception/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 142:

/* Line 1788 of yacc.c  */
#line 2582 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 143:

/* Line 1788 of yacc.c  */
#line 2600 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 144:

/* Line 1788 of yacc.c  */
#line 2601 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 145:

/* Line 1788 of yacc.c  */
#line 2605 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 146:

/* Line 1788 of yacc.c  */
#line 2606 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 147:

/* Line 1788 of yacc.c  */
#line 2612 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 148:

/* Line 1788 of yacc.c  */
#line 2614 "/root/inception/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 149:

/* Line 1788 of yacc.c  */
#line 2616 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 150:

/* Line 1788 of yacc.c  */
#line 2618 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 151:

/* Line 1788 of yacc.c  */
#line 2620 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 152:

/* Line 1788 of yacc.c  */
#line 2622 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 153:

/* Line 1788 of yacc.c  */
#line 2624 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 154:

/* Line 1788 of yacc.c  */
#line 2629 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 155:

/* Line 1788 of yacc.c  */
#line 2630 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 156:

/* Line 1788 of yacc.c  */
#line 2631 "/root/inception/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 157:

/* Line 1788 of yacc.c  */
#line 2636 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 158:

/* Line 1788 of yacc.c  */
#line 2640 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 159:

/* Line 1788 of yacc.c  */
#line 2647 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 160:

/* Line 1788 of yacc.c  */
#line 2655 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 165:

/* Line 1788 of yacc.c  */
#line 2671 "/root/inception/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 166:

/* Line 1788 of yacc.c  */
#line 2675 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 171:

/* Line 1788 of yacc.c  */
#line 2693 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 172:

/* Line 1788 of yacc.c  */
#line 2713 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 177:

/* Line 1788 of yacc.c  */
#line 2754 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 178:

/* Line 1788 of yacc.c  */
#line 2782 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 179:

/* Line 1788 of yacc.c  */
#line 2783 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 180:

/* Line 1788 of yacc.c  */
#line 2784 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 181:

/* Line 1788 of yacc.c  */
#line 2785 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 182:

/* Line 1788 of yacc.c  */
#line 2789 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1788 of yacc.c  */
#line 2794 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 186:

/* Line 1788 of yacc.c  */
#line 2800 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 187:

/* Line 1788 of yacc.c  */
#line 2804 "/root/inception/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 188:

/* Line 1788 of yacc.c  */
#line 2830 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 189:

/* Line 1788 of yacc.c  */
#line 2841 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 190:

/* Line 1788 of yacc.c  */
#line 2914 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 191:

/* Line 1788 of yacc.c  */
#line 2930 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 192:

/* Line 1788 of yacc.c  */
#line 2970 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 193:

/* Line 1788 of yacc.c  */
#line 3004 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 194:

/* Line 1788 of yacc.c  */
#line 3013 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 195:

/* Line 1788 of yacc.c  */
#line 3076 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 196:

/* Line 1788 of yacc.c  */
#line 3077 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 197:

/* Line 1788 of yacc.c  */
#line 3083 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 198:

/* Line 1788 of yacc.c  */
#line 3085 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 199:

/* Line 1788 of yacc.c  */
#line 3090 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 200:

/* Line 1788 of yacc.c  */
#line 3113 "/root/inception/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 202:

/* Line 1788 of yacc.c  */
#line 3128 "/root/inception/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 203:

/* Line 1788 of yacc.c  */
#line 3149 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1788 of yacc.c  */
#line 3150 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 205:

/* Line 1788 of yacc.c  */
#line 3155 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 206:

/* Line 1788 of yacc.c  */
#line 3159 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 207:

/* Line 1788 of yacc.c  */
#line 3172 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 208:

/* Line 1788 of yacc.c  */
#line 3178 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 209:

/* Line 1788 of yacc.c  */
#line 3184 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 210:

/* Line 1788 of yacc.c  */
#line 3193 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 211:

/* Line 1788 of yacc.c  */
#line 3208 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 212:

/* Line 1788 of yacc.c  */
#line 3234 "/root/inception/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 213:

/* Line 1788 of yacc.c  */
#line 3239 "/root/inception/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 214:

/* Line 1788 of yacc.c  */
#line 3241 "/root/inception/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 215:

/* Line 1788 of yacc.c  */
#line 3246 "/root/inception/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 217:

/* Line 1788 of yacc.c  */
#line 3254 "/root/inception/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 218:

/* Line 1788 of yacc.c  */
#line 3263 "/root/inception/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 219:

/* Line 1788 of yacc.c  */
#line 3282 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 220:

/* Line 1788 of yacc.c  */
#line 3284 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 221:

/* Line 1788 of yacc.c  */
#line 3302 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 222:

/* Line 1788 of yacc.c  */
#line 3308 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 223:

/* Line 1788 of yacc.c  */
#line 3310 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 224:

/* Line 1788 of yacc.c  */
#line 3312 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 225:

/* Line 1788 of yacc.c  */
#line 3314 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 226:

/* Line 1788 of yacc.c  */
#line 3316 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 227:

/* Line 1788 of yacc.c  */
#line 3318 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 228:

/* Line 1788 of yacc.c  */
#line 3320 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 229:

/* Line 1788 of yacc.c  */
#line 3322 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 230:

/* Line 1788 of yacc.c  */
#line 3324 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 231:

/* Line 1788 of yacc.c  */
#line 3326 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 232:

/* Line 1788 of yacc.c  */
#line 3328 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 233:

/* Line 1788 of yacc.c  */
#line 3330 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 234:

/* Line 1788 of yacc.c  */
#line 3335 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1788 of yacc.c  */
#line 3351 "/root/inception/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
//             Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);
// 
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:

/* Line 1788 of yacc.c  */
#line 3366 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 237:

/* Line 1788 of yacc.c  */
#line 3368 "/root/inception/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 238:

/* Line 1788 of yacc.c  */
#line 3373 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 239:

/* Line 1788 of yacc.c  */
#line 3379 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 240:

/* Line 1788 of yacc.c  */
#line 3388 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 241:

/* Line 1788 of yacc.c  */
#line 3394 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 242:

/* Line 1788 of yacc.c  */
#line 3403 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1788 of yacc.c  */
#line 3411 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:

/* Line 1788 of yacc.c  */
#line 3440 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 245:

/* Line 1788 of yacc.c  */
#line 3449 "/root/inception/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 246:

/* Line 1788 of yacc.c  */
#line 3451 "/root/inception/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 247:

/* Line 1788 of yacc.c  */
#line 3460 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 248:

/* Line 1788 of yacc.c  */
#line 3465 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1788 of yacc.c  */
#line 3471 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 250:

/* Line 1788 of yacc.c  */
#line 3480 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1788 of yacc.c  */
#line 3488 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 252:

/* Line 1788 of yacc.c  */
#line 3490 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 253:

/* Line 1788 of yacc.c  */
#line 3492 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 254:

/* Line 1788 of yacc.c  */
#line 3494 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 255:

/* Line 1788 of yacc.c  */
#line 3496 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 256:

/* Line 1788 of yacc.c  */
#line 3498 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 257:

/* Line 1788 of yacc.c  */
#line 3500 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 258:

/* Line 1788 of yacc.c  */
#line 3502 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 259:

/* Line 1788 of yacc.c  */
#line 3504 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 260:

/* Line 1788 of yacc.c  */
#line 3506 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 261:

/* Line 1788 of yacc.c  */
#line 3508 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 262:

/* Line 1788 of yacc.c  */
#line 3510 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 263:

/* Line 1788 of yacc.c  */
#line 3512 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 264:

/* Line 1788 of yacc.c  */
#line 3517 "/root/inception/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 265:

/* Line 1788 of yacc.c  */
#line 3537 "/root/inception/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 266:

/* Line 1788 of yacc.c  */
#line 3560 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 267:

/* Line 1788 of yacc.c  */
#line 3562 "/root/inception/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 268:

/* Line 1788 of yacc.c  */
#line 3564 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 282:

/* Line 1788 of yacc.c  */
#line 3585 "/root/inception/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 283:

/* Line 1788 of yacc.c  */
#line 3587 "/root/inception/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 284:

/* Line 1788 of yacc.c  */
#line 3595 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 285:

/* Line 1788 of yacc.c  */
#line 3605 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 286:

/* Line 1788 of yacc.c  */
#line 3652 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 287:

/* Line 1788 of yacc.c  */
#line 3662 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 288:

/* Line 1788 of yacc.c  */
#line 3708 "/root/inception/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 289:

/* Line 1788 of yacc.c  */
#line 3719 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 290:

/* Line 1788 of yacc.c  */
#line 3731 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 291:

/* Line 1788 of yacc.c  */
#line 3790 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 292:

/* Line 1788 of yacc.c  */
#line 3840 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 293:

/* Line 1788 of yacc.c  */
#line 3864 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 294:

/* Line 1788 of yacc.c  */
#line 3885 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 295:

/* Line 1788 of yacc.c  */
#line 3890 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 299:

/* Line 1788 of yacc.c  */
#line 3920 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 300:

/* Line 1788 of yacc.c  */
#line 3938 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 301:

/* Line 1788 of yacc.c  */
#line 3958 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 302:

/* Line 1788 of yacc.c  */
#line 3967 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 303:

/* Line 1788 of yacc.c  */
#line 4003 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 304:

/* Line 1788 of yacc.c  */
#line 4022 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 310:

/* Line 1788 of yacc.c  */
#line 4045 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 311:

/* Line 1788 of yacc.c  */
#line 4056 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 312:

/* Line 1788 of yacc.c  */
#line 4100 "/root/inception/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 313:

/* Line 1788 of yacc.c  */
#line 4107 "/root/inception/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 314:

/* Line 1788 of yacc.c  */
#line 4114 "/root/inception/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 319:

/* Line 1788 of yacc.c  */
#line 4131 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 320:

/* Line 1788 of yacc.c  */
#line 4140 "/root/inception/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 321:

/* Line 1788 of yacc.c  */
#line 4181 "/root/inception/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 322:

/* Line 1788 of yacc.c  */
#line 4189 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 323:

/* Line 1788 of yacc.c  */
#line 4198 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 324:

/* Line 1788 of yacc.c  */
#line 4234 "/root/inception/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1788 of yacc.c  */
#line 4242 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1788 of yacc.c  */
#line 4260 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 328:

/* Line 1788 of yacc.c  */
#line 4278 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 329:

/* Line 1788 of yacc.c  */
#line 4297 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 330:

/* Line 1788 of yacc.c  */
#line 4298 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 331:

/* Line 1788 of yacc.c  */
#line 4303 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 332:

/* Line 1788 of yacc.c  */
#line 4319 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 333:

/* Line 1788 of yacc.c  */
#line 4336 "/root/inception/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 334:

/* Line 1788 of yacc.c  */
#line 4347 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 335:

/* Line 1788 of yacc.c  */
#line 4355 "/root/inception/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 336:

/* Line 1788 of yacc.c  */
#line 4370 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 337:

/* Line 1788 of yacc.c  */
#line 4406 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 338:

/* Line 1788 of yacc.c  */
#line 4421 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 339:

/* Line 1788 of yacc.c  */
#line 4430 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 340:

/* Line 1788 of yacc.c  */
#line 4468 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 341:

/* Line 1788 of yacc.c  */
#line 4484 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 342:

/* Line 1788 of yacc.c  */
#line 4493 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 344:

/* Line 1788 of yacc.c  */
#line 4534 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 345:

/* Line 1788 of yacc.c  */
#line 4536 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 346:

/* Line 1788 of yacc.c  */
#line 4541 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 347:

/* Line 1788 of yacc.c  */
#line 4543 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 348:

/* Line 1788 of yacc.c  */
#line 4545 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 352:

/* Line 1788 of yacc.c  */
#line 4579 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 353:

/* Line 1788 of yacc.c  */
#line 4581 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 354:

/* Line 1788 of yacc.c  */
#line 4591 "/root/inception/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 355:

/* Line 1788 of yacc.c  */
#line 4597 "/root/inception/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 360:

/* Line 1788 of yacc.c  */
#line 4620 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 411:

/* Line 1788 of yacc.c  */
#line 4718 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 412:

/* Line 1788 of yacc.c  */
#line 4726 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 413:

/* Line 1788 of yacc.c  */
#line 4734 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 414:

/* Line 1788 of yacc.c  */
#line 4742 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 415:

/* Line 1788 of yacc.c  */
#line 4754 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 416:

/* Line 1788 of yacc.c  */
#line 4766 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 417:

/* Line 1788 of yacc.c  */
#line 4771 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 418:

/* Line 1788 of yacc.c  */
#line 4776 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 419:

/* Line 1788 of yacc.c  */
#line 4784 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 420:

/* Line 1788 of yacc.c  */
#line 4792 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 421:

/* Line 1788 of yacc.c  */
#line 4800 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 422:

/* Line 1788 of yacc.c  */
#line 4808 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 423:

/* Line 1788 of yacc.c  */
#line 4816 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 424:

/* Line 1788 of yacc.c  */
#line 4824 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 425:

/* Line 1788 of yacc.c  */
#line 4832 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 426:

/* Line 1788 of yacc.c  */
#line 4845 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 427:

/* Line 1788 of yacc.c  */
#line 4858 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 428:

/* Line 1788 of yacc.c  */
#line 4872 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 429:

/* Line 1788 of yacc.c  */
#line 4877 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 430:

/* Line 1788 of yacc.c  */
#line 4889 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 431:

/* Line 1788 of yacc.c  */
#line 4891 "/root/inception/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 432:

/* Line 1788 of yacc.c  */
#line 4941 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1788 of yacc.c  */
#line 4944 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1788 of yacc.c  */
#line 4946 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 435:

/* Line 1788 of yacc.c  */
#line 4961 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 436:

/* Line 1788 of yacc.c  */
#line 4980 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 437:

/* Line 1788 of yacc.c  */
#line 4983 "/root/inception/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 438:

/* Line 1788 of yacc.c  */
#line 4984 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 439:

/* Line 1788 of yacc.c  */
#line 4988 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 440:

/* Line 1788 of yacc.c  */
#line 4990 "/root/inception/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 441:

/* Line 1788 of yacc.c  */
#line 4991 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 442:

/* Line 1788 of yacc.c  */
#line 4993 "/root/inception/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 443:

/* Line 1788 of yacc.c  */
#line 4994 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1788 of yacc.c  */
#line 4999 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 445:

/* Line 1788 of yacc.c  */
#line 5035 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1788 of yacc.c  */
#line 5041 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 449:

/* Line 1788 of yacc.c  */
#line 5059 "/root/inception/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 450:

/* Line 1788 of yacc.c  */
#line 5078 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 451:

/* Line 1788 of yacc.c  */
#line 5090 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 453:

/* Line 1788 of yacc.c  */
#line 5099 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 454:

/* Line 1788 of yacc.c  */
#line 5106 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 455:

/* Line 1788 of yacc.c  */
#line 5107 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1788 of yacc.c  */
#line 5109 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 457:

/* Line 1788 of yacc.c  */
#line 5111 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 458:

/* Line 1788 of yacc.c  */
#line 5113 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 459:

/* Line 1788 of yacc.c  */
#line 5115 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 460:

/* Line 1788 of yacc.c  */
#line 5119 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 461:

/* Line 1788 of yacc.c  */
#line 5121 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 462:

/* Line 1788 of yacc.c  */
#line 5125 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1788 of yacc.c  */
#line 5126 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1788 of yacc.c  */
#line 5130 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1788 of yacc.c  */
#line 5131 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1788 of yacc.c  */
#line 5136 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 467:

/* Line 1788 of yacc.c  */
#line 5155 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 468:

/* Line 1788 of yacc.c  */
#line 5165 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 469:

/* Line 1788 of yacc.c  */
#line 5176 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 470:

/* Line 1788 of yacc.c  */
#line 5184 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1788 of yacc.c  */
#line 5186 "/root/inception/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 472:

/* Line 1788 of yacc.c  */
#line 5201 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1788 of yacc.c  */
#line 5203 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 474:

/* Line 1788 of yacc.c  */
#line 5204 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1788 of yacc.c  */
#line 5207 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 476:

/* Line 1788 of yacc.c  */
#line 5212 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1788 of yacc.c  */
#line 5216 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1788 of yacc.c  */
#line 5217 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1788 of yacc.c  */
#line 5222 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 480:

/* Line 1788 of yacc.c  */
#line 5240 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 481:

/* Line 1788 of yacc.c  */
#line 5255 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1788 of yacc.c  */
#line 5257 "/root/inception/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 483:

/* Line 1788 of yacc.c  */
#line 5272 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 484:

/* Line 1788 of yacc.c  */
#line 5288 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 485:

/* Line 1788 of yacc.c  */
#line 5309 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1788 of yacc.c  */
#line 5310 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1788 of yacc.c  */
#line 5315 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 488:

/* Line 1788 of yacc.c  */
#line 5334 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1788 of yacc.c  */
#line 5339 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 490:

/* Line 1788 of yacc.c  */
#line 5348 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 491:

/* Line 1788 of yacc.c  */
#line 5370 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 492:

/* Line 1788 of yacc.c  */
#line 5385 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1788 of yacc.c  */
#line 5387 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 494:

/* Line 1788 of yacc.c  */
#line 5402 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 495:

/* Line 1788 of yacc.c  */
#line 5407 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 496:

/* Line 1788 of yacc.c  */
#line 5428 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1788 of yacc.c  */
#line 5433 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 498:

/* Line 1788 of yacc.c  */
#line 5462 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 499:

/* Line 1788 of yacc.c  */
#line 5473 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1788 of yacc.c  */
#line 5474 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1788 of yacc.c  */
#line 5479 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:

/* Line 1788 of yacc.c  */
#line 5490 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1788 of yacc.c  */
#line 5492 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 504:

/* Line 1788 of yacc.c  */
#line 5515 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1788 of yacc.c  */
#line 5516 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1788 of yacc.c  */
#line 5521 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 507:

/* Line 1788 of yacc.c  */
#line 5534 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 508:

/* Line 1788 of yacc.c  */
#line 5554 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 509:

/* Line 1788 of yacc.c  */
#line 5568 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 510:

/* Line 1788 of yacc.c  */
#line 5593 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1788 of yacc.c  */
#line 5594 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1788 of yacc.c  */
#line 5599 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 513:

/* Line 1788 of yacc.c  */
#line 5631 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1788 of yacc.c  */
#line 5636 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 515:

/* Line 1788 of yacc.c  */
#line 5640 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1788 of yacc.c  */
#line 5641 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1788 of yacc.c  */
#line 5645 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1788 of yacc.c  */
#line 5646 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 519:

/* Line 1788 of yacc.c  */
#line 5651 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 520:

/* Line 1788 of yacc.c  */
#line 5653 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 521:

/* Line 1788 of yacc.c  */
#line 5659 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 522:

/* Line 1788 of yacc.c  */
#line 5661 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 523:

/* Line 1788 of yacc.c  */
#line 5663 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 524:

/* Line 1788 of yacc.c  */
#line 5665 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 525:

/* Line 1788 of yacc.c  */
#line 5667 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 526:

/* Line 1788 of yacc.c  */
#line 5669 "/root/inception/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 527:

/* Line 1788 of yacc.c  */
#line 5678 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 528:

/* Line 1788 of yacc.c  */
#line 5693 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 529:

/* Line 1788 of yacc.c  */
#line 5697 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 530:

/* Line 1788 of yacc.c  */
#line 5707 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1788 of yacc.c  */
#line 5708 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1788 of yacc.c  */
#line 5712 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1788 of yacc.c  */
#line 5713 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1788 of yacc.c  */
#line 5717 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1788 of yacc.c  */
#line 5718 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1788 of yacc.c  */
#line 5722 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1788 of yacc.c  */
#line 5723 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1788 of yacc.c  */
#line 5727 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 539:

/* Line 1788 of yacc.c  */
#line 5728 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 540:

/* Line 1788 of yacc.c  */
#line 5732 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 541:

/* Line 1788 of yacc.c  */
#line 5733 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 542:

/* Line 1788 of yacc.c  */
#line 5737 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 543:

/* Line 1788 of yacc.c  */
#line 5741 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 544:

/* Line 1788 of yacc.c  */
#line 5742 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 552:

/* Line 1788 of yacc.c  */
#line 5763 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 553:

/* Line 1788 of yacc.c  */
#line 5768 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 554:

/* Line 1788 of yacc.c  */
#line 5773 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 555:

/* Line 1788 of yacc.c  */
#line 5778 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 556:

/* Line 1788 of yacc.c  */
#line 5783 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 557:

/* Line 1788 of yacc.c  */
#line 5788 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 558:

/* Line 1788 of yacc.c  */
#line 5793 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 559:

/* Line 1788 of yacc.c  */
#line 5798 "/root/inception/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 560:

/* Line 1788 of yacc.c  */
#line 5813 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 561:

/* Line 1788 of yacc.c  */
#line 5819 "/root/inception/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 562:

/* Line 1788 of yacc.c  */
#line 5834 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 563:

/* Line 1788 of yacc.c  */
#line 5839 "/root/inception/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 564:

/* Line 1788 of yacc.c  */
#line 5854 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 565:

/* Line 1788 of yacc.c  */
#line 5860 "/root/inception/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 566:

/* Line 1788 of yacc.c  */
#line 5878 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 567:

/* Line 1788 of yacc.c  */
#line 5883 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 568:

/* Line 1788 of yacc.c  */
#line 5888 "/root/inception/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 569:

/* Line 1788 of yacc.c  */
#line 5893 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 570:

/* Line 1788 of yacc.c  */
#line 5898 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 571:

/* Line 1788 of yacc.c  */
#line 5903 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 572:

/* Line 1788 of yacc.c  */
#line 5907 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 575:

/* Line 1788 of yacc.c  */
#line 5931 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 576:

/* Line 1788 of yacc.c  */
#line 5936 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 577:

/* Line 1788 of yacc.c  */
#line 5941 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 578:

/* Line 1788 of yacc.c  */
#line 5946 "/root/inception/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 579:

/* Line 1788 of yacc.c  */
#line 5948 "/root/inception/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 580:

/* Line 1788 of yacc.c  */
#line 5950 "/root/inception/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 581:

/* Line 1788 of yacc.c  */
#line 5952 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 582:

/* Line 1788 of yacc.c  */
#line 5958 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 583:

/* Line 1788 of yacc.c  */
#line 5966 "/root/inception/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 584:

/* Line 1788 of yacc.c  */
#line 5984 "/root/inception/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 585:

/* Line 1788 of yacc.c  */
#line 6001 "/root/inception/sql/sql_yacc.yy"
    {
              THD *thd= YYTHD;
			  if ((yyvsp[(1) - (1)].lex_str).length == 0 || strcasecmp((yyvsp[(1) - (1)].lex_str).str, "innodb") != 0)
                (yyval.db_type) = (handlerton *)DB_TYPE_MISAM;
              else
         	    (yyval.db_type) = (handlerton *)DB_TYPE_INNODB;
          }
    break;

  case 586:

/* Line 1788 of yacc.c  */
#line 6012 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
/*            plugin_ref plugin=
              ha_resolve_by_name(thd, &$1,
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              $$= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), $1.str);
              MYSQL_YYABORT;
            }
*/
          }
    break;

  case 587:

/* Line 1788 of yacc.c  */
#line 6030 "/root/inception/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 588:

/* Line 1788 of yacc.c  */
#line 6031 "/root/inception/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 589:

/* Line 1788 of yacc.c  */
#line 6032 "/root/inception/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 590:

/* Line 1788 of yacc.c  */
#line 6033 "/root/inception/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 591:

/* Line 1788 of yacc.c  */
#line 6034 "/root/inception/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 592:

/* Line 1788 of yacc.c  */
#line 6035 "/root/inception/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 593:

/* Line 1788 of yacc.c  */
#line 6039 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 594:

/* Line 1788 of yacc.c  */
#line 6040 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 595:

/* Line 1788 of yacc.c  */
#line 6041 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 596:

/* Line 1788 of yacc.c  */
#line 6045 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 598:

/* Line 1788 of yacc.c  */
#line 6050 "/root/inception/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 599:

/* Line 1788 of yacc.c  */
#line 6051 "/root/inception/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 600:

/* Line 1788 of yacc.c  */
#line 6052 "/root/inception/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 601:

/* Line 1788 of yacc.c  */
#line 6053 "/root/inception/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 602:

/* Line 1788 of yacc.c  */
#line 6059 "/root/inception/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 608:

/* Line 1788 of yacc.c  */
#line 6077 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 609:

/* Line 1788 of yacc.c  */
#line 6084 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 610:

/* Line 1788 of yacc.c  */
#line 6090 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 611:

/* Line 1788 of yacc.c  */
#line 6102 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 612:

/* Line 1788 of yacc.c  */
#line 6107 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 613:

/* Line 1788 of yacc.c  */
#line 6126 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 617:

/* Line 1788 of yacc.c  */
#line 6141 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 618:

/* Line 1788 of yacc.c  */
#line 6142 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 619:

/* Line 1788 of yacc.c  */
#line 6146 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 620:

/* Line 1788 of yacc.c  */
#line 6151 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 621:

/* Line 1788 of yacc.c  */
#line 6160 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 622:

/* Line 1788 of yacc.c  */
#line 6173 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 623:

/* Line 1788 of yacc.c  */
#line 6174 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 624:

/* Line 1788 of yacc.c  */
#line 6175 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 625:

/* Line 1788 of yacc.c  */
#line 6177 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 626:

/* Line 1788 of yacc.c  */
#line 6182 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 627:

/* Line 1788 of yacc.c  */
#line 6186 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 628:

/* Line 1788 of yacc.c  */
#line 6191 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 629:

/* Line 1788 of yacc.c  */
#line 6196 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 630:

/* Line 1788 of yacc.c  */
#line 6200 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 631:

/* Line 1788 of yacc.c  */
#line 6205 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 632:

/* Line 1788 of yacc.c  */
#line 6210 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 633:

/* Line 1788 of yacc.c  */
#line 6216 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 634:

/* Line 1788 of yacc.c  */
#line 6221 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 635:

/* Line 1788 of yacc.c  */
#line 6227 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 636:

/* Line 1788 of yacc.c  */
#line 6231 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 637:

/* Line 1788 of yacc.c  */
#line 6236 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 638:

/* Line 1788 of yacc.c  */
#line 6241 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 639:

/* Line 1788 of yacc.c  */
#line 6259 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 640:

/* Line 1788 of yacc.c  */
#line 6261 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 641:

/* Line 1788 of yacc.c  */
#line 6263 "/root/inception/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 642:

/* Line 1788 of yacc.c  */
#line 6279 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 643:

/* Line 1788 of yacc.c  */
#line 6281 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 644:

/* Line 1788 of yacc.c  */
#line 6286 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 645:

/* Line 1788 of yacc.c  */
#line 6303 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 646:

/* Line 1788 of yacc.c  */
#line 6308 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 647:

/* Line 1788 of yacc.c  */
#line 6313 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 648:

/* Line 1788 of yacc.c  */
#line 6318 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 649:

/* Line 1788 of yacc.c  */
#line 6320 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 650:

/* Line 1788 of yacc.c  */
#line 6322 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 651:

/* Line 1788 of yacc.c  */
#line 6324 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 652:

/* Line 1788 of yacc.c  */
#line 6326 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 653:

/* Line 1788 of yacc.c  */
#line 6328 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 654:

/* Line 1788 of yacc.c  */
#line 6330 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 655:

/* Line 1788 of yacc.c  */
#line 6332 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 656:

/* Line 1788 of yacc.c  */
#line 6334 "/root/inception/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 657:

/* Line 1788 of yacc.c  */
#line 6336 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 658:

/* Line 1788 of yacc.c  */
#line 6338 "/root/inception/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 659:

/* Line 1788 of yacc.c  */
#line 6340 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 660:

/* Line 1788 of yacc.c  */
#line 6342 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 661:

/* Line 1788 of yacc.c  */
#line 6344 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 662:

/* Line 1788 of yacc.c  */
#line 6367 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 663:

/* Line 1788 of yacc.c  */
#line 6371 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 664:

/* Line 1788 of yacc.c  */
#line 6372 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1788 of yacc.c  */
#line 6376 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 666:

/* Line 1788 of yacc.c  */
#line 6377 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 667:

/* Line 1788 of yacc.c  */
#line 6381 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 668:

/* Line 1788 of yacc.c  */
#line 6382 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 669:

/* Line 1788 of yacc.c  */
#line 6383 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 670:

/* Line 1788 of yacc.c  */
#line 6384 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 671:

/* Line 1788 of yacc.c  */
#line 6385 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 672:

/* Line 1788 of yacc.c  */
#line 6389 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 673:

/* Line 1788 of yacc.c  */
#line 6390 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 674:

/* Line 1788 of yacc.c  */
#line 6391 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 675:

/* Line 1788 of yacc.c  */
#line 6392 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 676:

/* Line 1788 of yacc.c  */
#line 6393 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 677:

/* Line 1788 of yacc.c  */
#line 6398 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 678:

/* Line 1788 of yacc.c  */
#line 6403 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 679:

/* Line 1788 of yacc.c  */
#line 6405 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 680:

/* Line 1788 of yacc.c  */
#line 6410 "/root/inception/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 681:

/* Line 1788 of yacc.c  */
#line 6412 "/root/inception/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 682:

/* Line 1788 of yacc.c  */
#line 6414 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1788 of yacc.c  */
#line 6419 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 684:

/* Line 1788 of yacc.c  */
#line 6428 "/root/inception/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 685:

/* Line 1788 of yacc.c  */
#line 6429 "/root/inception/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 686:

/* Line 1788 of yacc.c  */
#line 6433 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 687:

/* Line 1788 of yacc.c  */
#line 6434 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 688:

/* Line 1788 of yacc.c  */
#line 6436 "/root/inception/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 689:

/* Line 1788 of yacc.c  */
#line 6443 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 690:

/* Line 1788 of yacc.c  */
#line 6444 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 691:

/* Line 1788 of yacc.c  */
#line 6448 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 692:

/* Line 1788 of yacc.c  */
#line 6449 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 693:

/* Line 1788 of yacc.c  */
#line 6453 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1788 of yacc.c  */
#line 6454 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 695:

/* Line 1788 of yacc.c  */
#line 6455 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 696:

/* Line 1788 of yacc.c  */
#line 6459 "/root/inception/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 697:

/* Line 1788 of yacc.c  */
#line 6460 "/root/inception/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 698:

/* Line 1788 of yacc.c  */
#line 6461 "/root/inception/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 699:

/* Line 1788 of yacc.c  */
#line 6462 "/root/inception/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 700:

/* Line 1788 of yacc.c  */
#line 6465 "/root/inception/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 701:

/* Line 1788 of yacc.c  */
#line 6466 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 702:

/* Line 1788 of yacc.c  */
#line 6470 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 703:

/* Line 1788 of yacc.c  */
#line 6471 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 704:

/* Line 1788 of yacc.c  */
#line 6475 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 705:

/* Line 1788 of yacc.c  */
#line 6476 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1788 of yacc.c  */
#line 6480 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 708:

/* Line 1788 of yacc.c  */
#line 6485 "/root/inception/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 709:

/* Line 1788 of yacc.c  */
#line 6486 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 710:

/* Line 1788 of yacc.c  */
#line 6487 "/root/inception/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 711:

/* Line 1788 of yacc.c  */
#line 6488 "/root/inception/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 712:

/* Line 1788 of yacc.c  */
#line 6489 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 713:

/* Line 1788 of yacc.c  */
#line 6491 "/root/inception/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 714:

/* Line 1788 of yacc.c  */
#line 6497 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 715:

/* Line 1788 of yacc.c  */
#line 6503 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 716:

/* Line 1788 of yacc.c  */
#line 6509 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 717:

/* Line 1788 of yacc.c  */
#line 6514 "/root/inception/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 718:

/* Line 1788 of yacc.c  */
#line 6516 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 719:

/* Line 1788 of yacc.c  */
#line 6529 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 720:

/* Line 1788 of yacc.c  */
#line 6535 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 721:

/* Line 1788 of yacc.c  */
#line 6541 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 722:

/* Line 1788 of yacc.c  */
#line 6547 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 723:

/* Line 1788 of yacc.c  */
#line 6552 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 724:

/* Line 1788 of yacc.c  */
#line 6557 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 725:

/* Line 1788 of yacc.c  */
#line 6566 "/root/inception/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 726:

/* Line 1788 of yacc.c  */
#line 6587 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 728:

/* Line 1788 of yacc.c  */
#line 6596 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 729:

/* Line 1788 of yacc.c  */
#line 6600 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1788 of yacc.c  */
#line 6601 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1788 of yacc.c  */
#line 6606 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 732:

/* Line 1788 of yacc.c  */
#line 6613 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 733:

/* Line 1788 of yacc.c  */
#line 6617 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 734:

/* Line 1788 of yacc.c  */
#line 6618 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 735:

/* Line 1788 of yacc.c  */
#line 6622 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 736:

/* Line 1788 of yacc.c  */
#line 6623 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 737:

/* Line 1788 of yacc.c  */
#line 6628 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 738:

/* Line 1788 of yacc.c  */
#line 6636 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 739:

/* Line 1788 of yacc.c  */
#line 6640 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 740:

/* Line 1788 of yacc.c  */
#line 6641 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 741:

/* Line 1788 of yacc.c  */
#line 6646 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 742:

/* Line 1788 of yacc.c  */
#line 6653 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 743:

/* Line 1788 of yacc.c  */
#line 6654 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 744:

/* Line 1788 of yacc.c  */
#line 6658 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 745:

/* Line 1788 of yacc.c  */
#line 6659 "/root/inception/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 746:

/* Line 1788 of yacc.c  */
#line 6663 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 747:

/* Line 1788 of yacc.c  */
#line 6664 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 748:

/* Line 1788 of yacc.c  */
#line 6669 "/root/inception/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 749:

/* Line 1788 of yacc.c  */
#line 6671 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 750:

/* Line 1788 of yacc.c  */
#line 6675 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 751:

/* Line 1788 of yacc.c  */
#line 6682 "/root/inception/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 752:

/* Line 1788 of yacc.c  */
#line 6691 "/root/inception/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 753:

/* Line 1788 of yacc.c  */
#line 6696 "/root/inception/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 754:

/* Line 1788 of yacc.c  */
#line 6703 "/root/inception/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 757:

/* Line 1788 of yacc.c  */
#line 6706 "/root/inception/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 758:

/* Line 1788 of yacc.c  */
#line 6707 "/root/inception/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 759:

/* Line 1788 of yacc.c  */
#line 6709 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 760:

/* Line 1788 of yacc.c  */
#line 6714 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 761:

/* Line 1788 of yacc.c  */
#line 6721 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 762:

/* Line 1788 of yacc.c  */
#line 6722 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 763:

/* Line 1788 of yacc.c  */
#line 6727 "/root/inception/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 764:

/* Line 1788 of yacc.c  */
#line 6735 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 765:

/* Line 1788 of yacc.c  */
#line 6739 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 766:

/* Line 1788 of yacc.c  */
#line 6740 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 767:

/* Line 1788 of yacc.c  */
#line 6744 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 768:

/* Line 1788 of yacc.c  */
#line 6747 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 769:

/* Line 1788 of yacc.c  */
#line 6748 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 770:

/* Line 1788 of yacc.c  */
#line 6749 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 771:

/* Line 1788 of yacc.c  */
#line 6750 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 772:

/* Line 1788 of yacc.c  */
#line 6755 "/root/inception/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 773:

/* Line 1788 of yacc.c  */
#line 6763 "/root/inception/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 774:

/* Line 1788 of yacc.c  */
#line 6769 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 775:

/* Line 1788 of yacc.c  */
#line 6770 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 776:

/* Line 1788 of yacc.c  */
#line 6775 "/root/inception/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 777:

/* Line 1788 of yacc.c  */
#line 6784 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 778:

/* Line 1788 of yacc.c  */
#line 6785 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 779:

/* Line 1788 of yacc.c  */
#line 6789 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 780:

/* Line 1788 of yacc.c  */
#line 6790 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 783:

/* Line 1788 of yacc.c  */
#line 6804 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 784:

/* Line 1788 of yacc.c  */
#line 6811 "/root/inception/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 786:

/* Line 1788 of yacc.c  */
#line 6817 "/root/inception/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 787:

/* Line 1788 of yacc.c  */
#line 6824 "/root/inception/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 788:

/* Line 1788 of yacc.c  */
#line 6836 "/root/inception/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 789:

/* Line 1788 of yacc.c  */
#line 6838 "/root/inception/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 790:

/* Line 1788 of yacc.c  */
#line 6840 "/root/inception/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 791:

/* Line 1788 of yacc.c  */
#line 6842 "/root/inception/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 792:

/* Line 1788 of yacc.c  */
#line 6847 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 793:

/* Line 1788 of yacc.c  */
#line 6853 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 794:

/* Line 1788 of yacc.c  */
#line 6859 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 795:

/* Line 1788 of yacc.c  */
#line 6866 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 796:

/* Line 1788 of yacc.c  */
#line 6873 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 797:

/* Line 1788 of yacc.c  */
#line 6881 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 798:

/* Line 1788 of yacc.c  */
#line 6882 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 799:

/* Line 1788 of yacc.c  */
#line 6883 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 800:

/* Line 1788 of yacc.c  */
#line 6884 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 801:

/* Line 1788 of yacc.c  */
#line 6885 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 802:

/* Line 1788 of yacc.c  */
#line 6889 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 803:

/* Line 1788 of yacc.c  */
#line 6893 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 804:

/* Line 1788 of yacc.c  */
#line 6894 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 805:

/* Line 1788 of yacc.c  */
#line 6898 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 806:

/* Line 1788 of yacc.c  */
#line 6899 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 807:

/* Line 1788 of yacc.c  */
#line 6903 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 809:

/* Line 1788 of yacc.c  */
#line 6908 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 810:

/* Line 1788 of yacc.c  */
#line 6909 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1788 of yacc.c  */
#line 6910 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1788 of yacc.c  */
#line 6914 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 813:

/* Line 1788 of yacc.c  */
#line 6915 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 814:

/* Line 1788 of yacc.c  */
#line 6919 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 815:

/* Line 1788 of yacc.c  */
#line 6936 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 818:

/* Line 1788 of yacc.c  */
#line 6953 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 820:

/* Line 1788 of yacc.c  */
#line 6958 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 826:

/* Line 1788 of yacc.c  */
#line 6983 "/root/inception/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 827:

/* Line 1788 of yacc.c  */
#line 6984 "/root/inception/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 828:

/* Line 1788 of yacc.c  */
#line 6989 "/root/inception/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 829:

/* Line 1788 of yacc.c  */
#line 6990 "/root/inception/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 833:

/* Line 1788 of yacc.c  */
#line 7005 "/root/inception/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 834:

/* Line 1788 of yacc.c  */
#line 7017 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 835:

/* Line 1788 of yacc.c  */
#line 7018 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 836:

/* Line 1788 of yacc.c  */
#line 7019 "/root/inception/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 837:

/* Line 1788 of yacc.c  */
#line 7023 "/root/inception/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 838:

/* Line 1788 of yacc.c  */
#line 7024 "/root/inception/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 839:

/* Line 1788 of yacc.c  */
#line 7029 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 840:

/* Line 1788 of yacc.c  */
#line 7035 "/root/inception/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 841:

/* Line 1788 of yacc.c  */
#line 7048 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 842:

/* Line 1788 of yacc.c  */
#line 7049 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 843:

/* Line 1788 of yacc.c  */
#line 7053 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 844:

/* Line 1788 of yacc.c  */
#line 7054 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 845:

/* Line 1788 of yacc.c  */
#line 7058 "/root/inception/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 846:

/* Line 1788 of yacc.c  */
#line 7059 "/root/inception/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 847:

/* Line 1788 of yacc.c  */
#line 7067 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
          }
    break;

  case 848:

/* Line 1788 of yacc.c  */
#line 7093 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 849:

/* Line 1788 of yacc.c  */
#line 7105 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 850:

/* Line 1788 of yacc.c  */
#line 7110 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 851:

/* Line 1788 of yacc.c  */
#line 7119 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 852:

/* Line 1788 of yacc.c  */
#line 7130 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 853:

/* Line 1788 of yacc.c  */
#line 7141 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 854:

/* Line 1788 of yacc.c  */
#line 7148 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 855:

/* Line 1788 of yacc.c  */
#line 7159 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 856:

/* Line 1788 of yacc.c  */
#line 7166 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 857:

/* Line 1788 of yacc.c  */
#line 7177 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 858:

/* Line 1788 of yacc.c  */
#line 7184 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 859:

/* Line 1788 of yacc.c  */
#line 7196 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 860:

/* Line 1788 of yacc.c  */
#line 7198 "/root/inception/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

//             if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
//               MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 861:

/* Line 1788 of yacc.c  */
#line 7218 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 862:

/* Line 1788 of yacc.c  */
#line 7231 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 863:

/* Line 1788 of yacc.c  */
#line 7236 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 864:

/* Line 1788 of yacc.c  */
#line 7241 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 865:

/* Line 1788 of yacc.c  */
#line 7246 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 866:

/* Line 1788 of yacc.c  */
#line 7251 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 867:

/* Line 1788 of yacc.c  */
#line 7258 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 868:

/* Line 1788 of yacc.c  */
#line 7265 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 869:

/* Line 1788 of yacc.c  */
#line 7270 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 870:

/* Line 1788 of yacc.c  */
#line 7277 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 871:

/* Line 1788 of yacc.c  */
#line 7278 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 872:

/* Line 1788 of yacc.c  */
#line 7279 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 873:

/* Line 1788 of yacc.c  */
#line 7280 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 874:

/* Line 1788 of yacc.c  */
#line 7284 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 875:

/* Line 1788 of yacc.c  */
#line 7286 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 876:

/* Line 1788 of yacc.c  */
#line 7297 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 877:

/* Line 1788 of yacc.c  */
#line 7298 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 878:

/* Line 1788 of yacc.c  */
#line 7302 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 879:

/* Line 1788 of yacc.c  */
#line 7303 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 881:

/* Line 1788 of yacc.c  */
#line 7309 "/root/inception/sql/sql_yacc.yy"
    {
//             Lex->m_sql_cmd= new (YYTHD->mem_root)
//               Sql_cmd_discard_import_tablespace(
//                 Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 882:

/* Line 1788 of yacc.c  */
#line 7317 "/root/inception/sql/sql_yacc.yy"
    {
//             Lex->m_sql_cmd= new (YYTHD->mem_root)
//               Sql_cmd_discard_import_tablespace(
//                 Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 888:

/* Line 1788 of yacc.c  */
#line 7339 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 889:

/* Line 1788 of yacc.c  */
#line 7344 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 890:

/* Line 1788 of yacc.c  */
#line 7351 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root)
//                               Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 892:

/* Line 1788 of yacc.c  */
#line 7365 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root)
//                               Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 893:

/* Line 1788 of yacc.c  */
#line 7377 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root)
//                               Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 895:

/* Line 1788 of yacc.c  */
#line 7390 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root)
//                               Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 897:

/* Line 1788 of yacc.c  */
#line 7403 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 898:

/* Line 1788 of yacc.c  */
#line 7410 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root)
//                               Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 900:

/* Line 1788 of yacc.c  */
#line 7423 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root)
//                                Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 901:

/* Line 1788 of yacc.c  */
#line 7450 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 902:

/* Line 1788 of yacc.c  */
#line 7457 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 904:

/* Line 1788 of yacc.c  */
#line 7465 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 905:

/* Line 1788 of yacc.c  */
#line 7477 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 907:

/* Line 1788 of yacc.c  */
#line 7483 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 908:

/* Line 1788 of yacc.c  */
#line 7488 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 909:

/* Line 1788 of yacc.c  */
#line 7495 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 911:

/* Line 1788 of yacc.c  */
#line 7510 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 912:

/* Line 1788 of yacc.c  */
#line 7514 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 913:

/* Line 1788 of yacc.c  */
#line 7518 "/root/inception/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 914:

/* Line 1788 of yacc.c  */
#line 7525 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 915:

/* Line 1788 of yacc.c  */
#line 7526 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 916:

/* Line 1788 of yacc.c  */
#line 7531 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 919:

/* Line 1788 of yacc.c  */
#line 7551 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 920:

/* Line 1788 of yacc.c  */
#line 7560 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 921:

/* Line 1788 of yacc.c  */
#line 7564 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 922:

/* Line 1788 of yacc.c  */
#line 7569 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 923:

/* Line 1788 of yacc.c  */
#line 7574 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 924:

/* Line 1788 of yacc.c  */
#line 7580 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 925:

/* Line 1788 of yacc.c  */
#line 7584 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 926:

/* Line 1788 of yacc.c  */
#line 7593 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 927:

/* Line 1788 of yacc.c  */
#line 7605 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 928:

/* Line 1788 of yacc.c  */
#line 7609 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 929:

/* Line 1788 of yacc.c  */
#line 7618 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 930:

/* Line 1788 of yacc.c  */
#line 7627 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 931:

/* Line 1788 of yacc.c  */
#line 7636 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 932:

/* Line 1788 of yacc.c  */
#line 7645 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 933:

/* Line 1788 of yacc.c  */
#line 7651 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 934:

/* Line 1788 of yacc.c  */
#line 7657 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 935:

/* Line 1788 of yacc.c  */
#line 7666 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 936:

/* Line 1788 of yacc.c  */
#line 7675 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 937:

/* Line 1788 of yacc.c  */
#line 7703 "/root/inception/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 938:

/* Line 1788 of yacc.c  */
#line 7724 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 939:

/* Line 1788 of yacc.c  */
#line 7734 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 940:

/* Line 1788 of yacc.c  */
#line 7738 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 948:

/* Line 1788 of yacc.c  */
#line 7755 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 949:

/* Line 1788 of yacc.c  */
#line 7760 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 950:

/* Line 1788 of yacc.c  */
#line 7771 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 951:

/* Line 1788 of yacc.c  */
#line 7776 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 952:

/* Line 1788 of yacc.c  */
#line 7786 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1788 of yacc.c  */
#line 7787 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1788 of yacc.c  */
#line 7791 "/root/inception/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 955:

/* Line 1788 of yacc.c  */
#line 7792 "/root/inception/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 956:

/* Line 1788 of yacc.c  */
#line 7796 "/root/inception/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 957:

/* Line 1788 of yacc.c  */
#line 7797 "/root/inception/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 958:

/* Line 1788 of yacc.c  */
#line 7798 "/root/inception/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 959:

/* Line 1788 of yacc.c  */
#line 7802 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 960:

/* Line 1788 of yacc.c  */
#line 7804 "/root/inception/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 961:

/* Line 1788 of yacc.c  */
#line 7809 "/root/inception/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 962:

/* Line 1788 of yacc.c  */
#line 7816 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 963:

/* Line 1788 of yacc.c  */
#line 7817 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 964:

/* Line 1788 of yacc.c  */
#line 7818 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 965:

/* Line 1788 of yacc.c  */
#line 7819 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1788 of yacc.c  */
#line 7824 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 967:

/* Line 1788 of yacc.c  */
#line 7840 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 968:

/* Line 1788 of yacc.c  */
#line 7844 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 969:

/* Line 1788 of yacc.c  */
#line 7851 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 970:

/* Line 1788 of yacc.c  */
#line 7855 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 971:

/* Line 1788 of yacc.c  */
#line 7862 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 972:

/* Line 1788 of yacc.c  */
#line 7866 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 973:

/* Line 1788 of yacc.c  */
#line 7870 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 974:

/* Line 1788 of yacc.c  */
#line 7877 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 975:

/* Line 1788 of yacc.c  */
#line 7884 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1788 of yacc.c  */
#line 7888 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 977:

/* Line 1788 of yacc.c  */
#line 7889 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 978:

/* Line 1788 of yacc.c  */
#line 7890 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 979:

/* Line 1788 of yacc.c  */
#line 7895 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 980:

/* Line 1788 of yacc.c  */
#line 7905 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 981:

/* Line 1788 of yacc.c  */
#line 7916 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 982:

/* Line 1788 of yacc.c  */
#line 7917 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 983:

/* Line 1788 of yacc.c  */
#line 7921 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 984:

/* Line 1788 of yacc.c  */
#line 7922 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 985:

/* Line 1788 of yacc.c  */
#line 7926 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 986:

/* Line 1788 of yacc.c  */
#line 7927 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 987:

/* Line 1788 of yacc.c  */
#line 7928 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 988:

/* Line 1788 of yacc.c  */
#line 7933 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 989:

/* Line 1788 of yacc.c  */
#line 7943 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
//             lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 990:

/* Line 1788 of yacc.c  */
#line 7955 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 991:

/* Line 1788 of yacc.c  */
#line 7963 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 992:

/* Line 1788 of yacc.c  */
#line 7978 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
//            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 993:

/* Line 1788 of yacc.c  */
#line 7989 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 994:

/* Line 1788 of yacc.c  */
#line 7990 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 995:

/* Line 1788 of yacc.c  */
#line 7994 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 996:

/* Line 1788 of yacc.c  */
#line 7995 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 997:

/* Line 1788 of yacc.c  */
#line 7999 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 998:

/* Line 1788 of yacc.c  */
#line 8000 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 999:

/* Line 1788 of yacc.c  */
#line 8001 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1000:

/* Line 1788 of yacc.c  */
#line 8002 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1001:

/* Line 1788 of yacc.c  */
#line 8003 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1002:

/* Line 1788 of yacc.c  */
#line 8004 "/root/inception/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1003:

/* Line 1788 of yacc.c  */
#line 8009 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1004:

/* Line 1788 of yacc.c  */
#line 8019 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            //lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1005:

/* Line 1788 of yacc.c  */
#line 8030 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1006:

/* Line 1788 of yacc.c  */
#line 8031 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1007:

/* Line 1788 of yacc.c  */
#line 8032 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1008:

/* Line 1788 of yacc.c  */
#line 8037 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1009:

/* Line 1788 of yacc.c  */
#line 8041 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1010:

/* Line 1788 of yacc.c  */
#line 8043 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1011:

/* Line 1788 of yacc.c  */
#line 8050 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1012:

/* Line 1788 of yacc.c  */
#line 8055 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1788 of yacc.c  */
#line 8068 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1016:

/* Line 1788 of yacc.c  */
#line 8081 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1017:

/* Line 1788 of yacc.c  */
#line 8085 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1022:

/* Line 1788 of yacc.c  */
#line 8104 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1023:

/* Line 1788 of yacc.c  */
#line 8114 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1024:

/* Line 1788 of yacc.c  */
#line 8123 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1025:

/* Line 1788 of yacc.c  */
#line 8128 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1026:

/* Line 1788 of yacc.c  */
#line 8134 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1031:

/* Line 1788 of yacc.c  */
#line 8149 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1032:

/* Line 1788 of yacc.c  */
#line 8159 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1788 of yacc.c  */
#line 8169 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1035:

/* Line 1788 of yacc.c  */
#line 8176 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1037:

/* Line 1788 of yacc.c  */
#line 8187 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 1039:

/* Line 1788 of yacc.c  */
#line 8193 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1040:

/* Line 1788 of yacc.c  */
#line 8194 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1041:

/* Line 1788 of yacc.c  */
#line 8204 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1044:

/* Line 1788 of yacc.c  */
#line 8218 "/root/inception/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1046:

/* Line 1788 of yacc.c  */
#line 8228 "/root/inception/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1048:

/* Line 1788 of yacc.c  */
#line 8237 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1050:

/* Line 1788 of yacc.c  */
#line 8256 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1051:

/* Line 1788 of yacc.c  */
#line 8264 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1053:

/* Line 1788 of yacc.c  */
#line 8271 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1058:

/* Line 1788 of yacc.c  */
#line 8281 "/root/inception/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1061:

/* Line 1788 of yacc.c  */
#line 8296 "/root/inception/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1065:

/* Line 1788 of yacc.c  */
#line 8313 "/root/inception/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1066:

/* Line 1788 of yacc.c  */
#line 8341 "/root/inception/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1068:

/* Line 1788 of yacc.c  */
#line 8373 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1069:

/* Line 1788 of yacc.c  */
#line 8379 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1072:

/* Line 1788 of yacc.c  */
#line 8391 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1073:

/* Line 1788 of yacc.c  */
#line 8406 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1788 of yacc.c  */
#line 8413 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str, 0))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1075:

/* Line 1788 of yacc.c  */
#line 8437 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1076:

/* Line 1788 of yacc.c  */
#line 8443 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1077:

/* Line 1788 of yacc.c  */
#line 8449 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1078:

/* Line 1788 of yacc.c  */
#line 8450 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1079:

/* Line 1788 of yacc.c  */
#line 8451 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1080:

/* Line 1788 of yacc.c  */
#line 8452 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1081:

/* Line 1788 of yacc.c  */
#line 8453 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1082:

/* Line 1788 of yacc.c  */
#line 8457 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1083:

/* Line 1788 of yacc.c  */
#line 8458 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1084:

/* Line 1788 of yacc.c  */
#line 8463 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1085:

/* Line 1788 of yacc.c  */
#line 8514 "/root/inception/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1788 of yacc.c  */
#line 8521 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1788 of yacc.c  */
#line 8527 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1788 of yacc.c  */
#line 8533 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1788 of yacc.c  */
#line 8539 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1788 of yacc.c  */
#line 8545 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1788 of yacc.c  */
#line 8551 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1788 of yacc.c  */
#line 8557 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1788 of yacc.c  */
#line 8569 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1095:

/* Line 1788 of yacc.c  */
#line 8620 "/root/inception/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1788 of yacc.c  */
#line 8627 "/root/inception/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1097:

/* Line 1788 of yacc.c  */
#line 8670 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1788 of yacc.c  */
#line 8676 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1788 of yacc.c  */
#line 8682 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1788 of yacc.c  */
#line 8688 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1788 of yacc.c  */
#line 8694 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1788 of yacc.c  */
#line 8700 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:

/* Line 1788 of yacc.c  */
#line 8706 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1788 of yacc.c  */
#line 8716 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1788 of yacc.c  */
#line 8722 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1788 of yacc.c  */
#line 8728 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1788 of yacc.c  */
#line 8734 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1788 of yacc.c  */
#line 8740 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1788 of yacc.c  */
#line 8750 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1788 of yacc.c  */
#line 8756 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1788 of yacc.c  */
#line 8766 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1788 of yacc.c  */
#line 8772 "/root/inception/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1115:

/* Line 1788 of yacc.c  */
#line 8780 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1116:

/* Line 1788 of yacc.c  */
#line 8786 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1117:

/* Line 1788 of yacc.c  */
#line 8796 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1788 of yacc.c  */
#line 8802 "/root/inception/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1119:

/* Line 1788 of yacc.c  */
#line 8811 "/root/inception/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1788 of yacc.c  */
#line 8821 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1788 of yacc.c  */
#line 8827 "/root/inception/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1788 of yacc.c  */
#line 8837 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1788 of yacc.c  */
#line 8843 "/root/inception/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1788 of yacc.c  */
#line 8856 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1788 of yacc.c  */
#line 8862 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1788 of yacc.c  */
#line 8868 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1788 of yacc.c  */
#line 8874 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1788 of yacc.c  */
#line 8880 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1788 of yacc.c  */
#line 8886 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1788 of yacc.c  */
#line 8892 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1788 of yacc.c  */
#line 8898 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1788 of yacc.c  */
#line 8904 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1788 of yacc.c  */
#line 8910 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1788 of yacc.c  */
#line 8916 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1788 of yacc.c  */
#line 8922 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1788 of yacc.c  */
#line 8928 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1788 of yacc.c  */
#line 8934 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1788 of yacc.c  */
#line 8963 "/root/inception/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1149:

/* Line 1788 of yacc.c  */
#line 8964 "/root/inception/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1150:

/* Line 1788 of yacc.c  */
#line 8965 "/root/inception/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1151:

/* Line 1788 of yacc.c  */
#line 8966 "/root/inception/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1152:

/* Line 1788 of yacc.c  */
#line 8967 "/root/inception/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1153:

/* Line 1788 of yacc.c  */
#line 8968 "/root/inception/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1154:

/* Line 1788 of yacc.c  */
#line 8972 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1155:

/* Line 1788 of yacc.c  */
#line 8973 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1161:

/* Line 1788 of yacc.c  */
#line 8983 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1788 of yacc.c  */
#line 8999 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1788 of yacc.c  */
#line 9005 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1168:

/* Line 1788 of yacc.c  */
#line 9009 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1788 of yacc.c  */
#line 9015 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1788 of yacc.c  */
#line 9021 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1788 of yacc.c  */
#line 9027 "/root/inception/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1788 of yacc.c  */
#line 9033 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1173:

/* Line 1788 of yacc.c  */
#line 9035 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1788 of yacc.c  */
#line 9042 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1788 of yacc.c  */
#line 9049 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1788 of yacc.c  */
#line 9055 "/root/inception/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1177:

/* Line 1788 of yacc.c  */
#line 9096 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1178:

/* Line 1788 of yacc.c  */
#line 9105 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1788 of yacc.c  */
#line 9112 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1788 of yacc.c  */
#line 9120 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1788 of yacc.c  */
#line 9126 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1788 of yacc.c  */
#line 9133 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1788 of yacc.c  */
#line 9139 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1788 of yacc.c  */
#line 9153 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1788 of yacc.c  */
#line 9161 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1788 of yacc.c  */
#line 9176 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1788 of yacc.c  */
#line 9182 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1788 of yacc.c  */
#line 9188 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1189:

/* Line 1788 of yacc.c  */
#line 9196 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1788 of yacc.c  */
#line 9202 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1788 of yacc.c  */
#line 9208 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1788 of yacc.c  */
#line 9214 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1788 of yacc.c  */
#line 9220 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1788 of yacc.c  */
#line 9235 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1788 of yacc.c  */
#line 9247 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1788 of yacc.c  */
#line 9253 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:

/* Line 1788 of yacc.c  */
#line 9259 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:

/* Line 1788 of yacc.c  */
#line 9265 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1788 of yacc.c  */
#line 9271 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1788 of yacc.c  */
#line 9277 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1788 of yacc.c  */
#line 9283 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1788 of yacc.c  */
#line 9289 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1788 of yacc.c  */
#line 9295 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1788 of yacc.c  */
#line 9301 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1788 of yacc.c  */
#line 9307 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1788 of yacc.c  */
#line 9313 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1788 of yacc.c  */
#line 9319 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1788 of yacc.c  */
#line 9325 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1788 of yacc.c  */
#line 9331 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1788 of yacc.c  */
#line 9337 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1788 of yacc.c  */
#line 9343 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1212:

/* Line 1788 of yacc.c  */
#line 9351 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1788 of yacc.c  */
#line 9372 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1788 of yacc.c  */
#line 9379 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1788 of yacc.c  */
#line 9385 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1216:

/* Line 1788 of yacc.c  */
#line 9392 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1217:

/* Line 1788 of yacc.c  */
#line 9400 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1788 of yacc.c  */
#line 9407 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1788 of yacc.c  */
#line 9413 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1788 of yacc.c  */
#line 9419 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1788 of yacc.c  */
#line 9425 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1222:

/* Line 1788 of yacc.c  */
#line 9430 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1788 of yacc.c  */
#line 9436 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1788 of yacc.c  */
#line 9443 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1788 of yacc.c  */
#line 9449 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1788 of yacc.c  */
#line 9455 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:

/* Line 1788 of yacc.c  */
#line 9461 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1788 of yacc.c  */
#line 9467 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1788 of yacc.c  */
#line 9473 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1230:

/* Line 1788 of yacc.c  */
#line 9491 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1788 of yacc.c  */
#line 9497 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1788 of yacc.c  */
#line 9503 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1233:

/* Line 1788 of yacc.c  */
#line 9510 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1234:

/* Line 1788 of yacc.c  */
#line 9517 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1235:

/* Line 1788 of yacc.c  */
#line 9532 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1788 of yacc.c  */
#line 9538 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1788 of yacc.c  */
#line 9544 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1788 of yacc.c  */
#line 9550 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1788 of yacc.c  */
#line 9556 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1240:

/* Line 1788 of yacc.c  */
#line 9563 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1788 of yacc.c  */
#line 9569 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1788 of yacc.c  */
#line 9575 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1788 of yacc.c  */
#line 9581 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1788 of yacc.c  */
#line 9587 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1788 of yacc.c  */
#line 9593 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1788 of yacc.c  */
#line 9600 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1247:

/* Line 1788 of yacc.c  */
#line 9613 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1788 of yacc.c  */
#line 9619 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1788 of yacc.c  */
#line 9625 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1788 of yacc.c  */
#line 9631 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1788 of yacc.c  */
#line 9637 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1252:

/* Line 1788 of yacc.c  */
#line 9645 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1788 of yacc.c  */
#line 9651 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1788 of yacc.c  */
#line 9663 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1788 of yacc.c  */
#line 9669 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1788 of yacc.c  */
#line 9675 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1788 of yacc.c  */
#line 9683 "/root/inception/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1788 of yacc.c  */
#line 9693 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1788 of yacc.c  */
#line 9779 "/root/inception/sql/sql_yacc.yy"
    {
// #ifdef HAVE_DLOPEN
//             udf_func *udf= 0;
//             LEX *lex= Lex;
//             if (using_udf_functions &&
//                 (udf= find_udf($1.str, $1.length)) &&
//                 udf->type == UDFTYPE_AGGREGATE)
//             {
//               if (lex->current_select->inc_in_sum_expr())
//               {
//                 my_parse_error(ER(ER_SYNTAX_ERROR));
//                 MYSQL_YYABORT;
//               }
//             }
//             /* Temporary placing the result of find_udf in $3 */
//             $<udf>$= udf;
// #endif
          }
    break;

  case 1260:

/* Line 1788 of yacc.c  */
#line 9798 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
// #ifdef HAVE_DLOPEN
//               /* Retrieving the result of find_udf */
//               udf_func *udf= $<udf>3;
// 
//               if (udf)
//               {
//                 if (udf->type == UDFTYPE_AGGREGATE)
//                 {
//                   Select->in_sum_expr--;
//                 }
// 
//                 item= Create_udf_func::s_singleton.create(thd, udf, $4);
//               }
//               else
// #endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1261:

/* Line 1788 of yacc.c  */
#line 9852 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1262:

/* Line 1788 of yacc.c  */
#line 9892 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1263:

/* Line 1788 of yacc.c  */
#line 9894 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1264:

/* Line 1788 of yacc.c  */
#line 9898 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1265:

/* Line 1788 of yacc.c  */
#line 9899 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1266:

/* Line 1788 of yacc.c  */
#line 9903 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1267:

/* Line 1788 of yacc.c  */
#line 9904 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1268:

/* Line 1788 of yacc.c  */
#line 9908 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1269:

/* Line 1788 of yacc.c  */
#line 9909 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1270:

/* Line 1788 of yacc.c  */
#line 9914 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1271:

/* Line 1788 of yacc.c  */
#line 9921 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1272:

/* Line 1788 of yacc.c  */
#line 9929 "/root/inception/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1273:

/* Line 1788 of yacc.c  */
#line 9954 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1788 of yacc.c  */
#line 9960 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1788 of yacc.c  */
#line 9966 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1788 of yacc.c  */
#line 9972 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1788 of yacc.c  */
#line 9978 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1788 of yacc.c  */
#line 9984 "/root/inception/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1788 of yacc.c  */
#line 9993 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1788 of yacc.c  */
#line 9999 "/root/inception/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1281:

/* Line 1788 of yacc.c  */
#line 10001 "/root/inception/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1282:

/* Line 1788 of yacc.c  */
#line 10003 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1788 of yacc.c  */
#line 10009 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1788 of yacc.c  */
#line 10020 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1788 of yacc.c  */
#line 10026 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1788 of yacc.c  */
#line 10032 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1788 of yacc.c  */
#line 10038 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1788 of yacc.c  */
#line 10044 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1788 of yacc.c  */
#line 10050 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1788 of yacc.c  */
#line 10056 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1788 of yacc.c  */
#line 10062 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1788 of yacc.c  */
#line 10068 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1788 of yacc.c  */
#line 10074 "/root/inception/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1294:

/* Line 1788 of yacc.c  */
#line 10078 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1295:

/* Line 1788 of yacc.c  */
#line 10092 "/root/inception/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1296:

/* Line 1788 of yacc.c  */
#line 10100 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1297:

/* Line 1788 of yacc.c  */
#line 10107 "/root/inception/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1298:

/* Line 1788 of yacc.c  */
#line 10118 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1299:

/* Line 1788 of yacc.c  */
#line 10126 "/root/inception/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1300:

/* Line 1788 of yacc.c  */
#line 10141 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1301:

/* Line 1788 of yacc.c  */
#line 10142 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1302:

/* Line 1788 of yacc.c  */
#line 10147 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1788 of yacc.c  */
#line 10152 "/root/inception/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1304:

/* Line 1788 of yacc.c  */
#line 10157 "/root/inception/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1305:

/* Line 1788 of yacc.c  */
#line 10161 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1306:

/* Line 1788 of yacc.c  */
#line 10173 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1307:

/* Line 1788 of yacc.c  */
#line 10182 "/root/inception/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1308:

/* Line 1788 of yacc.c  */
#line 10190 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1309:

/* Line 1788 of yacc.c  */
#line 10192 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1310:

/* Line 1788 of yacc.c  */
#line 10194 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1311:

/* Line 1788 of yacc.c  */
#line 10196 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1312:

/* Line 1788 of yacc.c  */
#line 10198 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1313:

/* Line 1788 of yacc.c  */
#line 10200 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1314:

/* Line 1788 of yacc.c  */
#line 10202 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1315:

/* Line 1788 of yacc.c  */
#line 10204 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1316:

/* Line 1788 of yacc.c  */
#line 10206 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1317:

/* Line 1788 of yacc.c  */
#line 10208 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1318:

/* Line 1788 of yacc.c  */
#line 10210 "/root/inception/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1319:

/* Line 1788 of yacc.c  */
#line 10214 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1320:

/* Line 1788 of yacc.c  */
#line 10215 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1321:

/* Line 1788 of yacc.c  */
#line 10220 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1322:

/* Line 1788 of yacc.c  */
#line 10227 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1323:

/* Line 1788 of yacc.c  */
#line 10234 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1324:

/* Line 1788 of yacc.c  */
#line 10235 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1325:

/* Line 1788 of yacc.c  */
#line 10240 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1326:

/* Line 1788 of yacc.c  */
#line 10247 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1327:

/* Line 1788 of yacc.c  */
#line 10254 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1328:

/* Line 1788 of yacc.c  */
#line 10255 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1329:

/* Line 1788 of yacc.c  */
#line 10259 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1330:

/* Line 1788 of yacc.c  */
#line 10260 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1331:

/* Line 1788 of yacc.c  */
#line 10265 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1332:

/* Line 1788 of yacc.c  */
#line 10273 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1333:

/* Line 1788 of yacc.c  */
#line 10283 "/root/inception/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1334:

/* Line 1788 of yacc.c  */
#line 10285 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1788 of yacc.c  */
#line 10293 "/root/inception/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1336:

/* Line 1788 of yacc.c  */
#line 10304 "/root/inception/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1337:

/* Line 1788 of yacc.c  */
#line 10305 "/root/inception/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1338:

/* Line 1788 of yacc.c  */
#line 10311 "/root/inception/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1339:

/* Line 1788 of yacc.c  */
#line 10313 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1340:

/* Line 1788 of yacc.c  */
#line 10333 "/root/inception/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1341:

/* Line 1788 of yacc.c  */
#line 10335 "/root/inception/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1342:

/* Line 1788 of yacc.c  */
#line 10338 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1343:

/* Line 1788 of yacc.c  */
#line 10346 "/root/inception/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1344:

/* Line 1788 of yacc.c  */
#line 10353 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1345:

/* Line 1788 of yacc.c  */
#line 10361 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1346:

/* Line 1788 of yacc.c  */
#line 10369 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1347:

/* Line 1788 of yacc.c  */
#line 10373 "/root/inception/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1348:

/* Line 1788 of yacc.c  */
#line 10375 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1349:

/* Line 1788 of yacc.c  */
#line 10383 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1350:

/* Line 1788 of yacc.c  */
#line 10391 "/root/inception/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1351:

/* Line 1788 of yacc.c  */
#line 10399 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1352:

/* Line 1788 of yacc.c  */
#line 10403 "/root/inception/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1353:

/* Line 1788 of yacc.c  */
#line 10409 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1354:

/* Line 1788 of yacc.c  */
#line 10419 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1355:

/* Line 1788 of yacc.c  */
#line 10427 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1356:

/* Line 1788 of yacc.c  */
#line 10436 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1357:

/* Line 1788 of yacc.c  */
#line 10440 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1358:

/* Line 1788 of yacc.c  */
#line 10447 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1788 of yacc.c  */
#line 10457 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1360:

/* Line 1788 of yacc.c  */
#line 10458 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1361:

/* Line 1788 of yacc.c  */
#line 10459 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1362:

/* Line 1788 of yacc.c  */
#line 10467 "/root/inception/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1364:

/* Line 1788 of yacc.c  */
#line 10473 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1365:

/* Line 1788 of yacc.c  */
#line 10487 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1366:

/* Line 1788 of yacc.c  */
#line 10492 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1367:

/* Line 1788 of yacc.c  */
#line 10503 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1368:

/* Line 1788 of yacc.c  */
#line 10543 "/root/inception/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1369:

/* Line 1788 of yacc.c  */
#line 10616 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1370:

/* Line 1788 of yacc.c  */
#line 10626 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1788 of yacc.c  */
#line 10631 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1372:

/* Line 1788 of yacc.c  */
#line 10639 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1373:

/* Line 1788 of yacc.c  */
#line 10651 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1374:

/* Line 1788 of yacc.c  */
#line 10670 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1375:

/* Line 1788 of yacc.c  */
#line 10678 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1377:

/* Line 1788 of yacc.c  */
#line 10687 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1788 of yacc.c  */
#line 10693 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1379:

/* Line 1788 of yacc.c  */
#line 10709 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1380:

/* Line 1788 of yacc.c  */
#line 10726 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1382:

/* Line 1788 of yacc.c  */
#line 10733 "/root/inception/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1383:

/* Line 1788 of yacc.c  */
#line 10738 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1384:

/* Line 1788 of yacc.c  */
#line 10763 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1385:

/* Line 1788 of yacc.c  */
#line 10764 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1386:

/* Line 1788 of yacc.c  */
#line 10769 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1387:

/* Line 1788 of yacc.c  */
#line 10772 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1388:

/* Line 1788 of yacc.c  */
#line 10773 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1389:

/* Line 1788 of yacc.c  */
#line 10774 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1390:

/* Line 1788 of yacc.c  */
#line 10778 "/root/inception/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1391:

/* Line 1788 of yacc.c  */
#line 10779 "/root/inception/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1392:

/* Line 1788 of yacc.c  */
#line 10784 "/root/inception/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1394:

/* Line 1788 of yacc.c  */
#line 10789 "/root/inception/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1399:

/* Line 1788 of yacc.c  */
#line 10802 "/root/inception/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1401:

/* Line 1788 of yacc.c  */
#line 10806 "/root/inception/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1403:

/* Line 1788 of yacc.c  */
#line 10811 "/root/inception/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1404:

/* Line 1788 of yacc.c  */
#line 10812 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1405:

/* Line 1788 of yacc.c  */
#line 10817 "/root/inception/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1406:

/* Line 1788 of yacc.c  */
#line 10819 "/root/inception/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1409:

/* Line 1788 of yacc.c  */
#line 10829 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1410:

/* Line 1788 of yacc.c  */
#line 10840 "/root/inception/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1411:

/* Line 1788 of yacc.c  */
#line 10852 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1412:

/* Line 1788 of yacc.c  */
#line 10853 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1413:

/* Line 1788 of yacc.c  */
#line 10854 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1414:

/* Line 1788 of yacc.c  */
#line 10855 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1415:

/* Line 1788 of yacc.c  */
#line 10856 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1416:

/* Line 1788 of yacc.c  */
#line 10857 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1417:

/* Line 1788 of yacc.c  */
#line 10858 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1418:

/* Line 1788 of yacc.c  */
#line 10859 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1419:

/* Line 1788 of yacc.c  */
#line 10860 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1420:

/* Line 1788 of yacc.c  */
#line 10861 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1421:

/* Line 1788 of yacc.c  */
#line 10862 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1422:

/* Line 1788 of yacc.c  */
#line 10863 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1423:

/* Line 1788 of yacc.c  */
#line 10867 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1424:

/* Line 1788 of yacc.c  */
#line 10868 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1425:

/* Line 1788 of yacc.c  */
#line 10869 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1426:

/* Line 1788 of yacc.c  */
#line 10870 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1427:

/* Line 1788 of yacc.c  */
#line 10871 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1428:

/* Line 1788 of yacc.c  */
#line 10872 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1429:

/* Line 1788 of yacc.c  */
#line 10873 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1430:

/* Line 1788 of yacc.c  */
#line 10874 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1431:

/* Line 1788 of yacc.c  */
#line 10875 "/root/inception/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1432:

/* Line 1788 of yacc.c  */
#line 10879 "/root/inception/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1433:

/* Line 1788 of yacc.c  */
#line 10880 "/root/inception/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1434:

/* Line 1788 of yacc.c  */
#line 10881 "/root/inception/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1435:

/* Line 1788 of yacc.c  */
#line 10882 "/root/inception/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1439:

/* Line 1788 of yacc.c  */
#line 10892 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1440:

/* Line 1788 of yacc.c  */
#line 10894 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1788 of yacc.c  */
#line 10907 "/root/inception/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1444:

/* Line 1788 of yacc.c  */
#line 10909 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1445:

/* Line 1788 of yacc.c  */
#line 10913 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1447:

/* Line 1788 of yacc.c  */
#line 10925 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1448:

/* Line 1788 of yacc.c  */
#line 10929 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1449:

/* Line 1788 of yacc.c  */
#line 10940 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1450:

/* Line 1788 of yacc.c  */
#line 10945 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1453:

/* Line 1788 of yacc.c  */
#line 10967 "/root/inception/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1454:

/* Line 1788 of yacc.c  */
#line 10969 "/root/inception/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1455:

/* Line 1788 of yacc.c  */
#line 10973 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1456:

/* Line 1788 of yacc.c  */
#line 10975 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1457:

/* Line 1788 of yacc.c  */
#line 10995 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1461:

/* Line 1788 of yacc.c  */
#line 11029 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1464:

/* Line 1788 of yacc.c  */
#line 11048 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1466:

/* Line 1788 of yacc.c  */
#line 11083 "/root/inception/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1467:

/* Line 1788 of yacc.c  */
#line 11085 "/root/inception/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1468:

/* Line 1788 of yacc.c  */
#line 11089 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1469:

/* Line 1788 of yacc.c  */
#line 11090 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1470:

/* Line 1788 of yacc.c  */
#line 11091 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1471:

/* Line 1788 of yacc.c  */
#line 11096 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1472:

/* Line 1788 of yacc.c  */
#line 11102 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1473:

/* Line 1788 of yacc.c  */
#line 11106 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1474:

/* Line 1788 of yacc.c  */
#line 11107 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1475:

/* Line 1788 of yacc.c  */
#line 11112 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1476:

/* Line 1788 of yacc.c  */
#line 11119 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1477:

/* Line 1788 of yacc.c  */
#line 11126 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1478:

/* Line 1788 of yacc.c  */
#line 11133 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1479:

/* Line 1788 of yacc.c  */
#line 11143 "/root/inception/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1480:

/* Line 1788 of yacc.c  */
#line 11170 "/root/inception/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1481:

/* Line 1788 of yacc.c  */
#line 11174 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1482:

/* Line 1788 of yacc.c  */
#line 11180 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1483:

/* Line 1788 of yacc.c  */
#line 11186 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1484:

/* Line 1788 of yacc.c  */
#line 11195 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1485:

/* Line 1788 of yacc.c  */
#line 11200 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1486:

/* Line 1788 of yacc.c  */
#line 11209 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1487:

/* Line 1788 of yacc.c  */
#line 11210 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1488:

/* Line 1788 of yacc.c  */
#line 11211 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1489:

/* Line 1788 of yacc.c  */
#line 11212 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1490:

/* Line 1788 of yacc.c  */
#line 11213 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1491:

/* Line 1788 of yacc.c  */
#line 11214 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1492:

/* Line 1788 of yacc.c  */
#line 11218 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1493:

/* Line 1788 of yacc.c  */
#line 11219 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1494:

/* Line 1788 of yacc.c  */
#line 11220 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1495:

/* Line 1788 of yacc.c  */
#line 11221 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1496:

/* Line 1788 of yacc.c  */
#line 11222 "/root/inception/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1497:

/* Line 1788 of yacc.c  */
#line 11226 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1498:

/* Line 1788 of yacc.c  */
#line 11227 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1499:

/* Line 1788 of yacc.c  */
#line 11228 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1500:

/* Line 1788 of yacc.c  */
#line 11229 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1501:

/* Line 1788 of yacc.c  */
#line 11230 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1502:

/* Line 1788 of yacc.c  */
#line 11234 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1503:

/* Line 1788 of yacc.c  */
#line 11235 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1504:

/* Line 1788 of yacc.c  */
#line 11236 "/root/inception/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1505:

/* Line 1788 of yacc.c  */
#line 11237 "/root/inception/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1506:

/* Line 1788 of yacc.c  */
#line 11242 "/root/inception/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1510:

/* Line 1788 of yacc.c  */
#line 11253 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(0));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1512:

/* Line 1788 of yacc.c  */
#line 11286 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1513:

/* Line 1788 of yacc.c  */
#line 11288 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1514:

/* Line 1788 of yacc.c  */
#line 11292 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1515:

/* Line 1788 of yacc.c  */
#line 11300 "/root/inception/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1516:

/* Line 1788 of yacc.c  */
#line 11312 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1517:

/* Line 1788 of yacc.c  */
#line 11318 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1519:

/* Line 1788 of yacc.c  */
#line 11323 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1520:

/* Line 1788 of yacc.c  */
#line 11328 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1521:

/* Line 1788 of yacc.c  */
#line 11347 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1522:

/* Line 1788 of yacc.c  */
#line 11386 "/root/inception/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              THD *thd= YYTHD;
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
		      mysql_errmsg_append(thd);
            }
          }
    break;

  case 1524:

/* Line 1788 of yacc.c  */
#line 11399 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1525:

/* Line 1788 of yacc.c  */
#line 11407 "/root/inception/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1527:

/* Line 1788 of yacc.c  */
#line 11410 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1528:

/* Line 1788 of yacc.c  */
#line 11422 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1529:

/* Line 1788 of yacc.c  */
#line 11433 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1530:

/* Line 1788 of yacc.c  */
#line 11439 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1531:

/* Line 1788 of yacc.c  */
#line 11450 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1532:

/* Line 1788 of yacc.c  */
#line 11459 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1533:

/* Line 1788 of yacc.c  */
#line 11460 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1534:

/* Line 1788 of yacc.c  */
#line 11461 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1535:

/* Line 1788 of yacc.c  */
#line 11476 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1536:

/* Line 1788 of yacc.c  */
#line 11478 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1537:

/* Line 1788 of yacc.c  */
#line 11485 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1538:

/* Line 1788 of yacc.c  */
#line 11506 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1539:

/* Line 1788 of yacc.c  */
#line 11527 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1540:

/* Line 1788 of yacc.c  */
#line 11539 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1541:

/* Line 1788 of yacc.c  */
#line 11543 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1542:

/* Line 1788 of yacc.c  */
#line 11551 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1788 of yacc.c  */
#line 11553 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1544:

/* Line 1788 of yacc.c  */
#line 11559 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1545:

/* Line 1788 of yacc.c  */
#line 11566 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1546:

/* Line 1788 of yacc.c  */
#line 11571 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1547:

/* Line 1788 of yacc.c  */
#line 11576 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1550:

/* Line 1788 of yacc.c  */
#line 11591 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1551:

/* Line 1788 of yacc.c  */
#line 11602 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1788 of yacc.c  */
#line 11620 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1788 of yacc.c  */
#line 11630 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1556:

/* Line 1788 of yacc.c  */
#line 11631 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1557:

/* Line 1788 of yacc.c  */
#line 11635 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1558:

/* Line 1788 of yacc.c  */
#line 11636 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1566:

/* Line 1788 of yacc.c  */
#line 11659 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1567:

/* Line 1788 of yacc.c  */
#line 11667 "/root/inception/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1568:

/* Line 1788 of yacc.c  */
#line 11672 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1569:

/* Line 1788 of yacc.c  */
#line 11677 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1570:

/* Line 1788 of yacc.c  */
#line 11684 "/root/inception/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1571:

/* Line 1788 of yacc.c  */
#line 11689 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1572:

/* Line 1788 of yacc.c  */
#line 11694 "/root/inception/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1573:

/* Line 1788 of yacc.c  */
#line 11706 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1574:

/* Line 1788 of yacc.c  */
#line 11708 "/root/inception/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1575:

/* Line 1788 of yacc.c  */
#line 11720 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1576:

/* Line 1788 of yacc.c  */
#line 11724 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1577:

/* Line 1788 of yacc.c  */
#line 11726 "/root/inception/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1578:

/* Line 1788 of yacc.c  */
#line 11741 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1579:

/* Line 1788 of yacc.c  */
#line 11742 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1580:

/* Line 1788 of yacc.c  */
#line 11747 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1581:

/* Line 1788 of yacc.c  */
#line 11755 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1582:

/* Line 1788 of yacc.c  */
#line 11756 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1583:

/* Line 1788 of yacc.c  */
#line 11757 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1584:

/* Line 1788 of yacc.c  */
#line 11759 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1586:

/* Line 1788 of yacc.c  */
#line 11769 "/root/inception/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1587:

/* Line 1788 of yacc.c  */
#line 11770 "/root/inception/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1588:

/* Line 1788 of yacc.c  */
#line 11774 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1589:

/* Line 1788 of yacc.c  */
#line 11775 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1590:

/* Line 1788 of yacc.c  */
#line 11777 "/root/inception/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1591:

/* Line 1788 of yacc.c  */
#line 11778 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1592:

/* Line 1788 of yacc.c  */
#line 11780 "/root/inception/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1593:

/* Line 1788 of yacc.c  */
#line 11781 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1598:

/* Line 1788 of yacc.c  */
#line 11796 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1599:

/* Line 1788 of yacc.c  */
#line 11805 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1600:

/* Line 1788 of yacc.c  */
#line 11806 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1601:

/* Line 1788 of yacc.c  */
#line 11810 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1602:

/* Line 1788 of yacc.c  */
#line 11811 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1603:

/* Line 1788 of yacc.c  */
#line 11816 "/root/inception/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1604:

/* Line 1788 of yacc.c  */
#line 11821 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1605:

/* Line 1788 of yacc.c  */
#line 11829 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1607:

/* Line 1788 of yacc.c  */
#line 11835 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1608:

/* Line 1788 of yacc.c  */
#line 11840 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1609:

/* Line 1788 of yacc.c  */
#line 11847 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1610:

/* Line 1788 of yacc.c  */
#line 11849 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1611:

/* Line 1788 of yacc.c  */
#line 11856 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1612:

/* Line 1788 of yacc.c  */
#line 11858 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1614:

/* Line 1788 of yacc.c  */
#line 11868 "/root/inception/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1616:

/* Line 1788 of yacc.c  */
#line 11876 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1617:

/* Line 1788 of yacc.c  */
#line 11884 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1618:

/* Line 1788 of yacc.c  */
#line 11902 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1621:

/* Line 1788 of yacc.c  */
#line 11912 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1624:

/* Line 1788 of yacc.c  */
#line 11925 "/root/inception/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1788 of yacc.c  */
#line 11934 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1626:

/* Line 1788 of yacc.c  */
#line 11935 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1627:

/* Line 1788 of yacc.c  */
#line 11942 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1629:

/* Line 1788 of yacc.c  */
#line 11957 "/root/inception/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1630:

/* Line 1788 of yacc.c  */
#line 11968 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1631:

/* Line 1788 of yacc.c  */
#line 11970 "/root/inception/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1632:

/* Line 1788 of yacc.c  */
#line 11976 "/root/inception/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1633:

/* Line 1788 of yacc.c  */
#line 11981 "/root/inception/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1634:

/* Line 1788 of yacc.c  */
#line 11987 "/root/inception/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1637:

/* Line 1788 of yacc.c  */
#line 12000 "/root/inception/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1638:

/* Line 1788 of yacc.c  */
#line 12013 "/root/inception/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1639:

/* Line 1788 of yacc.c  */
#line 12028 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1640:

/* Line 1788 of yacc.c  */
#line 12029 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1641:

/* Line 1788 of yacc.c  */
#line 12033 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1642:

/* Line 1788 of yacc.c  */
#line 12034 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1643:

/* Line 1788 of yacc.c  */
#line 12038 "/root/inception/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1644:

/* Line 1788 of yacc.c  */
#line 12039 "/root/inception/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1645:

/* Line 1788 of yacc.c  */
#line 12040 "/root/inception/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1646:

/* Line 1788 of yacc.c  */
#line 12045 "/root/inception/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1647:

/* Line 1788 of yacc.c  */
#line 12056 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
          }
    break;

  case 1654:

/* Line 1788 of yacc.c  */
#line 12077 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1655:

/* Line 1788 of yacc.c  */
#line 12081 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1656:

/* Line 1788 of yacc.c  */
#line 12085 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1657:

/* Line 1788 of yacc.c  */
#line 12089 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1658:

/* Line 1788 of yacc.c  */
#line 12093 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1659:

/* Line 1788 of yacc.c  */
#line 12097 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1660:

/* Line 1788 of yacc.c  */
#line 12101 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1661:

/* Line 1788 of yacc.c  */
#line 12105 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1662:

/* Line 1788 of yacc.c  */
#line 12109 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1663:

/* Line 1788 of yacc.c  */
#line 12116 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1664:

/* Line 1788 of yacc.c  */
#line 12120 "/root/inception/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1665:

/* Line 1788 of yacc.c  */
#line 12129 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1666:

/* Line 1788 of yacc.c  */
#line 12137 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1667:

/* Line 1788 of yacc.c  */
#line 12144 "/root/inception/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
//              if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
//                MYSQL_YYABORT;
           }
    break;

  case 1668:

/* Line 1788 of yacc.c  */
#line 12151 "/root/inception/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
//              if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
//                MYSQL_YYABORT;
           }
    break;

  case 1669:

/* Line 1788 of yacc.c  */
#line 12159 "/root/inception/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
//              if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
//                MYSQL_YYABORT;
           }
    break;

  case 1670:

/* Line 1788 of yacc.c  */
#line 12167 "/root/inception/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
//              if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
//                MYSQL_YYABORT;
           }
    break;

  case 1671:

/* Line 1788 of yacc.c  */
#line 12175 "/root/inception/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
//              if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
//                MYSQL_YYABORT;
           }
    break;

  case 1672:

/* Line 1788 of yacc.c  */
#line 12183 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
//               MYSQL_YYABORT;
          }
    break;

  case 1673:

/* Line 1788 of yacc.c  */
#line 12191 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
//               MYSQL_YYABORT;
          }
    break;

  case 1674:

/* Line 1788 of yacc.c  */
#line 12198 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1675:

/* Line 1788 of yacc.c  */
#line 12200 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1676:

/* Line 1788 of yacc.c  */
#line 12202 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
//             if (prepare_schema_table(YYTHD, lex, $4, SCH_COLUMNS))
//               MYSQL_YYABORT;
          }
    break;

  case 1677:

/* Line 1788 of yacc.c  */
#line 12211 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1678:

/* Line 1788 of yacc.c  */
#line 12215 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1679:

/* Line 1788 of yacc.c  */
#line 12219 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1681:

/* Line 1788 of yacc.c  */
#line 12224 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1683:

/* Line 1788 of yacc.c  */
#line 12229 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
//             if (prepare_schema_table(YYTHD, lex, $3, SCH_STATISTICS))
//               MYSQL_YYABORT;
          }
    break;

  case 1684:

/* Line 1788 of yacc.c  */
#line 12238 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
//               MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1788 of yacc.c  */
#line 12245 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1686:

/* Line 1788 of yacc.c  */
#line 12250 "/root/inception/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1687:

/* Line 1788 of yacc.c  */
#line 12252 "/root/inception/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1688:

/* Line 1788 of yacc.c  */
#line 12254 "/root/inception/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1689:

/* Line 1788 of yacc.c  */
#line 12256 "/root/inception/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1690:

/* Line 1788 of yacc.c  */
#line 12258 "/root/inception/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1691:

/* Line 1788 of yacc.c  */
#line 12266 "/root/inception/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
//             if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
//               YYABORT;
          }
    break;

  case 1692:

/* Line 1788 of yacc.c  */
#line 12277 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
//               MYSQL_YYABORT;
          }
    break;

  case 1693:

/* Line 1788 of yacc.c  */
#line 12285 "/root/inception/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1694:

/* Line 1788 of yacc.c  */
#line 12287 "/root/inception/sql/sql_yacc.yy"
    { 
             LEX *lex= Lex; 
             lex->sql_command= SQLCOM_SHOW_VARIABLES; 
             lex->option_type= (yyvsp[(1) - (3)].var_type); 
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
//               MYSQL_YYABORT;
           }
    break;

  case 1695:

/* Line 1788 of yacc.c  */
#line 12295 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
//               MYSQL_YYABORT;
          }
    break;

  case 1696:

/* Line 1788 of yacc.c  */
#line 12302 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
//               MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1788 of yacc.c  */
#line 12309 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1698:

/* Line 1788 of yacc.c  */
#line 12319 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1699:

/* Line 1788 of yacc.c  */
#line 12326 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1700:

/* Line 1788 of yacc.c  */
#line 12332 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1701:

/* Line 1788 of yacc.c  */
#line 12341 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1702:

/* Line 1788 of yacc.c  */
#line 12349 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1703:

/* Line 1788 of yacc.c  */
#line 12353 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1704:

/* Line 1788 of yacc.c  */
#line 12357 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1705:

/* Line 1788 of yacc.c  */
#line 12364 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1706:

/* Line 1788 of yacc.c  */
#line 12371 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1707:

/* Line 1788 of yacc.c  */
#line 12377 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
//               MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1788 of yacc.c  */
#line 12384 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
//             if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
//               MYSQL_YYABORT;
          }
    break;

  case 1709:

/* Line 1788 of yacc.c  */
#line 12391 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1710:

/* Line 1788 of yacc.c  */
#line 12396 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1711:

/* Line 1788 of yacc.c  */
#line 12401 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1712:

/* Line 1788 of yacc.c  */
#line 12409 "/root/inception/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1713:

/* Line 1788 of yacc.c  */
#line 12411 "/root/inception/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1714:

/* Line 1788 of yacc.c  */
#line 12413 "/root/inception/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1719:

/* Line 1788 of yacc.c  */
#line 12427 "/root/inception/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1720:

/* Line 1788 of yacc.c  */
#line 12428 "/root/inception/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1721:

/* Line 1788 of yacc.c  */
#line 12432 "/root/inception/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1722:

/* Line 1788 of yacc.c  */
#line 12433 "/root/inception/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1725:

/* Line 1788 of yacc.c  */
#line 12442 "/root/inception/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1726:

/* Line 1788 of yacc.c  */
#line 12443 "/root/inception/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1727:

/* Line 1788 of yacc.c  */
#line 12447 "/root/inception/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1728:

/* Line 1788 of yacc.c  */
#line 12448 "/root/inception/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1730:

/* Line 1788 of yacc.c  */
#line 12454 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1788 of yacc.c  */
#line 12461 "/root/inception/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1732:

/* Line 1788 of yacc.c  */
#line 12471 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
//             if (prepare_schema_table(YYTHD, lex, $2, SCH_COLUMNS))
//               MYSQL_YYABORT;
          }
    break;

  case 1733:

/* Line 1788 of yacc.c  */
#line 12482 "/root/inception/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1734:

/* Line 1788 of yacc.c  */
#line 12486 "/root/inception/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1735:

/* Line 1788 of yacc.c  */
#line 12488 "/root/inception/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1743:

/* Line 1788 of yacc.c  */
#line 12505 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1744:

/* Line 1788 of yacc.c  */
#line 12506 "/root/inception/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1745:

/* Line 1788 of yacc.c  */
#line 12508 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1788 of yacc.c  */
#line 12522 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1747:

/* Line 1788 of yacc.c  */
#line 12529 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1748:

/* Line 1788 of yacc.c  */
#line 12534 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1749:

/* Line 1788 of yacc.c  */
#line 12543 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1750:

/* Line 1788 of yacc.c  */
#line 12544 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1752:

/* Line 1788 of yacc.c  */
#line 12549 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1753:

/* Line 1788 of yacc.c  */
#line 12551 "/root/inception/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1754:

/* Line 1788 of yacc.c  */
#line 12562 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1755:

/* Line 1788 of yacc.c  */
#line 12570 "/root/inception/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1757:

/* Line 1788 of yacc.c  */
#line 12585 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1758:

/* Line 1788 of yacc.c  */
#line 12590 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1759:

/* Line 1788 of yacc.c  */
#line 12592 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1760:

/* Line 1788 of yacc.c  */
#line 12594 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1761:

/* Line 1788 of yacc.c  */
#line 12596 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1762:

/* Line 1788 of yacc.c  */
#line 12598 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1763:

/* Line 1788 of yacc.c  */
#line 12600 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1764:

/* Line 1788 of yacc.c  */
#line 12602 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1765:

/* Line 1788 of yacc.c  */
#line 12604 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1766:

/* Line 1788 of yacc.c  */
#line 12606 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1767:

/* Line 1788 of yacc.c  */
#line 12608 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1768:

/* Line 1788 of yacc.c  */
#line 12610 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1769:

/* Line 1788 of yacc.c  */
#line 12612 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1770:

/* Line 1788 of yacc.c  */
#line 12614 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1771:

/* Line 1788 of yacc.c  */
#line 12618 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1772:

/* Line 1788 of yacc.c  */
#line 12619 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1788 of yacc.c  */
#line 12624 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1774:

/* Line 1788 of yacc.c  */
#line 12629 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1777:

/* Line 1788 of yacc.c  */
#line 12638 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1778:

/* Line 1788 of yacc.c  */
#line 12639 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 1779:

/* Line 1788 of yacc.c  */
#line 12640 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1780:

/* Line 1788 of yacc.c  */
#line 12641 "/root/inception/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1781:

/* Line 1788 of yacc.c  */
#line 12645 "/root/inception/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1782:

/* Line 1788 of yacc.c  */
#line 12646 "/root/inception/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1783:

/* Line 1788 of yacc.c  */
#line 12651 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1784:

/* Line 1788 of yacc.c  */
#line 12657 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1786:

/* Line 1788 of yacc.c  */
#line 12666 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1787:

/* Line 1788 of yacc.c  */
#line 12670 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1788:

/* Line 1788 of yacc.c  */
#line 12682 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1789:

/* Line 1788 of yacc.c  */
#line 12691 "/root/inception/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1790:

/* Line 1788 of yacc.c  */
#line 12692 "/root/inception/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1791:

/* Line 1788 of yacc.c  */
#line 12693 "/root/inception/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1792:

/* Line 1788 of yacc.c  */
#line 12700 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1793:

/* Line 1788 of yacc.c  */
#line 12711 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1794:

/* Line 1788 of yacc.c  */
#line 12723 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1795:

/* Line 1788 of yacc.c  */
#line 12733 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1796:

/* Line 1788 of yacc.c  */
#line 12743 "/root/inception/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1797:

/* Line 1788 of yacc.c  */
#line 12747 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1798:

/* Line 1788 of yacc.c  */
#line 12751 "/root/inception/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1799:

/* Line 1788 of yacc.c  */
#line 12752 "/root/inception/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1800:

/* Line 1788 of yacc.c  */
#line 12756 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1801:

/* Line 1788 of yacc.c  */
#line 12757 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1802:

/* Line 1788 of yacc.c  */
#line 12761 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1803:

/* Line 1788 of yacc.c  */
#line 12763 "/root/inception/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1804:

/* Line 1788 of yacc.c  */
#line 12774 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1805:

/* Line 1788 of yacc.c  */
#line 12778 "/root/inception/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1806:

/* Line 1788 of yacc.c  */
#line 12779 "/root/inception/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1807:

/* Line 1788 of yacc.c  */
#line 12780 "/root/inception/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1812:

/* Line 1788 of yacc.c  */
#line 12795 "/root/inception/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1813:

/* Line 1788 of yacc.c  */
#line 12800 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1814:

/* Line 1788 of yacc.c  */
#line 12807 "/root/inception/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1815:

/* Line 1788 of yacc.c  */
#line 12812 "/root/inception/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1820:

/* Line 1788 of yacc.c  */
#line 12830 "/root/inception/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1821:

/* Line 1788 of yacc.c  */
#line 12835 "/root/inception/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1822:

/* Line 1788 of yacc.c  */
#line 12842 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 1823:

/* Line 1788 of yacc.c  */
#line 12844 "/root/inception/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1825:

/* Line 1788 of yacc.c  */
#line 12849 "/root/inception/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1826:

/* Line 1788 of yacc.c  */
#line 12856 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 1827:

/* Line 1788 of yacc.c  */
#line 12858 "/root/inception/sql/sql_yacc.yy"
    { }
    break;

  case 1828:

/* Line 1788 of yacc.c  */
#line 12862 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1829:

/* Line 1788 of yacc.c  */
#line 12863 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1788 of yacc.c  */
#line 12864 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1788 of yacc.c  */
#line 12869 "/root/inception/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1832:

/* Line 1788 of yacc.c  */
#line 12871 "/root/inception/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1833:

/* Line 1788 of yacc.c  */
#line 12875 "/root/inception/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1834:

/* Line 1788 of yacc.c  */
#line 12877 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1835:

/* Line 1788 of yacc.c  */
#line 12885 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1836:

/* Line 1788 of yacc.c  */
#line 12886 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1788 of yacc.c  */
#line 12896 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1840:

/* Line 1788 of yacc.c  */
#line 12909 "/root/inception/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1841:

/* Line 1788 of yacc.c  */
#line 12933 "/root/inception/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1842:

/* Line 1788 of yacc.c  */
#line 12945 "/root/inception/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1843:

/* Line 1788 of yacc.c  */
#line 12956 "/root/inception/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1844:

/* Line 1788 of yacc.c  */
#line 12975 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1845:

/* Line 1788 of yacc.c  */
#line 12983 "/root/inception/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1846:

/* Line 1788 of yacc.c  */
#line 12995 "/root/inception/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1847:

/* Line 1788 of yacc.c  */
#line 13010 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1848:

/* Line 1788 of yacc.c  */
#line 13030 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1849:

/* Line 1788 of yacc.c  */
#line 13031 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1850:

/* Line 1788 of yacc.c  */
#line 13033 "/root/inception/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1851:

/* Line 1788 of yacc.c  */
#line 13041 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1852:

/* Line 1788 of yacc.c  */
#line 13042 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1853:

/* Line 1788 of yacc.c  */
#line 13043 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1854:

/* Line 1788 of yacc.c  */
#line 13045 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1855:

/* Line 1788 of yacc.c  */
#line 13052 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1856:

/* Line 1788 of yacc.c  */
#line 13058 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1857:

/* Line 1788 of yacc.c  */
#line 13064 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1858:

/* Line 1788 of yacc.c  */
#line 13070 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1859:

/* Line 1788 of yacc.c  */
#line 13076 "/root/inception/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1860:

/* Line 1788 of yacc.c  */
#line 13105 "/root/inception/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1861:

/* Line 1788 of yacc.c  */
#line 13136 "/root/inception/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1862:

/* Line 1788 of yacc.c  */
#line 13146 "/root/inception/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1788 of yacc.c  */
#line 13156 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1864:

/* Line 1788 of yacc.c  */
#line 13162 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1865:

/* Line 1788 of yacc.c  */
#line 13171 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1866:

/* Line 1788 of yacc.c  */
#line 13183 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1867:

/* Line 1788 of yacc.c  */
#line 13189 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1868:

/* Line 1788 of yacc.c  */
#line 13195 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1869:

/* Line 1788 of yacc.c  */
#line 13210 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1870:

/* Line 1788 of yacc.c  */
#line 13211 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1871:

/* Line 1788 of yacc.c  */
#line 13216 "/root/inception/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1872:

/* Line 1788 of yacc.c  */
#line 13225 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1873:

/* Line 1788 of yacc.c  */
#line 13240 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1874:

/* Line 1788 of yacc.c  */
#line 13245 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1875:

/* Line 1788 of yacc.c  */
#line 13295 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1876:

/* Line 1788 of yacc.c  */
#line 13300 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1877:

/* Line 1788 of yacc.c  */
#line 13317 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1878:

/* Line 1788 of yacc.c  */
#line 13322 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_trg_table_fields.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1879:

/* Line 1788 of yacc.c  */
#line 13402 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1880:

/* Line 1788 of yacc.c  */
#line 13427 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1881:

/* Line 1788 of yacc.c  */
#line 13457 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1882:

/* Line 1788 of yacc.c  */
#line 13459 "/root/inception/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1883:

/* Line 1788 of yacc.c  */
#line 13475 "/root/inception/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1884:

/* Line 1788 of yacc.c  */
#line 13484 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1885:

/* Line 1788 of yacc.c  */
#line 13489 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1886:

/* Line 1788 of yacc.c  */
#line 13495 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1887:

/* Line 1788 of yacc.c  */
#line 13501 "/root/inception/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1888:

/* Line 1788 of yacc.c  */
#line 13511 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1889:

/* Line 1788 of yacc.c  */
#line 13517 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1890:

/* Line 1788 of yacc.c  */
#line 13526 "/root/inception/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1891:

/* Line 1788 of yacc.c  */
#line 13535 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1892:

/* Line 1788 of yacc.c  */
#line 13537 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

	    if (thd->charset_is_system_charset)
	    {
		    const CHARSET_INFO *cs= system_charset_info;
		    int dummy_error;
		    uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
				    (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
				    (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
		    if (wlen < (yyvsp[(1) - (1)].lex_str).length)
		    {
			    ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
			    my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
					    cs->csname, err.ptr());
			    MYSQL_YYABORT;
		    }
		    (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
	    }
	    else
	    {
		    if (thd->convert_string(&(yyval.lex_str), system_charset_info,
					    (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
			    MYSQL_YYABORT;
	    }

        mysql_check_identified(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
	    if (thd->have_begin && get_hash_symbol((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,0))
	    {
		    my_error(ER_IDENT_USE_KEYWORD, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
		    mysql_errmsg_append(thd);
	    }
	  }
    break;

  case 1893:

/* Line 1788 of yacc.c  */
#line 13574 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1894:

/* Line 1788 of yacc.c  */
#line 13590 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1895:

/* Line 1788 of yacc.c  */
#line 13606 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1896:

/* Line 1788 of yacc.c  */
#line 13622 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1897:

/* Line 1788 of yacc.c  */
#line 13624 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
        mysql_check_identified(thd, (yyval.lex_str).str, (yyval.lex_str).length);
	    if (thd->have_begin && get_hash_symbol((yyval.lex_str).str, (yyval.lex_str).length,0))
	    {
		    my_error(ER_IDENT_USE_KEYWORD, MYF(0), (yyval.lex_str).str);
		    mysql_errmsg_append(thd);
	    }
          }
    break;

  case 1898:

/* Line 1788 of yacc.c  */
#line 13640 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1899:

/* Line 1788 of yacc.c  */
#line 13642 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1900:

/* Line 1788 of yacc.c  */
#line 13652 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1901:

/* Line 1788 of yacc.c  */
#line 13653 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1902:

/* Line 1788 of yacc.c  */
#line 13654 "/root/inception/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1903:

/* Line 1788 of yacc.c  */
#line 13659 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1904:

/* Line 1788 of yacc.c  */
#line 13686 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 1905:

/* Line 1788 of yacc.c  */
#line 13719 "/root/inception/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 1906:

/* Line 1788 of yacc.c  */
#line 13733 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1788 of yacc.c  */
#line 13734 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1788 of yacc.c  */
#line 13735 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1788 of yacc.c  */
#line 13736 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1788 of yacc.c  */
#line 13737 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1788 of yacc.c  */
#line 13738 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1788 of yacc.c  */
#line 13739 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1788 of yacc.c  */
#line 13740 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1788 of yacc.c  */
#line 13741 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1788 of yacc.c  */
#line 13742 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1788 of yacc.c  */
#line 13743 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1788 of yacc.c  */
#line 13744 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1788 of yacc.c  */
#line 13745 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1788 of yacc.c  */
#line 13746 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1788 of yacc.c  */
#line 13747 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1788 of yacc.c  */
#line 13748 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1788 of yacc.c  */
#line 13749 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1788 of yacc.c  */
#line 13750 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1788 of yacc.c  */
#line 13751 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1788 of yacc.c  */
#line 13752 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1788 of yacc.c  */
#line 13753 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1788 of yacc.c  */
#line 13754 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1788 of yacc.c  */
#line 13755 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1788 of yacc.c  */
#line 13756 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1788 of yacc.c  */
#line 13757 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1788 of yacc.c  */
#line 13758 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1788 of yacc.c  */
#line 13759 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1788 of yacc.c  */
#line 13760 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1788 of yacc.c  */
#line 13761 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1788 of yacc.c  */
#line 13762 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1788 of yacc.c  */
#line 13763 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1788 of yacc.c  */
#line 13764 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1788 of yacc.c  */
#line 13765 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1788 of yacc.c  */
#line 13766 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1788 of yacc.c  */
#line 13767 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1788 of yacc.c  */
#line 13768 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1788 of yacc.c  */
#line 13769 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1788 of yacc.c  */
#line 13770 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1788 of yacc.c  */
#line 13771 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1788 of yacc.c  */
#line 13772 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1788 of yacc.c  */
#line 13773 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1788 of yacc.c  */
#line 13774 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1788 of yacc.c  */
#line 13775 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1788 of yacc.c  */
#line 13776 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1788 of yacc.c  */
#line 13777 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1788 of yacc.c  */
#line 13778 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1788 of yacc.c  */
#line 13779 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1788 of yacc.c  */
#line 13780 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1788 of yacc.c  */
#line 13781 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1788 of yacc.c  */
#line 13782 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1788 of yacc.c  */
#line 13792 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1788 of yacc.c  */
#line 13793 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1788 of yacc.c  */
#line 13794 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1788 of yacc.c  */
#line 13795 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1788 of yacc.c  */
#line 13796 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1788 of yacc.c  */
#line 13797 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1788 of yacc.c  */
#line 13798 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1788 of yacc.c  */
#line 13799 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1788 of yacc.c  */
#line 13800 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1788 of yacc.c  */
#line 13801 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1788 of yacc.c  */
#line 13802 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1788 of yacc.c  */
#line 13803 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1788 of yacc.c  */
#line 13804 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1788 of yacc.c  */
#line 13805 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1788 of yacc.c  */
#line 13806 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1788 of yacc.c  */
#line 13807 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1788 of yacc.c  */
#line 13808 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1788 of yacc.c  */
#line 13809 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1788 of yacc.c  */
#line 13810 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1788 of yacc.c  */
#line 13811 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1788 of yacc.c  */
#line 13812 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1788 of yacc.c  */
#line 13813 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1788 of yacc.c  */
#line 13814 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1788 of yacc.c  */
#line 13815 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1788 of yacc.c  */
#line 13816 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1788 of yacc.c  */
#line 13817 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1788 of yacc.c  */
#line 13818 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1788 of yacc.c  */
#line 13819 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1788 of yacc.c  */
#line 13820 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1788 of yacc.c  */
#line 13821 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1788 of yacc.c  */
#line 13822 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1788 of yacc.c  */
#line 13823 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1788 of yacc.c  */
#line 13824 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1788 of yacc.c  */
#line 13825 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1788 of yacc.c  */
#line 13826 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1788 of yacc.c  */
#line 13827 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1788 of yacc.c  */
#line 13828 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1788 of yacc.c  */
#line 13829 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1788 of yacc.c  */
#line 13830 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1788 of yacc.c  */
#line 13831 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1788 of yacc.c  */
#line 13832 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1788 of yacc.c  */
#line 13833 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1788 of yacc.c  */
#line 13834 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1788 of yacc.c  */
#line 13835 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1788 of yacc.c  */
#line 13836 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1788 of yacc.c  */
#line 13841 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1788 of yacc.c  */
#line 13842 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1788 of yacc.c  */
#line 13843 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1788 of yacc.c  */
#line 13844 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1788 of yacc.c  */
#line 13845 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1788 of yacc.c  */
#line 13846 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1788 of yacc.c  */
#line 13847 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1788 of yacc.c  */
#line 13848 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1788 of yacc.c  */
#line 13849 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1788 of yacc.c  */
#line 13850 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1788 of yacc.c  */
#line 13851 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1788 of yacc.c  */
#line 13852 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1788 of yacc.c  */
#line 13853 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1788 of yacc.c  */
#line 13854 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1788 of yacc.c  */
#line 13855 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1788 of yacc.c  */
#line 13856 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1788 of yacc.c  */
#line 13857 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1788 of yacc.c  */
#line 13858 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1788 of yacc.c  */
#line 13859 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1788 of yacc.c  */
#line 13860 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1788 of yacc.c  */
#line 13861 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1788 of yacc.c  */
#line 13862 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1788 of yacc.c  */
#line 13863 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1788 of yacc.c  */
#line 13864 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1788 of yacc.c  */
#line 13865 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1788 of yacc.c  */
#line 13866 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1788 of yacc.c  */
#line 13867 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1788 of yacc.c  */
#line 13868 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1788 of yacc.c  */
#line 13869 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1788 of yacc.c  */
#line 13870 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1788 of yacc.c  */
#line 13871 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1788 of yacc.c  */
#line 13872 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1788 of yacc.c  */
#line 13873 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1788 of yacc.c  */
#line 13874 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1788 of yacc.c  */
#line 13875 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1788 of yacc.c  */
#line 13876 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1788 of yacc.c  */
#line 13877 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1788 of yacc.c  */
#line 13878 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1788 of yacc.c  */
#line 13879 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1788 of yacc.c  */
#line 13880 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1788 of yacc.c  */
#line 13881 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1788 of yacc.c  */
#line 13882 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1788 of yacc.c  */
#line 13883 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1788 of yacc.c  */
#line 13884 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1788 of yacc.c  */
#line 13885 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1788 of yacc.c  */
#line 13886 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1788 of yacc.c  */
#line 13887 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1788 of yacc.c  */
#line 13888 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1788 of yacc.c  */
#line 13889 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1788 of yacc.c  */
#line 13890 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1788 of yacc.c  */
#line 13891 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1788 of yacc.c  */
#line 13892 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1788 of yacc.c  */
#line 13893 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1788 of yacc.c  */
#line 13894 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1788 of yacc.c  */
#line 13895 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1788 of yacc.c  */
#line 13896 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1788 of yacc.c  */
#line 13897 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1788 of yacc.c  */
#line 13898 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1788 of yacc.c  */
#line 13899 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1788 of yacc.c  */
#line 13900 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1788 of yacc.c  */
#line 13901 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1788 of yacc.c  */
#line 13902 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1788 of yacc.c  */
#line 13903 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1788 of yacc.c  */
#line 13904 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1788 of yacc.c  */
#line 13905 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1788 of yacc.c  */
#line 13906 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1788 of yacc.c  */
#line 13907 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1788 of yacc.c  */
#line 13908 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1788 of yacc.c  */
#line 13909 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1788 of yacc.c  */
#line 13910 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1788 of yacc.c  */
#line 13911 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1788 of yacc.c  */
#line 13912 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1788 of yacc.c  */
#line 13913 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1788 of yacc.c  */
#line 13914 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1788 of yacc.c  */
#line 13915 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1788 of yacc.c  */
#line 13916 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1788 of yacc.c  */
#line 13917 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1788 of yacc.c  */
#line 13918 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1788 of yacc.c  */
#line 13919 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1788 of yacc.c  */
#line 13920 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1788 of yacc.c  */
#line 13921 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1788 of yacc.c  */
#line 13922 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1788 of yacc.c  */
#line 13923 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1788 of yacc.c  */
#line 13924 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1788 of yacc.c  */
#line 13925 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1788 of yacc.c  */
#line 13926 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1788 of yacc.c  */
#line 13927 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1788 of yacc.c  */
#line 13928 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1788 of yacc.c  */
#line 13929 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1788 of yacc.c  */
#line 13930 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1788 of yacc.c  */
#line 13931 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1788 of yacc.c  */
#line 13932 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1788 of yacc.c  */
#line 13933 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1788 of yacc.c  */
#line 13934 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1788 of yacc.c  */
#line 13935 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1788 of yacc.c  */
#line 13936 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1788 of yacc.c  */
#line 13937 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1788 of yacc.c  */
#line 13938 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1788 of yacc.c  */
#line 13939 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1788 of yacc.c  */
#line 13940 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1788 of yacc.c  */
#line 13941 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1788 of yacc.c  */
#line 13942 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1788 of yacc.c  */
#line 13943 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1788 of yacc.c  */
#line 13944 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1788 of yacc.c  */
#line 13945 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1788 of yacc.c  */
#line 13946 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1788 of yacc.c  */
#line 13947 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1788 of yacc.c  */
#line 13948 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1788 of yacc.c  */
#line 13949 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1788 of yacc.c  */
#line 13950 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1788 of yacc.c  */
#line 13951 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1788 of yacc.c  */
#line 13952 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1788 of yacc.c  */
#line 13953 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1788 of yacc.c  */
#line 13954 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1788 of yacc.c  */
#line 13955 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1788 of yacc.c  */
#line 13956 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1788 of yacc.c  */
#line 13957 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1788 of yacc.c  */
#line 13958 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1788 of yacc.c  */
#line 13959 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1788 of yacc.c  */
#line 13960 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1788 of yacc.c  */
#line 13961 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1788 of yacc.c  */
#line 13962 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1788 of yacc.c  */
#line 13963 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1788 of yacc.c  */
#line 13964 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1788 of yacc.c  */
#line 13965 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1788 of yacc.c  */
#line 13966 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1788 of yacc.c  */
#line 13967 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1788 of yacc.c  */
#line 13968 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1788 of yacc.c  */
#line 13969 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1788 of yacc.c  */
#line 13970 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1788 of yacc.c  */
#line 13971 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1788 of yacc.c  */
#line 13972 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1788 of yacc.c  */
#line 13973 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1788 of yacc.c  */
#line 13974 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1788 of yacc.c  */
#line 13975 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1788 of yacc.c  */
#line 13976 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1788 of yacc.c  */
#line 13977 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1788 of yacc.c  */
#line 13978 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1788 of yacc.c  */
#line 13979 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1788 of yacc.c  */
#line 13980 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1788 of yacc.c  */
#line 13981 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1788 of yacc.c  */
#line 13982 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1788 of yacc.c  */
#line 13983 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1788 of yacc.c  */
#line 13984 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1788 of yacc.c  */
#line 13985 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1788 of yacc.c  */
#line 13986 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1788 of yacc.c  */
#line 13987 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1788 of yacc.c  */
#line 13988 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1788 of yacc.c  */
#line 13989 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1788 of yacc.c  */
#line 13990 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1788 of yacc.c  */
#line 13991 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1788 of yacc.c  */
#line 13992 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1788 of yacc.c  */
#line 13993 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1788 of yacc.c  */
#line 13994 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1788 of yacc.c  */
#line 13995 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1788 of yacc.c  */
#line 13996 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1788 of yacc.c  */
#line 13997 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1788 of yacc.c  */
#line 13998 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1788 of yacc.c  */
#line 13999 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1788 of yacc.c  */
#line 14000 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1788 of yacc.c  */
#line 14001 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1788 of yacc.c  */
#line 14002 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1788 of yacc.c  */
#line 14003 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1788 of yacc.c  */
#line 14004 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1788 of yacc.c  */
#line 14005 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1788 of yacc.c  */
#line 14006 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1788 of yacc.c  */
#line 14007 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1788 of yacc.c  */
#line 14008 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1788 of yacc.c  */
#line 14009 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1788 of yacc.c  */
#line 14010 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1788 of yacc.c  */
#line 14011 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1788 of yacc.c  */
#line 14012 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1788 of yacc.c  */
#line 14013 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1788 of yacc.c  */
#line 14014 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1788 of yacc.c  */
#line 14015 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1788 of yacc.c  */
#line 14016 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1788 of yacc.c  */
#line 14017 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1788 of yacc.c  */
#line 14018 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1788 of yacc.c  */
#line 14019 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1788 of yacc.c  */
#line 14020 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1788 of yacc.c  */
#line 14021 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1788 of yacc.c  */
#line 14022 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1788 of yacc.c  */
#line 14023 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1788 of yacc.c  */
#line 14024 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1788 of yacc.c  */
#line 14025 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1788 of yacc.c  */
#line 14026 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1788 of yacc.c  */
#line 14027 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1788 of yacc.c  */
#line 14028 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1788 of yacc.c  */
#line 14029 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1788 of yacc.c  */
#line 14030 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1788 of yacc.c  */
#line 14031 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1788 of yacc.c  */
#line 14032 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1788 of yacc.c  */
#line 14033 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1788 of yacc.c  */
#line 14034 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1788 of yacc.c  */
#line 14035 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1788 of yacc.c  */
#line 14036 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1788 of yacc.c  */
#line 14037 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1788 of yacc.c  */
#line 14038 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1788 of yacc.c  */
#line 14039 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1788 of yacc.c  */
#line 14040 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1788 of yacc.c  */
#line 14041 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1788 of yacc.c  */
#line 14042 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1788 of yacc.c  */
#line 14043 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1788 of yacc.c  */
#line 14044 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1788 of yacc.c  */
#line 14045 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1788 of yacc.c  */
#line 14046 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1788 of yacc.c  */
#line 14047 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1788 of yacc.c  */
#line 14048 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1788 of yacc.c  */
#line 14049 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1788 of yacc.c  */
#line 14050 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1788 of yacc.c  */
#line 14051 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1788 of yacc.c  */
#line 14052 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1788 of yacc.c  */
#line 14053 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1788 of yacc.c  */
#line 14054 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1788 of yacc.c  */
#line 14055 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1788 of yacc.c  */
#line 14056 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1788 of yacc.c  */
#line 14057 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1788 of yacc.c  */
#line 14058 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1788 of yacc.c  */
#line 14059 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1788 of yacc.c  */
#line 14060 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1788 of yacc.c  */
#line 14061 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1788 of yacc.c  */
#line 14062 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1788 of yacc.c  */
#line 14063 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1788 of yacc.c  */
#line 14064 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1788 of yacc.c  */
#line 14065 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1788 of yacc.c  */
#line 14066 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1788 of yacc.c  */
#line 14067 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1788 of yacc.c  */
#line 14068 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1788 of yacc.c  */
#line 14069 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1788 of yacc.c  */
#line 14070 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1788 of yacc.c  */
#line 14071 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1788 of yacc.c  */
#line 14072 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1788 of yacc.c  */
#line 14073 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1788 of yacc.c  */
#line 14074 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1788 of yacc.c  */
#line 14075 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1788 of yacc.c  */
#line 14076 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1788 of yacc.c  */
#line 14077 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1788 of yacc.c  */
#line 14078 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1788 of yacc.c  */
#line 14079 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1788 of yacc.c  */
#line 14080 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1788 of yacc.c  */
#line 14081 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1788 of yacc.c  */
#line 14082 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1788 of yacc.c  */
#line 14083 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1788 of yacc.c  */
#line 14084 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1788 of yacc.c  */
#line 14085 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1788 of yacc.c  */
#line 14086 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1788 of yacc.c  */
#line 14087 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1788 of yacc.c  */
#line 14088 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1788 of yacc.c  */
#line 14089 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1788 of yacc.c  */
#line 14090 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1788 of yacc.c  */
#line 14091 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1788 of yacc.c  */
#line 14092 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1788 of yacc.c  */
#line 14093 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1788 of yacc.c  */
#line 14094 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1788 of yacc.c  */
#line 14095 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1788 of yacc.c  */
#line 14096 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1788 of yacc.c  */
#line 14108 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2258:

/* Line 1788 of yacc.c  */
#line 14120 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1788 of yacc.c  */
#line 14124 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1788 of yacc.c  */
#line 14125 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1788 of yacc.c  */
#line 14131 "/root/inception/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2263:

/* Line 1788 of yacc.c  */
#line 14137 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2264:

/* Line 1788 of yacc.c  */
#line 14141 "/root/inception/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2265:

/* Line 1788 of yacc.c  */
#line 14146 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2267:

/* Line 1788 of yacc.c  */
#line 14156 "/root/inception/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2269:

/* Line 1788 of yacc.c  */
#line 14162 "/root/inception/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2272:

/* Line 1788 of yacc.c  */
#line 14176 "/root/inception/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2273:

/* Line 1788 of yacc.c  */
#line 14180 "/root/inception/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2274:

/* Line 1788 of yacc.c  */
#line 14185 "/root/inception/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2275:

/* Line 1788 of yacc.c  */
#line 14189 "/root/inception/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2276:

/* Line 1788 of yacc.c  */
#line 14198 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2279:

/* Line 1788 of yacc.c  */
#line 14206 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2280:

/* Line 1788 of yacc.c  */
#line 14207 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2281:

/* Line 1788 of yacc.c  */
#line 14208 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2282:

/* Line 1788 of yacc.c  */
#line 14212 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2283:

/* Line 1788 of yacc.c  */
#line 14213 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2284:

/* Line 1788 of yacc.c  */
#line 14214 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2285:

/* Line 1788 of yacc.c  */
#line 14215 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2286:

/* Line 1788 of yacc.c  */
#line 14219 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2287:

/* Line 1788 of yacc.c  */
#line 14220 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2288:

/* Line 1788 of yacc.c  */
#line 14221 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2289:

/* Line 1788 of yacc.c  */
#line 14222 "/root/inception/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2290:

/* Line 1788 of yacc.c  */
#line 14228 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2291:

/* Line 1788 of yacc.c  */
#line 14253 "/root/inception/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2292:

/* Line 1788 of yacc.c  */
#line 14260 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2293:

/* Line 1788 of yacc.c  */
#line 14353 "/root/inception/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2294:

/* Line 1788 of yacc.c  */
#line 14364 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2295:

/* Line 1788 of yacc.c  */
#line 14377 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2296:

/* Line 1788 of yacc.c  */
#line 14393 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2297:

/* Line 1788 of yacc.c  */
#line 14406 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2298:

/* Line 1788 of yacc.c  */
#line 14428 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2299:

/* Line 1788 of yacc.c  */
#line 14462 "/root/inception/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2300:

/* Line 1788 of yacc.c  */
#line 14503 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2301:

/* Line 1788 of yacc.c  */
#line 14531 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2302:

/* Line 1788 of yacc.c  */
#line 14577 "/root/inception/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2307:

/* Line 1788 of yacc.c  */
#line 14598 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2308:

/* Line 1788 of yacc.c  */
#line 14616 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2309:

/* Line 1788 of yacc.c  */
#line 14633 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2310:

/* Line 1788 of yacc.c  */
#line 14634 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2311:

/* Line 1788 of yacc.c  */
#line 14638 "/root/inception/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2312:

/* Line 1788 of yacc.c  */
#line 14639 "/root/inception/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2313:

/* Line 1788 of yacc.c  */
#line 14640 "/root/inception/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2314:

/* Line 1788 of yacc.c  */
#line 14641 "/root/inception/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2315:

/* Line 1788 of yacc.c  */
#line 14645 "/root/inception/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2316:

/* Line 1788 of yacc.c  */
#line 14647 "/root/inception/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2317:

/* Line 1788 of yacc.c  */
#line 14665 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2318:

/* Line 1788 of yacc.c  */
#line 14677 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2319:

/* Line 1788 of yacc.c  */
#line 14678 "/root/inception/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2320:

/* Line 1788 of yacc.c  */
#line 14680 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2321:

/* Line 1788 of yacc.c  */
#line 14686 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2322:

/* Line 1788 of yacc.c  */
#line 14692 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2323:

/* Line 1788 of yacc.c  */
#line 14703 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2324:

/* Line 1788 of yacc.c  */
#line 14714 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1788 of yacc.c  */
#line 14729 "/root/inception/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2330:

/* Line 1788 of yacc.c  */
#line 14741 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2331:

/* Line 1788 of yacc.c  */
#line 14742 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2332:

/* Line 1788 of yacc.c  */
#line 14744 "/root/inception/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2333:

/* Line 1788 of yacc.c  */
#line 14748 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2334:

/* Line 1788 of yacc.c  */
#line 14753 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2335:

/* Line 1788 of yacc.c  */
#line 14764 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1788 of yacc.c  */
#line 14773 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            //x->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2337:

/* Line 1788 of yacc.c  */
#line 14789 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            //lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2338:

/* Line 1788 of yacc.c  */
#line 14805 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2339:

/* Line 1788 of yacc.c  */
#line 14823 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
//             lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read($5,
//                                   lex->ident.str, lex->insert_list,
//                                   thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2340:

/* Line 1788 of yacc.c  */
#line 14843 "/root/inception/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2341:

/* Line 1788 of yacc.c  */
#line 14844 "/root/inception/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2342:

/* Line 1788 of yacc.c  */
#line 14848 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2343:

/* Line 1788 of yacc.c  */
#line 14849 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2344:

/* Line 1788 of yacc.c  */
#line 14853 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2345:

/* Line 1788 of yacc.c  */
#line 14854 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2346:

/* Line 1788 of yacc.c  */
#line 14855 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2347:

/* Line 1788 of yacc.c  */
#line 14856 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2348:

/* Line 1788 of yacc.c  */
#line 14858 "/root/inception/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2349:

/* Line 1788 of yacc.c  */
#line 14865 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2350:

/* Line 1788 of yacc.c  */
#line 14871 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2351:

/* Line 1788 of yacc.c  */
#line 14872 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2352:

/* Line 1788 of yacc.c  */
#line 14873 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2353:

/* Line 1788 of yacc.c  */
#line 14874 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2354:

/* Line 1788 of yacc.c  */
#line 14875 "/root/inception/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2355:

/* Line 1788 of yacc.c  */
#line 14882 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1788 of yacc.c  */
#line 14887 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2357:

/* Line 1788 of yacc.c  */
#line 14893 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2358:

/* Line 1788 of yacc.c  */
#line 14904 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2359:

/* Line 1788 of yacc.c  */
#line 14915 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2360:

/* Line 1788 of yacc.c  */
#line 14919 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2361:

/* Line 1788 of yacc.c  */
#line 14929 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1788 of yacc.c  */
#line 14935 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2363:

/* Line 1788 of yacc.c  */
#line 14942 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2364:

/* Line 1788 of yacc.c  */
#line 14954 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2365:

/* Line 1788 of yacc.c  */
#line 14965 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2368:

/* Line 1788 of yacc.c  */
#line 14979 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1788 of yacc.c  */
#line 14981 "/root/inception/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2374:

/* Line 1788 of yacc.c  */
#line 14999 "/root/inception/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2375:

/* Line 1788 of yacc.c  */
#line 15000 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1788 of yacc.c  */
#line 15002 "/root/inception/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2377:

/* Line 1788 of yacc.c  */
#line 15003 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1788 of yacc.c  */
#line 15005 "/root/inception/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2379:

/* Line 1788 of yacc.c  */
#line 15006 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1788 of yacc.c  */
#line 15008 "/root/inception/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2381:

/* Line 1788 of yacc.c  */
#line 15009 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1788 of yacc.c  */
#line 15010 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2383:

/* Line 1788 of yacc.c  */
#line 15011 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1788 of yacc.c  */
#line 15012 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2385:

/* Line 1788 of yacc.c  */
#line 15013 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2386:

/* Line 1788 of yacc.c  */
#line 15014 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2387:

/* Line 1788 of yacc.c  */
#line 15015 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2388:

/* Line 1788 of yacc.c  */
#line 15016 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2389:

/* Line 1788 of yacc.c  */
#line 15017 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2390:

/* Line 1788 of yacc.c  */
#line 15018 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2391:

/* Line 1788 of yacc.c  */
#line 15019 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2392:

/* Line 1788 of yacc.c  */
#line 15020 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2393:

/* Line 1788 of yacc.c  */
#line 15021 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2394:

/* Line 1788 of yacc.c  */
#line 15022 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2395:

/* Line 1788 of yacc.c  */
#line 15023 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2396:

/* Line 1788 of yacc.c  */
#line 15024 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2397:

/* Line 1788 of yacc.c  */
#line 15025 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2398:

/* Line 1788 of yacc.c  */
#line 15026 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2399:

/* Line 1788 of yacc.c  */
#line 15027 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2400:

/* Line 1788 of yacc.c  */
#line 15028 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2401:

/* Line 1788 of yacc.c  */
#line 15029 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2402:

/* Line 1788 of yacc.c  */
#line 15030 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2403:

/* Line 1788 of yacc.c  */
#line 15031 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2404:

/* Line 1788 of yacc.c  */
#line 15032 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2405:

/* Line 1788 of yacc.c  */
#line 15033 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2406:

/* Line 1788 of yacc.c  */
#line 15034 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2407:

/* Line 1788 of yacc.c  */
#line 15035 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2408:

/* Line 1788 of yacc.c  */
#line 15039 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1788 of yacc.c  */
#line 15040 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1788 of yacc.c  */
#line 15050 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2413:

/* Line 1788 of yacc.c  */
#line 15060 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2414:

/* Line 1788 of yacc.c  */
#line 15070 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2415:

/* Line 1788 of yacc.c  */
#line 15083 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2416:

/* Line 1788 of yacc.c  */
#line 15098 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2417:

/* Line 1788 of yacc.c  */
#line 15111 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2418:

/* Line 1788 of yacc.c  */
#line 15124 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2419:

/* Line 1788 of yacc.c  */
#line 15136 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2420:

/* Line 1788 of yacc.c  */
#line 15141 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2421:

/* Line 1788 of yacc.c  */
#line 15149 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2422:

/* Line 1788 of yacc.c  */
#line 15154 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2423:

/* Line 1788 of yacc.c  */
#line 15162 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            //check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2424:

/* Line 1788 of yacc.c  */
#line 15177 "/root/inception/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2425:

/* Line 1788 of yacc.c  */
#line 15188 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2426:

/* Line 1788 of yacc.c  */
#line 15197 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2427:

/* Line 1788 of yacc.c  */
#line 15207 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2428:

/* Line 1788 of yacc.c  */
#line 15215 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2432:

/* Line 1788 of yacc.c  */
#line 15229 "/root/inception/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2434:

/* Line 1788 of yacc.c  */
#line 15258 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2435:

/* Line 1788 of yacc.c  */
#line 15262 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2436:

/* Line 1788 of yacc.c  */
#line 15266 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2437:

/* Line 1788 of yacc.c  */
#line 15270 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2438:

/* Line 1788 of yacc.c  */
#line 15276 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1788 of yacc.c  */
#line 15281 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1788 of yacc.c  */
#line 15282 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2442:

/* Line 1788 of yacc.c  */
#line 15286 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1788 of yacc.c  */
#line 15287 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1788 of yacc.c  */
#line 15291 "/root/inception/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2445:

/* Line 1788 of yacc.c  */
#line 15293 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2446:

/* Line 1788 of yacc.c  */
#line 15299 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2447:

/* Line 1788 of yacc.c  */
#line 15305 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2448:

/* Line 1788 of yacc.c  */
#line 15311 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2449:

/* Line 1788 of yacc.c  */
#line 15319 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
	    lex->inception_cmd_type = INCEPTION_COMMAND_LOCAL_SHOWALL;
	}
    break;

  case 2450:

/* Line 1788 of yacc.c  */
#line 15324 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
	    lex->inception_cmd_type = INCEPTION_COMMAND_LOCAL_SHOW;
	}
    break;

  case 2451:

/* Line 1788 of yacc.c  */
#line 15332 "/root/inception/sql/sql_yacc.yy"
    {
              LEX *lex=Lex;
              if (lex->inception_cmd_type != INCEPTION_COMMAND_LOCAL_SHOWALL)
              {
                  Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
						    system_charset_info);
                  if (Lex->wild == NULL)
                      MYSQL_YYABORT;
              }
          }
    break;

  case 2452:

/* Line 1788 of yacc.c  */
#line 15346 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
	    lex->inception_cmd_type = INCEPTION_COMMAND_REMOTE_SHOW;
	    lex->sql_command = SQLCOM_INCEPTION;
	}
    break;

  case 2453:

/* Line 1788 of yacc.c  */
#line 15352 "/root/inception/sql/sql_yacc.yy"
    {	
            LEX *lex=Lex;
	    lex->sql_command = SQLCOM_INCEPTION;
	}
    break;

  case 2454:

/* Line 1788 of yacc.c  */
#line 15357 "/root/inception/sql/sql_yacc.yy"
    {	
            LEX *lex=Lex;
	    lex->sql_command = SQLCOM_INCEPTION;
	    lex->inception_cmd_type = INCEPTION_COMMAND_OSC_PROCESSLIST;
	  /* Lex->wild= new (YYTHD->mem_root) String($3.str, $3.length, */
		/* 			    system_charset_info); */
	  /* if (Lex->wild == NULL) */
	  /*     MYSQL_YYABORT; */
	}
    break;

  case 2455:

/* Line 1788 of yacc.c  */
#line 15367 "/root/inception/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
	    lex->sql_command = SQLCOM_INCEPTION;
	    lex->inception_cmd_type = INCEPTION_COMMAND_PROCESSLIST;
    }
    break;

  case 2456:

/* Line 1788 of yacc.c  */
#line 15373 "/root/inception/sql/sql_yacc.yy"
    {	
            LEX *lex=Lex;
	    lex->sql_command = SQLCOM_INCEPTION;
	    lex->inception_cmd_type = INCEPTION_COMMAND_OSC_SHOW;
	  Lex->wild= new (YYTHD->mem_root) String((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length,
					    system_charset_info);
	  if (Lex->wild == NULL)
	      MYSQL_YYABORT;
	}
    break;

  case 2457:

/* Line 1788 of yacc.c  */
#line 15383 "/root/inception/sql/sql_yacc.yy"
    {	
            LEX *lex=Lex;
	    lex->sql_command = SQLCOM_INCEPTION;
	    lex->inception_cmd_type = INCEPTION_COMMAND_OSC_ABORT;
	  Lex->wild= new (YYTHD->mem_root) String((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length,
					    system_charset_info);
	  if (Lex->wild == NULL)
	      MYSQL_YYABORT;
	}
    break;

  case 2458:

/* Line 1788 of yacc.c  */
#line 15396 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->sql_command = SQLCOM_INCEPTION;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
         }
    break;

  case 2459:

/* Line 1788 of yacc.c  */
#line 15405 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_INCEPTION;
         }
    break;

  case 2460:

/* Line 1788 of yacc.c  */
#line 15410 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
	    lex->inception_cmd_type = INCEPTION_COMMAND_REMOTE_SHOW;
            lex->sql_command = SQLCOM_INCEPTION;
        }
    break;

  case 2461:

/* Line 1788 of yacc.c  */
#line 15416 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
	    lex->var_list.empty();
	    lex->inception_cmd_type = INCEPTION_COMMAND_LOCAL_SET;
            lex->sql_command = SQLCOM_INCEPTION;
            Lex->option_type= OPT_GLOBAL;
	}
    break;

  case 2462:

/* Line 1788 of yacc.c  */
#line 15424 "/root/inception/sql/sql_yacc.yy"
    {
	}
    break;

  case 2463:

/* Line 1788 of yacc.c  */
#line 15430 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_INCEPTION_START;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2464:

/* Line 1788 of yacc.c  */
#line 15439 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2465:

/* Line 1788 of yacc.c  */
#line 15444 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1788 of yacc.c  */
#line 15448 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1788 of yacc.c  */
#line 15449 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1788 of yacc.c  */
#line 15454 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2469:

/* Line 1788 of yacc.c  */
#line 15455 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2470:

/* Line 1788 of yacc.c  */
#line 15456 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2471:

/* Line 1788 of yacc.c  */
#line 15461 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2472:

/* Line 1788 of yacc.c  */
#line 15462 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2473:

/* Line 1788 of yacc.c  */
#line 15463 "/root/inception/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2474:

/* Line 1788 of yacc.c  */
#line 15467 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1788 of yacc.c  */
#line 15468 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1788 of yacc.c  */
#line 15473 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_INCEPTION_COMMIT;
          }
    break;

  case 2477:

/* Line 1788 of yacc.c  */
#line 15481 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2478:

/* Line 1788 of yacc.c  */
#line 15493 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2479:

/* Line 1788 of yacc.c  */
#line 15503 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2480:

/* Line 1788 of yacc.c  */
#line 15512 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2481:

/* Line 1788 of yacc.c  */
#line 15521 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2482:

/* Line 1788 of yacc.c  */
#line 15534 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2484:

/* Line 1788 of yacc.c  */
#line 15540 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2485:

/* Line 1788 of yacc.c  */
#line 15545 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2486:

/* Line 1788 of yacc.c  */
#line 15555 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2487:

/* Line 1788 of yacc.c  */
#line 15556 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2488:

/* Line 1788 of yacc.c  */
#line 15557 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2489:

/* Line 1788 of yacc.c  */
#line 15561 "/root/inception/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2490:

/* Line 1788 of yacc.c  */
#line 15562 "/root/inception/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2491:

/* Line 1788 of yacc.c  */
#line 15566 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2492:

/* Line 1788 of yacc.c  */
#line 15582 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2495:

/* Line 1788 of yacc.c  */
#line 15595 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2496:

/* Line 1788 of yacc.c  */
#line 15596 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2497:

/* Line 1788 of yacc.c  */
#line 15597 "/root/inception/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2498:

/* Line 1788 of yacc.c  */
#line 15602 "/root/inception/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2499:

/* Line 1788 of yacc.c  */
#line 15606 "/root/inception/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2501:

/* Line 1788 of yacc.c  */
#line 15615 "/root/inception/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2502:

/* Line 1788 of yacc.c  */
#line 15621 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2503:

/* Line 1788 of yacc.c  */
#line 15630 "/root/inception/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2504:

/* Line 1788 of yacc.c  */
#line 15636 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2505:

/* Line 1788 of yacc.c  */
#line 15657 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2510:

/* Line 1788 of yacc.c  */
#line 15685 "/root/inception/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2511:

/* Line 1788 of yacc.c  */
#line 15687 "/root/inception/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2512:

/* Line 1788 of yacc.c  */
#line 15694 "/root/inception/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2513:

/* Line 1788 of yacc.c  */
#line 15695 "/root/inception/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2514:

/* Line 1788 of yacc.c  */
#line 15696 "/root/inception/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2515:

/* Line 1788 of yacc.c  */
#line 15698 "/root/inception/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2516:

/* Line 1788 of yacc.c  */
#line 15704 "/root/inception/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2517:

/* Line 1788 of yacc.c  */
#line 15709 "/root/inception/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2518:

/* Line 1788 of yacc.c  */
#line 15720 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2519:

/* Line 1788 of yacc.c  */
#line 15722 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2520:

/* Line 1788 of yacc.c  */
#line 15724 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2534:

/* Line 1788 of yacc.c  */
#line 15757 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2535:

/* Line 1788 of yacc.c  */
#line 15771 "/root/inception/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2536:

/* Line 1788 of yacc.c  */
#line 15784 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1788 of yacc.c  */
#line 15786 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2538:

/* Line 1788 of yacc.c  */
#line 15788 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1788 of yacc.c  */
#line 15793 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2540:

/* Line 1788 of yacc.c  */
#line 15798 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2541:

/* Line 1788 of yacc.c  */
#line 15800 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2542:

/* Line 1788 of yacc.c  */
#line 15802 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2543:

/* Line 1788 of yacc.c  */
#line 15807 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2544:

/* Line 1788 of yacc.c  */
#line 15809 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2545:

/* Line 1788 of yacc.c  */
#line 15811 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2546:

/* Line 1788 of yacc.c  */
#line 15816 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2548:

/* Line 1788 of yacc.c  */
#line 15833 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2550:

/* Line 1788 of yacc.c  */
#line 15839 "/root/inception/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2551:

/* Line 1788 of yacc.c  */
#line 15844 "/root/inception/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2552:

/* Line 1788 of yacc.c  */
#line 15851 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2553:

/* Line 1788 of yacc.c  */
#line 15860 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2554:

/* Line 1788 of yacc.c  */
#line 15877 "/root/inception/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2557:

/* Line 1788 of yacc.c  */
#line 15898 "/root/inception/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2559:

/* Line 1788 of yacc.c  */
#line 15907 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2560:

/* Line 1788 of yacc.c  */
#line 15911 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2561:

/* Line 1788 of yacc.c  */
#line 15918 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2562:

/* Line 1788 of yacc.c  */
#line 15920 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2563:

/* Line 1788 of yacc.c  */
#line 15922 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2564:

/* Line 1788 of yacc.c  */
#line 15924 "/root/inception/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2565:

/* Line 1788 of yacc.c  */
#line 15941 "/root/inception/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2566:

/* Line 1788 of yacc.c  */
#line 15947 "/root/inception/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2567:

/* Line 1788 of yacc.c  */
#line 15952 "/root/inception/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2568:

/* Line 1788 of yacc.c  */
#line 15982 "/root/inception/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2569:

/* Line 1788 of yacc.c  */
#line 16017 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2570:

/* Line 1788 of yacc.c  */
#line 16035 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2571:

/* Line 1788 of yacc.c  */
#line 16058 "/root/inception/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2572:

/* Line 1788 of yacc.c  */
#line 16090 "/root/inception/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2573:

/* Line 1788 of yacc.c  */
#line 16095 "/root/inception/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2574:

/* Line 1788 of yacc.c  */
#line 16103 "/root/inception/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2575:

/* Line 1788 of yacc.c  */
#line 16126 "/root/inception/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2576:

/* Line 1788 of yacc.c  */
#line 16134 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2577:

/* Line 1788 of yacc.c  */
#line 16192 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2578:

/* Line 1788 of yacc.c  */
#line 16212 "/root/inception/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2579:

/* Line 1788 of yacc.c  */
#line 16225 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2580:

/* Line 1788 of yacc.c  */
#line 16235 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2581:

/* Line 1788 of yacc.c  */
#line 16243 "/root/inception/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2582:

/* Line 1788 of yacc.c  */
#line 16257 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2583:

/* Line 1788 of yacc.c  */
#line 16261 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2584:

/* Line 1788 of yacc.c  */
#line 16265 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2585:

/* Line 1788 of yacc.c  */
#line 16269 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2586:

/* Line 1788 of yacc.c  */
#line 16273 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2587:

/* Line 1788 of yacc.c  */
#line 16277 "/root/inception/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2588:

/* Line 1788 of yacc.c  */
#line 16284 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2589:

/* Line 1788 of yacc.c  */
#line 16291 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2590:

/* Line 1788 of yacc.c  */
#line 16298 "/root/inception/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2591:

/* Line 1788 of yacc.c  */
#line 16307 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2592:

/* Line 1788 of yacc.c  */
#line 16308 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2593:

/* Line 1788 of yacc.c  */
#line 16312 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2594:

/* Line 1788 of yacc.c  */
#line 16313 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2595:

/* Line 1788 of yacc.c  */
#line 16314 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2596:

/* Line 1788 of yacc.c  */
#line 16318 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2597:

/* Line 1788 of yacc.c  */
#line 16319 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2598:

/* Line 1788 of yacc.c  */
#line 16324 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2599:

/* Line 1788 of yacc.c  */
#line 16326 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2601:

/* Line 1788 of yacc.c  */
#line 16331 "/root/inception/sql/sql_yacc.yy"
    {}
    break;

  case 2602:

/* Line 1788 of yacc.c  */
#line 16332 "/root/inception/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2603:

/* Line 1788 of yacc.c  */
#line 16337 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2604:

/* Line 1788 of yacc.c  */
#line 16347 "/root/inception/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1788 of yacc.c  */
#line 41233 "/root/inception/debug/sql/sql_yacc.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



